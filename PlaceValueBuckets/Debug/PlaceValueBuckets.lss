
PlaceValueBuckets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e80  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00002e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000081c  20000080  00002f00  0002007c  2**4
                  ALLOC
  3 .stack        00000404  2000089c  0000371c  0002007c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ad52  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000064d2  00000000  00000000  0006ae4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009ab9  00000000  00000000  00071321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000810  00000000  00000000  0007adda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d20  00000000  00000000  0007b5ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a208  00000000  00000000  0007c30a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015d83  00000000  00000000  00096512  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071b7e  00000000  00000000  000ac295  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013ec  00000000  00000000  0011de14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 0c 00 20 f5 28 00 00 f1 28 00 00 f1 28 00 00     ... .(...(...(..
	...
      2c:	f1 28 00 00 00 00 00 00 00 00 00 00 f1 28 00 00     .(...........(..
      3c:	f1 28 00 00 f1 28 00 00 f1 28 00 00 f1 28 00 00     .(...(...(...(..
      4c:	f1 28 00 00 f1 28 00 00 f1 28 00 00 b5 0a 00 00     .(...(...(......
      5c:	00 00 00 00 f1 28 00 00 49 14 00 00 59 14 00 00     .....(..I...Y...
      6c:	69 14 00 00 f1 28 00 00 85 01 00 00 95 01 00 00     i....(..........
      7c:	f1 09 00 00 f1 28 00 00 f1 28 00 00 f1 28 00 00     .....(...(...(..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000080 	.word	0x20000080
      ac:	00000000 	.word	0x00000000
      b0:	00002e80 	.word	0x00002e80

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000084 	.word	0x20000084
      e0:	00002e80 	.word	0x00002e80
      e4:	00002e80 	.word	0x00002e80
      e8:	00000000 	.word	0x00000000

000000ec <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
      ec:	1c93      	adds	r3, r2, #2
      ee:	009b      	lsls	r3, r3, #2
      f0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
      f2:	2a02      	cmp	r2, #2
      f4:	d009      	beq.n	10a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
      f6:	2a03      	cmp	r2, #3
      f8:	d00c      	beq.n	114 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
      fa:	2301      	movs	r3, #1
      fc:	4093      	lsls	r3, r2
      fe:	001a      	movs	r2, r3
     100:	7e03      	ldrb	r3, [r0, #24]
     102:	4313      	orrs	r3, r2
     104:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     106:	2000      	movs	r0, #0
     108:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     10a:	7e03      	ldrb	r3, [r0, #24]
     10c:	2210      	movs	r2, #16
     10e:	4313      	orrs	r3, r2
     110:	7603      	strb	r3, [r0, #24]
     112:	e7f8      	b.n	106 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     114:	7e03      	ldrb	r3, [r0, #24]
     116:	2220      	movs	r2, #32
     118:	4313      	orrs	r3, r2
     11a:	7603      	strb	r3, [r0, #24]
     11c:	e7f3      	b.n	106 <tc_register_callback+0x1a>
	...

00000120 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     120:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     122:	0080      	lsls	r0, r0, #2
     124:	4b16      	ldr	r3, [pc, #88]	; (180 <_tc_interrupt_handler+0x60>)
     126:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     128:	6823      	ldr	r3, [r4, #0]
     12a:	7b9d      	ldrb	r5, [r3, #14]
     12c:	7e22      	ldrb	r2, [r4, #24]
     12e:	7e63      	ldrb	r3, [r4, #25]
     130:	4013      	ands	r3, r2
     132:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     134:	07eb      	lsls	r3, r5, #31
     136:	d406      	bmi.n	146 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     138:	07ab      	lsls	r3, r5, #30
     13a:	d40b      	bmi.n	154 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     13c:	06eb      	lsls	r3, r5, #27
     13e:	d410      	bmi.n	162 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     140:	06ab      	lsls	r3, r5, #26
     142:	d415      	bmi.n	170 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     144:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     146:	0020      	movs	r0, r4
     148:	68a3      	ldr	r3, [r4, #8]
     14a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     14c:	2301      	movs	r3, #1
     14e:	6822      	ldr	r2, [r4, #0]
     150:	7393      	strb	r3, [r2, #14]
     152:	e7f1      	b.n	138 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     154:	0020      	movs	r0, r4
     156:	68e3      	ldr	r3, [r4, #12]
     158:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     15a:	2302      	movs	r3, #2
     15c:	6822      	ldr	r2, [r4, #0]
     15e:	7393      	strb	r3, [r2, #14]
     160:	e7ec      	b.n	13c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     162:	0020      	movs	r0, r4
     164:	6923      	ldr	r3, [r4, #16]
     166:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     168:	2310      	movs	r3, #16
     16a:	6822      	ldr	r2, [r4, #0]
     16c:	7393      	strb	r3, [r2, #14]
     16e:	e7e7      	b.n	140 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     170:	0020      	movs	r0, r4
     172:	6963      	ldr	r3, [r4, #20]
     174:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     176:	6823      	ldr	r3, [r4, #0]
     178:	2220      	movs	r2, #32
     17a:	739a      	strb	r2, [r3, #14]
}
     17c:	e7e2      	b.n	144 <_tc_interrupt_handler+0x24>
     17e:	46c0      	nop			; (mov r8, r8)
     180:	20000190 	.word	0x20000190

00000184 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     184:	b510      	push	{r4, lr}
     186:	2000      	movs	r0, #0
     188:	4b01      	ldr	r3, [pc, #4]	; (190 <TC1_Handler+0xc>)
     18a:	4798      	blx	r3
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	00000121 	.word	0x00000121

00000194 <TC2_Handler>:
     194:	b510      	push	{r4, lr}
     196:	2001      	movs	r0, #1
     198:	4b01      	ldr	r3, [pc, #4]	; (1a0 <TC2_Handler+0xc>)
     19a:	4798      	blx	r3
     19c:	bd10      	pop	{r4, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00000121 	.word	0x00000121

000001a4 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     1a4:	4b06      	ldr	r3, [pc, #24]	; (1c0 <_tc_get_inst_index+0x1c>)
     1a6:	4298      	cmp	r0, r3
     1a8:	d008      	beq.n	1bc <_tc_get_inst_index+0x18>
     1aa:	4a06      	ldr	r2, [pc, #24]	; (1c4 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     1ac:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     1ae:	4290      	cmp	r0, r2
     1b0:	d001      	beq.n	1b6 <_tc_get_inst_index+0x12>
}
     1b2:	0018      	movs	r0, r3
     1b4:	4770      	bx	lr
     1b6:	3301      	adds	r3, #1
			return i;
     1b8:	b2db      	uxtb	r3, r3
     1ba:	e7fa      	b.n	1b2 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     1bc:	2300      	movs	r3, #0
     1be:	e7fb      	b.n	1b8 <_tc_get_inst_index+0x14>
     1c0:	42001800 	.word	0x42001800
     1c4:	42001c00 	.word	0x42001c00

000001c8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ca:	b085      	sub	sp, #20
     1cc:	0004      	movs	r4, r0
     1ce:	000d      	movs	r5, r1
     1d0:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     1d2:	0008      	movs	r0, r1
     1d4:	4b82      	ldr	r3, [pc, #520]	; (3e0 <tc_init+0x218>)
     1d6:	4798      	blx	r3
     1d8:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     1da:	ab03      	add	r3, sp, #12
     1dc:	2212      	movs	r2, #18
     1de:	701a      	strb	r2, [r3, #0]
     1e0:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     1e2:	ab02      	add	r3, sp, #8
     1e4:	322e      	adds	r2, #46	; 0x2e
     1e6:	801a      	strh	r2, [r3, #0]
     1e8:	3240      	adds	r2, #64	; 0x40
     1ea:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60a3      	str	r3, [r4, #8]
     1f0:	60e3      	str	r3, [r4, #12]
     1f2:	6123      	str	r3, [r4, #16]
     1f4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     1f6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     1f8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     1fa:	0082      	lsls	r2, r0, #2
     1fc:	4b79      	ldr	r3, [pc, #484]	; (3e4 <tc_init+0x21c>)
     1fe:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     200:	6025      	str	r5, [r4, #0]
#if SAMD10 || SAMD11
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     202:	78b3      	ldrb	r3, [r6, #2]
     204:	2b08      	cmp	r3, #8
     206:	d006      	beq.n	216 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     208:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     20a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     20c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     20e:	07db      	lsls	r3, r3, #31
     210:	d505      	bpl.n	21e <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     212:	b005      	add	sp, #20
     214:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     216:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     218:	07fa      	lsls	r2, r7, #31
     21a:	d4fa      	bmi.n	212 <tc_init+0x4a>
     21c:	e7f4      	b.n	208 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     21e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     220:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     222:	06db      	lsls	r3, r3, #27
     224:	d4f5      	bmi.n	212 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     226:	882b      	ldrh	r3, [r5, #0]
     228:	079b      	lsls	r3, r3, #30
     22a:	d4f2      	bmi.n	212 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
     22c:	7c33      	ldrb	r3, [r6, #16]
     22e:	2b00      	cmp	r3, #0
     230:	d000      	beq.n	234 <tc_init+0x6c>
     232:	e07a      	b.n	32a <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
     234:	7f33      	ldrb	r3, [r6, #28]
     236:	2b00      	cmp	r3, #0
     238:	d000      	beq.n	23c <tc_init+0x74>
     23a:	e082      	b.n	342 <tc_init+0x17a>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     23c:	496a      	ldr	r1, [pc, #424]	; (3e8 <tc_init+0x220>)
     23e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     240:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     242:	ab02      	add	r3, sp, #8
     244:	5ad3      	ldrh	r3, [r2, r3]
     246:	4303      	orrs	r3, r0
     248:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     24a:	78b3      	ldrb	r3, [r6, #2]
     24c:	2b08      	cmp	r3, #8
     24e:	d100      	bne.n	252 <tc_init+0x8a>
     250:	e087      	b.n	362 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
     252:	7833      	ldrb	r3, [r6, #0]
     254:	466a      	mov	r2, sp
     256:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     258:	ab03      	add	r3, sp, #12
     25a:	5ddf      	ldrb	r7, [r3, r7]
     25c:	4669      	mov	r1, sp
     25e:	0038      	movs	r0, r7
     260:	4b62      	ldr	r3, [pc, #392]	; (3ec <tc_init+0x224>)
     262:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     264:	0038      	movs	r0, r7
     266:	4b62      	ldr	r3, [pc, #392]	; (3f0 <tc_init+0x228>)
     268:	4798      	blx	r3
	ctrla_tmp =
     26a:	8931      	ldrh	r1, [r6, #8]
     26c:	88b3      	ldrh	r3, [r6, #4]
     26e:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     270:	78b1      	ldrb	r1, [r6, #2]
     272:	79b2      	ldrb	r2, [r6, #6]
     274:	4311      	orrs	r1, r2
	ctrla_tmp =
     276:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     278:	7873      	ldrb	r3, [r6, #1]
     27a:	2b00      	cmp	r3, #0
     27c:	d002      	beq.n	284 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     27e:	2380      	movs	r3, #128	; 0x80
     280:	011b      	lsls	r3, r3, #4
     282:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     284:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     286:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     288:	b25b      	sxtb	r3, r3
     28a:	2b00      	cmp	r3, #0
     28c:	dbfb      	blt.n	286 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     28e:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     290:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     292:	1e4b      	subs	r3, r1, #1
     294:	4199      	sbcs	r1, r3
     296:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     298:	7bb3      	ldrb	r3, [r6, #14]
     29a:	2b00      	cmp	r3, #0
     29c:	d001      	beq.n	2a2 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     29e:	2301      	movs	r3, #1
     2a0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2a4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2a6:	b25b      	sxtb	r3, r3
     2a8:	2b00      	cmp	r3, #0
     2aa:	dbfb      	blt.n	2a4 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     2ac:	23ff      	movs	r3, #255	; 0xff
     2ae:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     2b0:	2900      	cmp	r1, #0
     2b2:	d005      	beq.n	2c0 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2b4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2b6:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     2b8:	b25b      	sxtb	r3, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	dbfb      	blt.n	2b6 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     2be:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     2c0:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     2c2:	7af3      	ldrb	r3, [r6, #11]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d001      	beq.n	2cc <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     2c8:	2310      	movs	r3, #16
     2ca:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     2cc:	7b33      	ldrb	r3, [r6, #12]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d001      	beq.n	2d6 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     2d2:	2320      	movs	r3, #32
     2d4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2d8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2da:	b25b      	sxtb	r3, r3
     2dc:	2b00      	cmp	r3, #0
     2de:	dbfb      	blt.n	2d8 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     2e0:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2e4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2e6:	b25b      	sxtb	r3, r3
     2e8:	2b00      	cmp	r3, #0
     2ea:	dbfb      	blt.n	2e4 <tc_init+0x11c>
	switch (module_inst->counter_size) {
     2ec:	7923      	ldrb	r3, [r4, #4]
     2ee:	2b04      	cmp	r3, #4
     2f0:	d03f      	beq.n	372 <tc_init+0x1aa>
     2f2:	2b08      	cmp	r3, #8
     2f4:	d05e      	beq.n	3b4 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
     2f6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     2f8:	2b00      	cmp	r3, #0
     2fa:	d000      	beq.n	2fe <tc_init+0x136>
     2fc:	e789      	b.n	212 <tc_init+0x4a>
     2fe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     300:	b25b      	sxtb	r3, r3
     302:	2b00      	cmp	r3, #0
     304:	dbfb      	blt.n	2fe <tc_init+0x136>
				= config->counter_16_bit.value;
     306:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     308:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     30a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     30c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     30e:	b25b      	sxtb	r3, r3
     310:	2b00      	cmp	r3, #0
     312:	dbfb      	blt.n	30c <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
     314:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     316:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     318:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     31a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     31c:	b25b      	sxtb	r3, r3
     31e:	2b00      	cmp	r3, #0
     320:	dbfb      	blt.n	31a <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
     322:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     324:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     326:	2000      	movs	r0, #0
     328:	e773      	b.n	212 <tc_init+0x4a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     32a:	a901      	add	r1, sp, #4
     32c:	2301      	movs	r3, #1
     32e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     330:	2200      	movs	r2, #0
     332:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     334:	7e32      	ldrb	r2, [r6, #24]
     336:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     338:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     33a:	7d30      	ldrb	r0, [r6, #20]
     33c:	4b2d      	ldr	r3, [pc, #180]	; (3f4 <tc_init+0x22c>)
     33e:	4798      	blx	r3
     340:	e778      	b.n	234 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     342:	a901      	add	r1, sp, #4
     344:	2301      	movs	r3, #1
     346:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     348:	2200      	movs	r2, #0
     34a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     34c:	3224      	adds	r2, #36	; 0x24
     34e:	18b2      	adds	r2, r6, r2
     350:	7812      	ldrb	r2, [r2, #0]
     352:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     354:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     356:	331f      	adds	r3, #31
     358:	18f3      	adds	r3, r6, r3
     35a:	7818      	ldrb	r0, [r3, #0]
     35c:	4b25      	ldr	r3, [pc, #148]	; (3f4 <tc_init+0x22c>)
     35e:	4798      	blx	r3
     360:	e76c      	b.n	23c <tc_init+0x74>
     362:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     364:	1c7a      	adds	r2, r7, #1
     366:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     368:	ab02      	add	r3, sp, #8
     36a:	5ad3      	ldrh	r3, [r2, r3]
     36c:	4303      	orrs	r3, r0
     36e:	620b      	str	r3, [r1, #32]
     370:	e76f      	b.n	252 <tc_init+0x8a>
     372:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     374:	b25b      	sxtb	r3, r3
     376:	2b00      	cmp	r3, #0
     378:	dbfb      	blt.n	372 <tc_init+0x1aa>
					config->counter_8_bit.value;
     37a:	2328      	movs	r3, #40	; 0x28
     37c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     37e:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     380:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     382:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     384:	b25b      	sxtb	r3, r3
     386:	2b00      	cmp	r3, #0
     388:	dbfb      	blt.n	382 <tc_init+0x1ba>
					config->counter_8_bit.period;
     38a:	2329      	movs	r3, #41	; 0x29
     38c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     38e:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     390:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     392:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
     39a:	232a      	movs	r3, #42	; 0x2a
     39c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     39e:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3a0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3a4:	b25b      	sxtb	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	dbfb      	blt.n	3a2 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
     3aa:	232b      	movs	r3, #43	; 0x2b
     3ac:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     3ae:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     3b0:	2000      	movs	r0, #0
     3b2:	e72e      	b.n	212 <tc_init+0x4a>
     3b4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3b6:	b25b      	sxtb	r3, r3
     3b8:	2b00      	cmp	r3, #0
     3ba:	dbfb      	blt.n	3b4 <tc_init+0x1ec>
				= config->counter_32_bit.value;
     3bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     3be:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3c2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3c4:	b25b      	sxtb	r3, r3
     3c6:	2b00      	cmp	r3, #0
     3c8:	dbfb      	blt.n	3c2 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
     3ca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     3cc:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3ce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3d0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3d2:	b25b      	sxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	dbfb      	blt.n	3d0 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
     3d8:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     3da:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     3dc:	2000      	movs	r0, #0
     3de:	e718      	b.n	212 <tc_init+0x4a>
     3e0:	000001a5 	.word	0x000001a5
     3e4:	20000190 	.word	0x20000190
     3e8:	40000400 	.word	0x40000400
     3ec:	00002799 	.word	0x00002799
     3f0:	0000270d 	.word	0x0000270d
     3f4:	00002891 	.word	0x00002891

000003f8 <updateLEDMatrix>:
}

void updateLEDMatrix()
{
	
	updateLED = true;
     3f8:	2201      	movs	r2, #1
     3fa:	4b01      	ldr	r3, [pc, #4]	; (400 <STACK_SIZE>)
     3fc:	601a      	str	r2, [r3, #0]
	
	//port_pin_toggle_output_level(NEOPXL);
	//updateSPIValues();
}
     3fe:	4770      	bx	lr
     400:	200000ac 	.word	0x200000ac

00000404 <updaeteADDLED>:
{
     404:	b510      	push	{r4, lr}
	if(updateLED == true)
     406:	4b0c      	ldr	r3, [pc, #48]	; (438 <updaeteADDLED+0x34>)
     408:	681b      	ldr	r3, [r3, #0]
     40a:	2b01      	cmp	r3, #1
     40c:	d000      	beq.n	410 <updaeteADDLED+0xc>
}
     40e:	bd10      	pop	{r4, pc}
		updateLED = false;
     410:	2300      	movs	r3, #0
     412:	4a09      	ldr	r2, [pc, #36]	; (438 <updaeteADDLED+0x34>)
     414:	6013      	str	r3, [r2, #0]
		testColor[0].RBrightness =	count;
     416:	4909      	ldr	r1, [pc, #36]	; (43c <updaeteADDLED+0x38>)
     418:	780a      	ldrb	r2, [r1, #0]
     41a:	4809      	ldr	r0, [pc, #36]	; (440 <updaeteADDLED+0x3c>)
     41c:	7002      	strb	r2, [r0, #0]
		testColor[0].GBrightness =	0;
     41e:	7043      	strb	r3, [r0, #1]
		testColor[0].BBrightness =	0;
     420:	7083      	strb	r3, [r0, #2]
		testColor[1].RBrightness =	0;
     422:	70c3      	strb	r3, [r0, #3]
		testColor[1].GBrightness =	count;
     424:	7102      	strb	r2, [r0, #4]
		testColor[1].BBrightness =	0;
     426:	7143      	strb	r3, [r0, #5]
		testColor[2].RBrightness =	0;
     428:	7183      	strb	r3, [r0, #6]
		testColor[2].GBrightness =	0;
     42a:	71c3      	strb	r3, [r0, #7]
		testColor[2].BBrightness =	count;
     42c:	7202      	strb	r2, [r0, #8]
		count++;
     42e:	3201      	adds	r2, #1
     430:	700a      	strb	r2, [r1, #0]
		RGBPI55SetAllLED(testColor);
     432:	4b04      	ldr	r3, [pc, #16]	; (444 <updaeteADDLED+0x40>)
     434:	4798      	blx	r3
}
     436:	e7ea      	b.n	40e <updaeteADDLED+0xa>
     438:	200000ac 	.word	0x200000ac
     43c:	2000009c 	.word	0x2000009c
     440:	200000a0 	.word	0x200000a0
     444:	000020bd 	.word	0x000020bd

00000448 <initTimerCallbacks>:

void initTimerCallbacks()
{
     448:	b510      	push	{r4, lr}
	tc_register_callback(&tcTest, updateLEDMatrix,TC_CALLBACK_OVERFLOW);
     44a:	4c0c      	ldr	r4, [pc, #48]	; (47c <initTimerCallbacks+0x34>)
     44c:	2200      	movs	r2, #0
     44e:	490c      	ldr	r1, [pc, #48]	; (480 <initTimerCallbacks+0x38>)
     450:	0020      	movs	r0, r4
     452:	4b0c      	ldr	r3, [pc, #48]	; (484 <initTimerCallbacks+0x3c>)
     454:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     456:	6820      	ldr	r0, [r4, #0]
     458:	4b0b      	ldr	r3, [pc, #44]	; (488 <initTimerCallbacks+0x40>)
     45a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     45c:	4b0b      	ldr	r3, [pc, #44]	; (48c <initTimerCallbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     45e:	5c1a      	ldrb	r2, [r3, r0]
     460:	231f      	movs	r3, #31
     462:	4013      	ands	r3, r2
     464:	2201      	movs	r2, #1
     466:	0011      	movs	r1, r2
     468:	4099      	lsls	r1, r3
     46a:	4b09      	ldr	r3, [pc, #36]	; (490 <initTimerCallbacks+0x48>)
     46c:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     46e:	7e63      	ldrb	r3, [r4, #25]
     470:	2101      	movs	r1, #1
     472:	430b      	orrs	r3, r1
     474:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     476:	6823      	ldr	r3, [r4, #0]
     478:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tcTest, TC_CALLBACK_OVERFLOW);
}
     47a:	bd10      	pop	{r4, pc}
     47c:	20000198 	.word	0x20000198
     480:	000003f9 	.word	0x000003f9
     484:	000000ed 	.word	0x000000ed
     488:	000001a5 	.word	0x000001a5
     48c:	00002ce0 	.word	0x00002ce0
     490:	e000e100 	.word	0xe000e100

00000494 <initTimer>:

void initTimer()
{
     494:	b510      	push	{r4, lr}
     496:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     498:	aa01      	add	r2, sp, #4
     49a:	2300      	movs	r3, #0
     49c:	2100      	movs	r1, #0
     49e:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     4a0:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     4a2:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     4a4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     4a6:	2000      	movs	r0, #0
     4a8:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     4aa:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     4ac:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     4ae:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     4b0:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     4b2:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     4b4:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     4b6:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     4b8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     4ba:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     4bc:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     4be:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     4c0:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     4c2:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	struct tc_events config_events;
	config_tc.enable_capture_on_channel[0]		=		true;
     4c4:	3301      	adds	r3, #1
     4c6:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_16BIT; //8
	config_tc.clock_source						=		GCLK_GENERATOR_0 ;
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV64; //1024
     4c8:	23a0      	movs	r3, #160	; 0xa0
     4ca:	00db      	lsls	r3, r3, #3
     4cc:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
     4ce:	21ff      	movs	r1, #255	; 0xff
     4d0:	2329      	movs	r3, #41	; 0x29
     4d2:	54d1      	strb	r1, [r2, r3]
	tc_init(&tcTest, TC1 , &config_tc);
     4d4:	4c07      	ldr	r4, [pc, #28]	; (4f4 <initTimer+0x60>)
     4d6:	4908      	ldr	r1, [pc, #32]	; (4f8 <initTimer+0x64>)
     4d8:	0020      	movs	r0, r4
     4da:	4b08      	ldr	r3, [pc, #32]	; (4fc <initTimer+0x68>)
     4dc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     4de:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     4e0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     4e2:	b25b      	sxtb	r3, r3
     4e4:	2b00      	cmp	r3, #0
     4e6:	dbfb      	blt.n	4e0 <initTimer+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     4e8:	8813      	ldrh	r3, [r2, #0]
     4ea:	2102      	movs	r1, #2
     4ec:	430b      	orrs	r3, r1
     4ee:	8013      	strh	r3, [r2, #0]
	tc_enable(&tcTest);
}
     4f0:	b00e      	add	sp, #56	; 0x38
     4f2:	bd10      	pop	{r4, pc}
     4f4:	20000198 	.word	0x20000198
     4f8:	42001800 	.word	0x42001800
     4fc:	000001c9 	.word	0x000001c9

00000500 <testTimer>:
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(NEOPXL, &config_port_pin);
}
void testTimer()
{
     500:	b510      	push	{r4, lr}
	//Set a test pin as output
	//setTestPin();
	//inittimer
	initTimer();
     502:	4b02      	ldr	r3, [pc, #8]	; (50c <testTimer+0xc>)
     504:	4798      	blx	r3
	initTimerCallbacks();
     506:	4b02      	ldr	r3, [pc, #8]	; (510 <testTimer+0x10>)
     508:	4798      	blx	r3
	
     50a:	bd10      	pop	{r4, pc}
     50c:	00000495 	.word	0x00000495
     510:	00000449 	.word	0x00000449

00000514 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     514:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     516:	2000      	movs	r0, #0
     518:	4b08      	ldr	r3, [pc, #32]	; (53c <delay_init+0x28>)
     51a:	4798      	blx	r3
     51c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     51e:	4c08      	ldr	r4, [pc, #32]	; (540 <delay_init+0x2c>)
     520:	21fa      	movs	r1, #250	; 0xfa
     522:	0089      	lsls	r1, r1, #2
     524:	47a0      	blx	r4
     526:	4b07      	ldr	r3, [pc, #28]	; (544 <delay_init+0x30>)
     528:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     52a:	4907      	ldr	r1, [pc, #28]	; (548 <delay_init+0x34>)
     52c:	0028      	movs	r0, r5
     52e:	47a0      	blx	r4
     530:	4b06      	ldr	r3, [pc, #24]	; (54c <delay_init+0x38>)
     532:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     534:	2205      	movs	r2, #5
     536:	4b06      	ldr	r3, [pc, #24]	; (550 <delay_init+0x3c>)
     538:	601a      	str	r2, [r3, #0]
}
     53a:	bd70      	pop	{r4, r5, r6, pc}
     53c:	00002681 	.word	0x00002681
     540:	00002a65 	.word	0x00002a65
     544:	20000000 	.word	0x20000000
     548:	000f4240 	.word	0x000f4240
     54c:	20000004 	.word	0x20000004
     550:	e000e010 	.word	0xe000e010

00000554 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     554:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <delay_cycles_ms+0x24>)
     558:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     55a:	4a08      	ldr	r2, [pc, #32]	; (57c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     55c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     55e:	2180      	movs	r1, #128	; 0x80
     560:	0249      	lsls	r1, r1, #9
	while (n--) {
     562:	3801      	subs	r0, #1
     564:	d307      	bcc.n	576 <delay_cycles_ms+0x22>
	if (n > 0) {
     566:	2c00      	cmp	r4, #0
     568:	d0fb      	beq.n	562 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     56a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     56c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     56e:	6813      	ldr	r3, [r2, #0]
     570:	420b      	tst	r3, r1
     572:	d0fc      	beq.n	56e <delay_cycles_ms+0x1a>
     574:	e7f5      	b.n	562 <delay_cycles_ms+0xe>
	}
}
     576:	bd30      	pop	{r4, r5, pc}
     578:	20000000 	.word	0x20000000
     57c:	e000e010 	.word	0xe000e010

00000580 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     580:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     582:	2200      	movs	r2, #0
     584:	2300      	movs	r3, #0
     586:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     588:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     58a:	2100      	movs	r1, #0
     58c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     58e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     590:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     592:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     594:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     596:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     598:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     59a:	24c0      	movs	r4, #192	; 0xc0
     59c:	0164      	lsls	r4, r4, #5
     59e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     5a0:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     5a2:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     5a4:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     5a6:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     5a8:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     5aa:	242a      	movs	r4, #42	; 0x2a
     5ac:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     5ae:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     5b0:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     5b2:	3c06      	subs	r4, #6
     5b4:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     5b6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     5b8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     5ba:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     5bc:	232b      	movs	r3, #43	; 0x2b
     5be:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     5c0:	3301      	adds	r3, #1
     5c2:	54c1      	strb	r1, [r0, r3]
}
     5c4:	bd10      	pop	{r4, pc}
	...

000005c8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	46d6      	mov	lr, sl
     5cc:	464f      	mov	r7, r9
     5ce:	4646      	mov	r6, r8
     5d0:	b5c0      	push	{r6, r7, lr}
     5d2:	b096      	sub	sp, #88	; 0x58
     5d4:	0007      	movs	r7, r0
     5d6:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     5d8:	6001      	str	r1, [r0, #0]
     5da:	4ac6      	ldr	r2, [pc, #792]	; (8f4 <adc_init+0x32c>)
     5dc:	6a10      	ldr	r0, [r2, #32]
     5de:	2380      	movs	r3, #128	; 0x80
     5e0:	005b      	lsls	r3, r3, #1
     5e2:	4303      	orrs	r3, r0
     5e4:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     5e6:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     5e8:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     5ea:	07db      	lsls	r3, r3, #31
     5ec:	d505      	bpl.n	5fa <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     5ee:	b016      	add	sp, #88	; 0x58
     5f0:	bc1c      	pop	{r2, r3, r4}
     5f2:	4690      	mov	r8, r2
     5f4:	4699      	mov	r9, r3
     5f6:	46a2      	mov	sl, r4
     5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     5fa:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     5fc:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     5fe:	079b      	lsls	r3, r3, #30
     600:	d4f5      	bmi.n	5ee <adc_init+0x26>
	module_inst->reference = config->reference;
     602:	7873      	ldrb	r3, [r6, #1]
     604:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     606:	2b00      	cmp	r3, #0
     608:	d104      	bne.n	614 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     60a:	4abb      	ldr	r2, [pc, #748]	; (8f8 <adc_init+0x330>)
     60c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     60e:	2104      	movs	r1, #4
     610:	430b      	orrs	r3, r1
     612:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     614:	2300      	movs	r3, #0
     616:	60bb      	str	r3, [r7, #8]
     618:	60fb      	str	r3, [r7, #12]
     61a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     61c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     61e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     620:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     622:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     624:	4bb5      	ldr	r3, [pc, #724]	; (8fc <adc_init+0x334>)
     626:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     628:	232a      	movs	r3, #42	; 0x2a
     62a:	5cf3      	ldrb	r3, [r6, r3]
     62c:	2b00      	cmp	r3, #0
     62e:	d105      	bne.n	63c <adc_init+0x74>
     630:	7d33      	ldrb	r3, [r6, #20]
     632:	2b00      	cmp	r3, #0
     634:	d102      	bne.n	63c <adc_init+0x74>
		module_inst->software_trigger = true;
     636:	3301      	adds	r3, #1
     638:	777b      	strb	r3, [r7, #29]
     63a:	e001      	b.n	640 <adc_init+0x78>
		module_inst->software_trigger = false;
     63c:	2300      	movs	r3, #0
     63e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     640:	683b      	ldr	r3, [r7, #0]
     642:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     644:	7833      	ldrb	r3, [r6, #0]
     646:	466a      	mov	r2, sp
     648:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     64a:	4669      	mov	r1, sp
     64c:	2013      	movs	r0, #19
     64e:	4bac      	ldr	r3, [pc, #688]	; (900 <adc_init+0x338>)
     650:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     652:	2013      	movs	r0, #19
     654:	4bab      	ldr	r3, [pc, #684]	; (904 <adc_init+0x33c>)
     656:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     658:	232c      	movs	r3, #44	; 0x2c
     65a:	5cf2      	ldrb	r2, [r6, r3]
     65c:	2a00      	cmp	r2, #0
     65e:	d054      	beq.n	70a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     660:	3b01      	subs	r3, #1
     662:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     664:	7b33      	ldrb	r3, [r6, #12]
     666:	18eb      	adds	r3, r5, r3
     668:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     66a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     66c:	b2c9      	uxtb	r1, r1
     66e:	428b      	cmp	r3, r1
     670:	d221      	bcs.n	6b6 <adc_init+0xee>
     672:	1952      	adds	r2, r2, r5
     674:	b2d3      	uxtb	r3, r2
     676:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     678:	4ba3      	ldr	r3, [pc, #652]	; (908 <adc_init+0x340>)
     67a:	469a      	mov	sl, r3
     67c:	e003      	b.n	686 <adc_init+0xbe>
			offset++;
     67e:	3501      	adds	r5, #1
     680:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     682:	454d      	cmp	r5, r9
     684:	d017      	beq.n	6b6 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     686:	240f      	movs	r4, #15
     688:	402c      	ands	r4, r5
     68a:	7b33      	ldrb	r3, [r6, #12]
     68c:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     68e:	2250      	movs	r2, #80	; 0x50
     690:	499e      	ldr	r1, [pc, #632]	; (90c <adc_init+0x344>)
     692:	a802      	add	r0, sp, #8
     694:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     696:	2c09      	cmp	r4, #9
     698:	d8f1      	bhi.n	67e <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     69a:	00a4      	lsls	r4, r4, #2
     69c:	ab02      	add	r3, sp, #8
     69e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6a0:	a901      	add	r1, sp, #4
     6a2:	2300      	movs	r3, #0
     6a4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6a6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6a8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6aa:	3301      	adds	r3, #1
     6ac:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6ae:	b2c0      	uxtb	r0, r0
     6b0:	4b97      	ldr	r3, [pc, #604]	; (910 <adc_init+0x348>)
     6b2:	4798      	blx	r3
     6b4:	e7e3      	b.n	67e <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     6b6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     6b8:	2250      	movs	r2, #80	; 0x50
     6ba:	4994      	ldr	r1, [pc, #592]	; (90c <adc_init+0x344>)
     6bc:	a802      	add	r0, sp, #8
     6be:	4b92      	ldr	r3, [pc, #584]	; (908 <adc_init+0x340>)
     6c0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     6c2:	2c09      	cmp	r4, #9
     6c4:	d913      	bls.n	6ee <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     6c6:	7d73      	ldrb	r3, [r6, #21]
     6c8:	009b      	lsls	r3, r3, #2
     6ca:	b2db      	uxtb	r3, r3
     6cc:	4642      	mov	r2, r8
     6ce:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     6d0:	7db3      	ldrb	r3, [r6, #22]
     6d2:	01db      	lsls	r3, r3, #7
     6d4:	7872      	ldrb	r2, [r6, #1]
     6d6:	4313      	orrs	r3, r2
     6d8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     6da:	4642      	mov	r2, r8
     6dc:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     6de:	7933      	ldrb	r3, [r6, #4]
     6e0:	2b34      	cmp	r3, #52	; 0x34
     6e2:	d900      	bls.n	6e6 <adc_init+0x11e>
     6e4:	e17b      	b.n	9de <adc_init+0x416>
     6e6:	009b      	lsls	r3, r3, #2
     6e8:	4a8a      	ldr	r2, [pc, #552]	; (914 <adc_init+0x34c>)
     6ea:	58d3      	ldr	r3, [r2, r3]
     6ec:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     6ee:	00a4      	lsls	r4, r4, #2
     6f0:	ab02      	add	r3, sp, #8
     6f2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6f4:	a901      	add	r1, sp, #4
     6f6:	2300      	movs	r3, #0
     6f8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6fa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6fc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6fe:	3301      	adds	r3, #1
     700:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     702:	b2c0      	uxtb	r0, r0
     704:	4b82      	ldr	r3, [pc, #520]	; (910 <adc_init+0x348>)
     706:	4798      	blx	r3
     708:	e7dd      	b.n	6c6 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     70a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     70c:	2250      	movs	r2, #80	; 0x50
     70e:	497f      	ldr	r1, [pc, #508]	; (90c <adc_init+0x344>)
     710:	a802      	add	r0, sp, #8
     712:	4b7d      	ldr	r3, [pc, #500]	; (908 <adc_init+0x340>)
     714:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     716:	2c09      	cmp	r4, #9
     718:	d915      	bls.n	746 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     71a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     71c:	2250      	movs	r2, #80	; 0x50
     71e:	497b      	ldr	r1, [pc, #492]	; (90c <adc_init+0x344>)
     720:	a802      	add	r0, sp, #8
     722:	4b79      	ldr	r3, [pc, #484]	; (908 <adc_init+0x340>)
     724:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     726:	2c09      	cmp	r4, #9
     728:	d8cd      	bhi.n	6c6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     72a:	00a4      	lsls	r4, r4, #2
     72c:	ab02      	add	r3, sp, #8
     72e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     730:	a901      	add	r1, sp, #4
     732:	2300      	movs	r3, #0
     734:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     736:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     738:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     73a:	3301      	adds	r3, #1
     73c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     73e:	b2c0      	uxtb	r0, r0
     740:	4b73      	ldr	r3, [pc, #460]	; (910 <adc_init+0x348>)
     742:	4798      	blx	r3
     744:	e7bf      	b.n	6c6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     746:	00a4      	lsls	r4, r4, #2
     748:	ab02      	add	r3, sp, #8
     74a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     74c:	a901      	add	r1, sp, #4
     74e:	2300      	movs	r3, #0
     750:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     752:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     754:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     756:	3301      	adds	r3, #1
     758:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     75a:	b2c0      	uxtb	r0, r0
     75c:	4b6c      	ldr	r3, [pc, #432]	; (910 <adc_init+0x348>)
     75e:	4798      	blx	r3
     760:	e7db      	b.n	71a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     762:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     764:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     766:	2102      	movs	r1, #2
     768:	e01a      	b.n	7a0 <adc_init+0x1d8>
		adjres = config->divide_result;
     76a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     76c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     76e:	2410      	movs	r4, #16
     770:	e016      	b.n	7a0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     772:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     774:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     776:	2101      	movs	r1, #1
     778:	e012      	b.n	7a0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     77a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     77c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     77e:	2100      	movs	r1, #0
     780:	e00e      	b.n	7a0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     782:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     784:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     786:	2100      	movs	r1, #0
     788:	e00a      	b.n	7a0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     78a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     78c:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     78e:	2100      	movs	r1, #0
     790:	e006      	b.n	7a0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     792:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     794:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     796:	2100      	movs	r1, #0
     798:	e002      	b.n	7a0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     79a:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     79c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     79e:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     7a0:	0109      	lsls	r1, r1, #4
     7a2:	2270      	movs	r2, #112	; 0x70
     7a4:	400a      	ands	r2, r1
     7a6:	4313      	orrs	r3, r2
     7a8:	4642      	mov	r2, r8
     7aa:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     7ac:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     7ae:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     7b0:	2b3f      	cmp	r3, #63	; 0x3f
     7b2:	d900      	bls.n	7b6 <adc_init+0x1ee>
     7b4:	e71b      	b.n	5ee <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     7b6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     7b8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7ba:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7bc:	b25b      	sxtb	r3, r3
     7be:	2b00      	cmp	r3, #0
     7c0:	dbfb      	blt.n	7ba <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     7c2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     7c4:	8872      	ldrh	r2, [r6, #2]
     7c6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     7c8:	2224      	movs	r2, #36	; 0x24
     7ca:	5cb2      	ldrb	r2, [r6, r2]
     7cc:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     7ce:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     7d0:	7d32      	ldrb	r2, [r6, #20]
     7d2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     7d4:	4313      	orrs	r3, r2
     7d6:	7cb2      	ldrb	r2, [r6, #18]
     7d8:	0052      	lsls	r2, r2, #1
     7da:	4313      	orrs	r3, r2
     7dc:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     7de:	4642      	mov	r2, r8
     7e0:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     7e2:	7e33      	ldrb	r3, [r6, #24]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d020      	beq.n	82a <adc_init+0x262>
		switch (resolution) {
     7e8:	2c10      	cmp	r4, #16
     7ea:	d100      	bne.n	7ee <adc_init+0x226>
     7ec:	e0d9      	b.n	9a2 <adc_init+0x3da>
     7ee:	d800      	bhi.n	7f2 <adc_init+0x22a>
     7f0:	e098      	b.n	924 <adc_init+0x35c>
     7f2:	2c20      	cmp	r4, #32
     7f4:	d100      	bne.n	7f8 <adc_init+0x230>
     7f6:	e0b6      	b.n	966 <adc_init+0x39e>
     7f8:	2c30      	cmp	r4, #48	; 0x30
     7fa:	d116      	bne.n	82a <adc_init+0x262>
			if (config->differential_mode &&
     7fc:	7cf2      	ldrb	r2, [r6, #19]
     7fe:	2a00      	cmp	r2, #0
     800:	d00a      	beq.n	818 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     802:	69f2      	ldr	r2, [r6, #28]
     804:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     806:	2017      	movs	r0, #23
			if (config->differential_mode &&
     808:	2aff      	cmp	r2, #255	; 0xff
     80a:	d900      	bls.n	80e <adc_init+0x246>
     80c:	e6ef      	b.n	5ee <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     80e:	6a32      	ldr	r2, [r6, #32]
     810:	3280      	adds	r2, #128	; 0x80
     812:	2aff      	cmp	r2, #255	; 0xff
     814:	d900      	bls.n	818 <adc_init+0x250>
     816:	e6ea      	b.n	5ee <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     818:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     81a:	69f2      	ldr	r2, [r6, #28]
     81c:	2aff      	cmp	r2, #255	; 0xff
     81e:	dd00      	ble.n	822 <adc_init+0x25a>
     820:	e6e5      	b.n	5ee <adc_init+0x26>
     822:	6a32      	ldr	r2, [r6, #32]
     824:	2aff      	cmp	r2, #255	; 0xff
     826:	dd00      	ble.n	82a <adc_init+0x262>
     828:	e6e1      	b.n	5ee <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     82a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     82c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     82e:	b252      	sxtb	r2, r2
     830:	2a00      	cmp	r2, #0
     832:	dbfb      	blt.n	82c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     834:	4642      	mov	r2, r8
     836:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     838:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     83a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     83c:	b25b      	sxtb	r3, r3
     83e:	2b00      	cmp	r3, #0
     840:	dbfb      	blt.n	83a <adc_init+0x272>
	adc_module->WINLT.reg =
     842:	8bb3      	ldrh	r3, [r6, #28]
     844:	4642      	mov	r2, r8
     846:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     848:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     84a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     84c:	b25b      	sxtb	r3, r3
     84e:	2b00      	cmp	r3, #0
     850:	dbfb      	blt.n	84a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     852:	8c33      	ldrh	r3, [r6, #32]
     854:	4642      	mov	r2, r8
     856:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     858:	232c      	movs	r3, #44	; 0x2c
     85a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     85c:	2b00      	cmp	r3, #0
     85e:	d005      	beq.n	86c <adc_init+0x2a4>
		inputs_to_scan--;
     860:	3b01      	subs	r3, #1
     862:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     864:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     866:	2b0f      	cmp	r3, #15
     868:	d900      	bls.n	86c <adc_init+0x2a4>
     86a:	e6c0      	b.n	5ee <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     86c:	222b      	movs	r2, #43	; 0x2b
     86e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     870:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     872:	290f      	cmp	r1, #15
     874:	d900      	bls.n	878 <adc_init+0x2b0>
     876:	e6ba      	b.n	5ee <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     878:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     87a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     87c:	b252      	sxtb	r2, r2
     87e:	2a00      	cmp	r2, #0
     880:	dbfb      	blt.n	87a <adc_init+0x2b2>
			config->negative_input |
     882:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     884:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     886:	4302      	orrs	r2, r0
     888:	68b0      	ldr	r0, [r6, #8]
     88a:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     88c:	0509      	lsls	r1, r1, #20
			config->negative_input |
     88e:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     890:	041b      	lsls	r3, r3, #16
			config->negative_input |
     892:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     894:	4642      	mov	r2, r8
     896:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     898:	232a      	movs	r3, #42	; 0x2a
     89a:	5cf3      	ldrb	r3, [r6, r3]
     89c:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     89e:	230f      	movs	r3, #15
     8a0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     8a2:	3315      	adds	r3, #21
     8a4:	5cf3      	ldrb	r3, [r6, r3]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d012      	beq.n	8d0 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     8aa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     8ac:	4a1a      	ldr	r2, [pc, #104]	; (918 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     8ae:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     8b0:	4293      	cmp	r3, r2
     8b2:	d900      	bls.n	8b6 <adc_init+0x2ee>
     8b4:	e69b      	b.n	5ee <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     8b6:	4642      	mov	r2, r8
     8b8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     8ba:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     8bc:	2380      	movs	r3, #128	; 0x80
     8be:	011b      	lsls	r3, r3, #4
     8c0:	18d3      	adds	r3, r2, r3
     8c2:	4915      	ldr	r1, [pc, #84]	; (918 <adc_init+0x350>)
     8c4:	b29b      	uxth	r3, r3
     8c6:	428b      	cmp	r3, r1
     8c8:	d900      	bls.n	8cc <adc_init+0x304>
     8ca:	e690      	b.n	5ee <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     8cc:	4643      	mov	r3, r8
     8ce:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     8d0:	4b12      	ldr	r3, [pc, #72]	; (91c <adc_init+0x354>)
     8d2:	681b      	ldr	r3, [r3, #0]
     8d4:	015b      	lsls	r3, r3, #5
     8d6:	22e0      	movs	r2, #224	; 0xe0
     8d8:	00d2      	lsls	r2, r2, #3
     8da:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     8dc:	4a10      	ldr	r2, [pc, #64]	; (920 <adc_init+0x358>)
     8de:	6851      	ldr	r1, [r2, #4]
     8e0:	0149      	lsls	r1, r1, #5
     8e2:	6812      	ldr	r2, [r2, #0]
     8e4:	0ed2      	lsrs	r2, r2, #27
     8e6:	430a      	orrs	r2, r1
     8e8:	b2d2      	uxtb	r2, r2
			) |
     8ea:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     8ec:	4642      	mov	r2, r8
     8ee:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     8f0:	2000      	movs	r0, #0
     8f2:	e67c      	b.n	5ee <adc_init+0x26>
     8f4:	40000400 	.word	0x40000400
     8f8:	40000800 	.word	0x40000800
     8fc:	200001b4 	.word	0x200001b4
     900:	00002799 	.word	0x00002799
     904:	0000270d 	.word	0x0000270d
     908:	00002bd9 	.word	0x00002bd9
     90c:	00002db8 	.word	0x00002db8
     910:	00002891 	.word	0x00002891
     914:	00002ce4 	.word	0x00002ce4
     918:	00000fff 	.word	0x00000fff
     91c:	00806024 	.word	0x00806024
     920:	00806020 	.word	0x00806020
		switch (resolution) {
     924:	2c00      	cmp	r4, #0
     926:	d000      	beq.n	92a <adc_init+0x362>
     928:	e77f      	b.n	82a <adc_init+0x262>
			if (config->differential_mode &&
     92a:	7cf2      	ldrb	r2, [r6, #19]
     92c:	2a00      	cmp	r2, #0
     92e:	d00f      	beq.n	950 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     930:	69f2      	ldr	r2, [r6, #28]
     932:	2180      	movs	r1, #128	; 0x80
     934:	0109      	lsls	r1, r1, #4
     936:	468c      	mov	ip, r1
     938:	4462      	add	r2, ip
			if (config->differential_mode &&
     93a:	492a      	ldr	r1, [pc, #168]	; (9e4 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     93c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     93e:	428a      	cmp	r2, r1
     940:	d900      	bls.n	944 <adc_init+0x37c>
     942:	e654      	b.n	5ee <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     944:	6a32      	ldr	r2, [r6, #32]
     946:	4462      	add	r2, ip
     948:	4926      	ldr	r1, [pc, #152]	; (9e4 <adc_init+0x41c>)
     94a:	428a      	cmp	r2, r1
     94c:	d900      	bls.n	950 <adc_init+0x388>
     94e:	e64e      	b.n	5ee <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     950:	4a24      	ldr	r2, [pc, #144]	; (9e4 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     952:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     954:	69f1      	ldr	r1, [r6, #28]
     956:	4291      	cmp	r1, r2
     958:	dd00      	ble.n	95c <adc_init+0x394>
     95a:	e648      	b.n	5ee <adc_init+0x26>
     95c:	6a31      	ldr	r1, [r6, #32]
     95e:	4291      	cmp	r1, r2
     960:	dd00      	ble.n	964 <adc_init+0x39c>
     962:	e644      	b.n	5ee <adc_init+0x26>
     964:	e761      	b.n	82a <adc_init+0x262>
			if (config->differential_mode &&
     966:	7cf2      	ldrb	r2, [r6, #19]
     968:	2a00      	cmp	r2, #0
     96a:	d00f      	beq.n	98c <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     96c:	69f2      	ldr	r2, [r6, #28]
     96e:	2180      	movs	r1, #128	; 0x80
     970:	0089      	lsls	r1, r1, #2
     972:	468c      	mov	ip, r1
     974:	4462      	add	r2, ip
			if (config->differential_mode &&
     976:	491c      	ldr	r1, [pc, #112]	; (9e8 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     978:	2017      	movs	r0, #23
			if (config->differential_mode &&
     97a:	428a      	cmp	r2, r1
     97c:	d900      	bls.n	980 <adc_init+0x3b8>
     97e:	e636      	b.n	5ee <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     980:	6a32      	ldr	r2, [r6, #32]
     982:	4462      	add	r2, ip
     984:	4918      	ldr	r1, [pc, #96]	; (9e8 <adc_init+0x420>)
     986:	428a      	cmp	r2, r1
     988:	d900      	bls.n	98c <adc_init+0x3c4>
     98a:	e630      	b.n	5ee <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     98c:	4a16      	ldr	r2, [pc, #88]	; (9e8 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     98e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     990:	69f1      	ldr	r1, [r6, #28]
     992:	4291      	cmp	r1, r2
     994:	dd00      	ble.n	998 <adc_init+0x3d0>
     996:	e62a      	b.n	5ee <adc_init+0x26>
     998:	6a31      	ldr	r1, [r6, #32]
     99a:	4291      	cmp	r1, r2
     99c:	dd00      	ble.n	9a0 <adc_init+0x3d8>
     99e:	e626      	b.n	5ee <adc_init+0x26>
     9a0:	e743      	b.n	82a <adc_init+0x262>
			if (config->differential_mode &&
     9a2:	7cf2      	ldrb	r2, [r6, #19]
     9a4:	2a00      	cmp	r2, #0
     9a6:	d00f      	beq.n	9c8 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     9a8:	69f2      	ldr	r2, [r6, #28]
     9aa:	2180      	movs	r1, #128	; 0x80
     9ac:	0209      	lsls	r1, r1, #8
     9ae:	468c      	mov	ip, r1
     9b0:	4462      	add	r2, ip
			if (config->differential_mode &&
     9b2:	490e      	ldr	r1, [pc, #56]	; (9ec <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     9b4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9b6:	428a      	cmp	r2, r1
     9b8:	d900      	bls.n	9bc <adc_init+0x3f4>
     9ba:	e618      	b.n	5ee <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     9bc:	6a32      	ldr	r2, [r6, #32]
     9be:	4462      	add	r2, ip
     9c0:	490a      	ldr	r1, [pc, #40]	; (9ec <adc_init+0x424>)
     9c2:	428a      	cmp	r2, r1
     9c4:	d900      	bls.n	9c8 <adc_init+0x400>
     9c6:	e612      	b.n	5ee <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     9c8:	4a08      	ldr	r2, [pc, #32]	; (9ec <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     9ca:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     9cc:	69f1      	ldr	r1, [r6, #28]
     9ce:	4291      	cmp	r1, r2
     9d0:	dd00      	ble.n	9d4 <adc_init+0x40c>
     9d2:	e60c      	b.n	5ee <adc_init+0x26>
     9d4:	6a31      	ldr	r1, [r6, #32]
     9d6:	4291      	cmp	r1, r2
     9d8:	dd00      	ble.n	9dc <adc_init+0x414>
     9da:	e608      	b.n	5ee <adc_init+0x26>
     9dc:	e725      	b.n	82a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     9de:	2017      	movs	r0, #23
     9e0:	e605      	b.n	5ee <adc_init+0x26>
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	00000fff 	.word	0x00000fff
     9e8:	000003ff 	.word	0x000003ff
     9ec:	0000ffff 	.word	0x0000ffff

000009f0 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     9f0:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     9f2:	4b2f      	ldr	r3, [pc, #188]	; (ab0 <ADC_Handler+0xc0>)
     9f4:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     9f6:	682b      	ldr	r3, [r5, #0]
     9f8:	7e1a      	ldrb	r2, [r3, #24]
     9fa:	7ddc      	ldrb	r4, [r3, #23]
     9fc:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     9fe:	07e2      	lsls	r2, r4, #31
     a00:	d416      	bmi.n	a30 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     a02:	0763      	lsls	r3, r4, #29
     a04:	d508      	bpl.n	a18 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     a06:	2304      	movs	r3, #4
     a08:	682a      	ldr	r2, [r5, #0]
     a0a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     a0c:	7eeb      	ldrb	r3, [r5, #27]
     a0e:	079b      	lsls	r3, r3, #30
     a10:	d502      	bpl.n	a18 <ADC_Handler+0x28>
     a12:	7eab      	ldrb	r3, [r5, #26]
     a14:	079b      	lsls	r3, r3, #30
     a16:	d442      	bmi.n	a9e <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     a18:	07a3      	lsls	r3, r4, #30
     a1a:	d508      	bpl.n	a2e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     a1c:	2302      	movs	r3, #2
     a1e:	682a      	ldr	r2, [r5, #0]
     a20:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     a22:	7eeb      	ldrb	r3, [r5, #27]
     a24:	075b      	lsls	r3, r3, #29
     a26:	d502      	bpl.n	a2e <ADC_Handler+0x3e>
     a28:	7eab      	ldrb	r3, [r5, #26]
     a2a:	075b      	lsls	r3, r3, #29
     a2c:	d43b      	bmi.n	aa6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     a2e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     a30:	2201      	movs	r2, #1
     a32:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     a34:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a36:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     a38:	b25b      	sxtb	r3, r3
     a3a:	2b00      	cmp	r3, #0
     a3c:	dbfb      	blt.n	a36 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     a3e:	6969      	ldr	r1, [r5, #20]
     a40:	1c8b      	adds	r3, r1, #2
     a42:	616b      	str	r3, [r5, #20]
     a44:	8b53      	ldrh	r3, [r2, #26]
     a46:	b29b      	uxth	r3, r3
     a48:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     a4a:	8b2b      	ldrh	r3, [r5, #24]
     a4c:	3b01      	subs	r3, #1
     a4e:	b29b      	uxth	r3, r3
     a50:	832b      	strh	r3, [r5, #24]
     a52:	2b00      	cmp	r3, #0
     a54:	d011      	beq.n	a7a <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     a56:	7f6b      	ldrb	r3, [r5, #29]
     a58:	2b00      	cmp	r3, #0
     a5a:	d0d2      	beq.n	a02 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a5c:	682a      	ldr	r2, [r5, #0]
     a5e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     a60:	b25b      	sxtb	r3, r3
     a62:	2b00      	cmp	r3, #0
     a64:	dbfb      	blt.n	a5e <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     a66:	7b13      	ldrb	r3, [r2, #12]
     a68:	2102      	movs	r1, #2
     a6a:	430b      	orrs	r3, r1
     a6c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     a6e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a70:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     a72:	b25b      	sxtb	r3, r3
     a74:	2b00      	cmp	r3, #0
     a76:	dbfb      	blt.n	a70 <ADC_Handler+0x80>
     a78:	e7c3      	b.n	a02 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     a7a:	2301      	movs	r3, #1
     a7c:	682a      	ldr	r2, [r5, #0]
     a7e:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     a80:	7f2b      	ldrb	r3, [r5, #28]
     a82:	2b05      	cmp	r3, #5
     a84:	d1bd      	bne.n	a02 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     a86:	2300      	movs	r3, #0
     a88:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     a8a:	7eeb      	ldrb	r3, [r5, #27]
     a8c:	07db      	lsls	r3, r3, #31
     a8e:	d5b8      	bpl.n	a02 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     a90:	7eab      	ldrb	r3, [r5, #26]
     a92:	07db      	lsls	r3, r3, #31
     a94:	d5b5      	bpl.n	a02 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     a96:	0028      	movs	r0, r5
     a98:	68ab      	ldr	r3, [r5, #8]
     a9a:	4798      	blx	r3
     a9c:	e7b1      	b.n	a02 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     a9e:	0028      	movs	r0, r5
     aa0:	68eb      	ldr	r3, [r5, #12]
     aa2:	4798      	blx	r3
     aa4:	e7b8      	b.n	a18 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     aa6:	692b      	ldr	r3, [r5, #16]
     aa8:	0028      	movs	r0, r5
     aaa:	4798      	blx	r3
}
     aac:	e7bf      	b.n	a2e <ADC_Handler+0x3e>
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	200001b4 	.word	0x200001b4

00000ab4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     ab4:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
     ab6:	4b26      	ldr	r3, [pc, #152]	; (b50 <DMAC_Handler+0x9c>)
     ab8:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     aba:	4926      	ldr	r1, [pc, #152]	; (b54 <DMAC_Handler+0xa0>)
     abc:	8c0b      	ldrh	r3, [r1, #32]
     abe:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     ac0:	4013      	ands	r3, r2
     ac2:	009b      	lsls	r3, r3, #2
     ac4:	4824      	ldr	r0, [pc, #144]	; (b58 <DMAC_Handler+0xa4>)
     ac6:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     ac8:	7803      	ldrb	r3, [r0, #0]
     aca:	401a      	ands	r2, r3
     acc:	233f      	movs	r3, #63	; 0x3f
     ace:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     ad0:	330f      	adds	r3, #15
     ad2:	5cca      	ldrb	r2, [r1, r3]
     ad4:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     ad6:	7803      	ldrb	r3, [r0, #0]
     ad8:	011b      	lsls	r3, r3, #4
     ada:	4920      	ldr	r1, [pc, #128]	; (b5c <DMAC_Handler+0xa8>)
     adc:	18c9      	adds	r1, r1, r3
     ade:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     ae0:	4c1f      	ldr	r4, [pc, #124]	; (b60 <DMAC_Handler+0xac>)
     ae2:	18e3      	adds	r3, r4, r3
     ae4:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     ae6:	1acb      	subs	r3, r1, r3
     ae8:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     aea:	07d3      	lsls	r3, r2, #31
     aec:	d50f      	bpl.n	b0e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     aee:	2101      	movs	r1, #1
     af0:	234e      	movs	r3, #78	; 0x4e
     af2:	4a18      	ldr	r2, [pc, #96]	; (b54 <DMAC_Handler+0xa0>)
     af4:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     af6:	3b3e      	subs	r3, #62	; 0x3e
     af8:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     afa:	7c03      	ldrb	r3, [r0, #16]
     afc:	07db      	lsls	r3, r3, #31
     afe:	d503      	bpl.n	b08 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     b00:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     b02:	2b00      	cmp	r3, #0
     b04:	d000      	beq.n	b08 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     b06:	4798      	blx	r3
	cpu_irq_leave_critical();
     b08:	4b16      	ldr	r3, [pc, #88]	; (b64 <DMAC_Handler+0xb0>)
     b0a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     b0c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     b0e:	0793      	lsls	r3, r2, #30
     b10:	d50d      	bpl.n	b2e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     b12:	2102      	movs	r1, #2
     b14:	234e      	movs	r3, #78	; 0x4e
     b16:	4a0f      	ldr	r2, [pc, #60]	; (b54 <DMAC_Handler+0xa0>)
     b18:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     b1a:	2300      	movs	r3, #0
     b1c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     b1e:	7c03      	ldrb	r3, [r0, #16]
     b20:	079b      	lsls	r3, r3, #30
     b22:	d5f1      	bpl.n	b08 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     b24:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     b26:	2b00      	cmp	r3, #0
     b28:	d0ee      	beq.n	b08 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     b2a:	4798      	blx	r3
     b2c:	e7ec      	b.n	b08 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     b2e:	0753      	lsls	r3, r2, #29
     b30:	d5ea      	bpl.n	b08 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     b32:	2104      	movs	r1, #4
     b34:	234e      	movs	r3, #78	; 0x4e
     b36:	4a07      	ldr	r2, [pc, #28]	; (b54 <DMAC_Handler+0xa0>)
     b38:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     b3a:	3b48      	subs	r3, #72	; 0x48
     b3c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     b3e:	7c03      	ldrb	r3, [r0, #16]
     b40:	075b      	lsls	r3, r3, #29
     b42:	d5e1      	bpl.n	b08 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     b44:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     b46:	2b00      	cmp	r3, #0
     b48:	d0de      	beq.n	b08 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     b4a:	4798      	blx	r3
     b4c:	e7dc      	b.n	b08 <DMAC_Handler+0x54>
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	00002101 	.word	0x00002101
     b54:	41004800 	.word	0x41004800
     b58:	200000b0 	.word	0x200000b0
     b5c:	200001c0 	.word	0x200001c0
     b60:	200000d0 	.word	0x200000d0
     b64:	00002141 	.word	0x00002141

00000b68 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     b68:	2300      	movs	r3, #0
     b6a:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     b6c:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTON_TRANSACTION;
     b6e:	2203      	movs	r2, #3
     b70:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     b72:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     b74:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     b76:	4770      	bx	lr

00000b78 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b7a:	46ce      	mov	lr, r9
     b7c:	4647      	mov	r7, r8
     b7e:	b580      	push	{r7, lr}
     b80:	0005      	movs	r5, r0
     b82:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     b84:	4b45      	ldr	r3, [pc, #276]	; (c9c <dma_allocate+0x124>)
     b86:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     b88:	4b45      	ldr	r3, [pc, #276]	; (ca0 <dma_allocate+0x128>)
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d118      	bne.n	bc2 <dma_allocate+0x4a>
	PM->AHBMASK.reg |= ahb_mask;
     b90:	4b44      	ldr	r3, [pc, #272]	; (ca4 <dma_allocate+0x12c>)
     b92:	695a      	ldr	r2, [r3, #20]
     b94:	2120      	movs	r1, #32
     b96:	430a      	orrs	r2, r1
     b98:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
     b9a:	69da      	ldr	r2, [r3, #28]
     b9c:	3910      	subs	r1, #16
     b9e:	430a      	orrs	r2, r1
     ba0:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     ba2:	4b41      	ldr	r3, [pc, #260]	; (ca8 <dma_allocate+0x130>)
     ba4:	881a      	ldrh	r2, [r3, #0]
     ba6:	390e      	subs	r1, #14
     ba8:	438a      	bics	r2, r1
     baa:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     bac:	2201      	movs	r2, #1
     bae:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     bb0:	4a3e      	ldr	r2, [pc, #248]	; (cac <dma_allocate+0x134>)
     bb2:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     bb4:	4a3e      	ldr	r2, [pc, #248]	; (cb0 <dma_allocate+0x138>)
     bb6:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     bb8:	4a3e      	ldr	r2, [pc, #248]	; (cb4 <dma_allocate+0x13c>)
     bba:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     bbc:	4b38      	ldr	r3, [pc, #224]	; (ca0 <dma_allocate+0x128>)
     bbe:	2201      	movs	r2, #1
     bc0:	701a      	strb	r2, [r3, #0]
     bc2:	4b36      	ldr	r3, [pc, #216]	; (c9c <dma_allocate+0x124>)
     bc4:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     bc6:	4b36      	ldr	r3, [pc, #216]	; (ca0 <dma_allocate+0x128>)
     bc8:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     bca:	07da      	lsls	r2, r3, #31
     bcc:	d50f      	bpl.n	bee <dma_allocate+0x76>
		tmp = tmp >> 1;
     bce:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     bd0:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     bd2:	2201      	movs	r2, #1
     bd4:	421a      	tst	r2, r3
     bd6:	d00b      	beq.n	bf0 <dma_allocate+0x78>
		tmp = tmp >> 1;
     bd8:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     bda:	3401      	adds	r4, #1
     bdc:	b2e4      	uxtb	r4, r4
     bde:	2c05      	cmp	r4, #5
     be0:	d1f8      	bne.n	bd4 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     be2:	4b35      	ldr	r3, [pc, #212]	; (cb8 <dma_allocate+0x140>)
     be4:	4798      	blx	r3
     be6:	4b34      	ldr	r3, [pc, #208]	; (cb8 <dma_allocate+0x140>)
     be8:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     bea:	2014      	movs	r0, #20
     bec:	e051      	b.n	c92 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     bee:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     bf0:	4a2b      	ldr	r2, [pc, #172]	; (ca0 <dma_allocate+0x128>)
     bf2:	6851      	ldr	r1, [r2, #4]
     bf4:	2301      	movs	r3, #1
     bf6:	40a3      	lsls	r3, r4
     bf8:	430b      	orrs	r3, r1
     bfa:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     bfc:	7a13      	ldrb	r3, [r2, #8]
     bfe:	3b01      	subs	r3, #1
     c00:	7213      	strb	r3, [r2, #8]
     c02:	4b2d      	ldr	r3, [pc, #180]	; (cb8 <dma_allocate+0x140>)
     c04:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     c06:	2cff      	cmp	r4, #255	; 0xff
     c08:	d0ed      	beq.n	be6 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     c0a:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     c0c:	2307      	movs	r3, #7
     c0e:	4698      	mov	r8, r3
     c10:	401c      	ands	r4, r3
     c12:	4f25      	ldr	r7, [pc, #148]	; (ca8 <dma_allocate+0x130>)
     c14:	3338      	adds	r3, #56	; 0x38
     c16:	4699      	mov	r9, r3
     c18:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     c1a:	3301      	adds	r3, #1
     c1c:	5cfa      	ldrb	r2, [r7, r3]
     c1e:	2102      	movs	r1, #2
     c20:	438a      	bics	r2, r1
     c22:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     c24:	2401      	movs	r4, #1
     c26:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     c28:	4b1c      	ldr	r3, [pc, #112]	; (c9c <dma_allocate+0x124>)
     c2a:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     c2c:	782b      	ldrb	r3, [r5, #0]
     c2e:	4642      	mov	r2, r8
     c30:	4013      	ands	r3, r2
     c32:	464a      	mov	r2, r9
     c34:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     c36:	693b      	ldr	r3, [r7, #16]
     c38:	782a      	ldrb	r2, [r5, #0]
     c3a:	4094      	lsls	r4, r2
     c3c:	43a3      	bics	r3, r4
     c3e:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c40:	7832      	ldrb	r2, [r6, #0]
     c42:	0152      	lsls	r2, r2, #5
     c44:	2360      	movs	r3, #96	; 0x60
     c46:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     c48:	7872      	ldrb	r2, [r6, #1]
     c4a:	0212      	lsls	r2, r2, #8
     c4c:	21f8      	movs	r1, #248	; 0xf8
     c4e:	0149      	lsls	r1, r1, #5
     c50:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c52:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     c54:	78b2      	ldrb	r2, [r6, #2]
     c56:	0592      	lsls	r2, r2, #22
     c58:	21c0      	movs	r1, #192	; 0xc0
     c5a:	0409      	lsls	r1, r1, #16
     c5c:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c5e:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     c60:	78f1      	ldrb	r1, [r6, #3]
     c62:	2900      	cmp	r1, #0
     c64:	d004      	beq.n	c70 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     c66:	2207      	movs	r2, #7
     c68:	400a      	ands	r2, r1
     c6a:	2108      	movs	r1, #8
     c6c:	430a      	orrs	r2, r1
     c6e:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     c70:	7932      	ldrb	r2, [r6, #4]
     c72:	2a00      	cmp	r2, #0
     c74:	d001      	beq.n	c7a <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     c76:	2210      	movs	r2, #16
     c78:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     c7a:	4a0b      	ldr	r2, [pc, #44]	; (ca8 <dma_allocate+0x130>)
     c7c:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     c7e:	4c0e      	ldr	r4, [pc, #56]	; (cb8 <dma_allocate+0x140>)
     c80:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     c82:	2300      	movs	r3, #0
     c84:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     c86:	782b      	ldrb	r3, [r5, #0]
     c88:	009b      	lsls	r3, r3, #2
     c8a:	4a0c      	ldr	r2, [pc, #48]	; (cbc <dma_allocate+0x144>)
     c8c:	509d      	str	r5, [r3, r2]
     c8e:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     c90:	2000      	movs	r0, #0
}
     c92:	bc0c      	pop	{r2, r3}
     c94:	4690      	mov	r8, r2
     c96:	4699      	mov	r9, r3
     c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00002101 	.word	0x00002101
     ca0:	20000008 	.word	0x20000008
     ca4:	40000400 	.word	0x40000400
     ca8:	41004800 	.word	0x41004800
     cac:	200001c0 	.word	0x200001c0
     cb0:	200000d0 	.word	0x200000d0
     cb4:	00000f02 	.word	0x00000f02
     cb8:	00002141 	.word	0x00002141
     cbc:	200000b0 	.word	0x200000b0

00000cc0 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     cc0:	b570      	push	{r4, r5, r6, lr}
     cc2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     cc4:	4b19      	ldr	r3, [pc, #100]	; (d2c <dma_start_transfer_job+0x6c>)
     cc6:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     cc8:	7c63      	ldrb	r3, [r4, #17]
     cca:	2b05      	cmp	r3, #5
     ccc:	d008      	beq.n	ce0 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     cce:	69a3      	ldr	r3, [r4, #24]
     cd0:	885b      	ldrh	r3, [r3, #2]
     cd2:	b29b      	uxth	r3, r3
     cd4:	2b00      	cmp	r3, #0
     cd6:	d107      	bne.n	ce8 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     cd8:	4b15      	ldr	r3, [pc, #84]	; (d30 <dma_start_transfer_job+0x70>)
     cda:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     cdc:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     cde:	bd70      	pop	{r4, r5, r6, pc}
     ce0:	4b13      	ldr	r3, [pc, #76]	; (d30 <dma_start_transfer_job+0x70>)
     ce2:	4798      	blx	r3
		return STATUS_BUSY;
     ce4:	2005      	movs	r0, #5
     ce6:	e7fa      	b.n	cde <dma_start_transfer_job+0x1e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ce8:	2640      	movs	r6, #64	; 0x40
     cea:	4b12      	ldr	r3, [pc, #72]	; (d34 <dma_start_transfer_job+0x74>)
     cec:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     cee:	7822      	ldrb	r2, [r4, #0]
     cf0:	2307      	movs	r3, #7
     cf2:	401a      	ands	r2, r3
     cf4:	4d10      	ldr	r5, [pc, #64]	; (d38 <dma_start_transfer_job+0x78>)
     cf6:	213f      	movs	r1, #63	; 0x3f
     cf8:	546a      	strb	r2, [r5, r1]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     cfa:	7822      	ldrb	r2, [r4, #0]
     cfc:	490f      	ldr	r1, [pc, #60]	; (d3c <dma_start_transfer_job+0x7c>)
     cfe:	5c8a      	ldrb	r2, [r1, r2]
     d00:	4013      	ands	r3, r2
     d02:	224d      	movs	r2, #77	; 0x4d
     d04:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     d06:	2305      	movs	r3, #5
     d08:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     d0a:	7820      	ldrb	r0, [r4, #0]
     d0c:	0100      	lsls	r0, r0, #4
     d0e:	4b0c      	ldr	r3, [pc, #48]	; (d40 <dma_start_transfer_job+0x80>)
     d10:	18c0      	adds	r0, r0, r3
     d12:	69a1      	ldr	r1, [r4, #24]
     d14:	3a3d      	subs	r2, #61	; 0x3d
     d16:	4b0b      	ldr	r3, [pc, #44]	; (d44 <dma_start_transfer_job+0x84>)
     d18:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     d1a:	5dab      	ldrb	r3, [r5, r6]
     d1c:	2202      	movs	r2, #2
     d1e:	4313      	orrs	r3, r2
     d20:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     d22:	4b03      	ldr	r3, [pc, #12]	; (d30 <dma_start_transfer_job+0x70>)
     d24:	4798      	blx	r3
	return STATUS_OK;
     d26:	2000      	movs	r0, #0
     d28:	e7d9      	b.n	cde <dma_start_transfer_job+0x1e>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00002101 	.word	0x00002101
     d30:	00002141 	.word	0x00002141
     d34:	e000e100 	.word	0xe000e100
     d38:	41004800 	.word	0x41004800
     d3c:	20000120 	.word	0x20000120
     d40:	200001c0 	.word	0x200001c0
     d44:	00002bd9 	.word	0x00002bd9

00000d48 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     d48:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     d4a:	780a      	ldrb	r2, [r1, #0]
     d4c:	8803      	ldrh	r3, [r0, #0]
     d4e:	2601      	movs	r6, #1
     d50:	4032      	ands	r2, r6
     d52:	2401      	movs	r4, #1
     d54:	43a3      	bics	r3, r4
     d56:	4313      	orrs	r3, r2
     d58:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     d5a:	784b      	ldrb	r3, [r1, #1]
     d5c:	8804      	ldrh	r4, [r0, #0]
     d5e:	2703      	movs	r7, #3
     d60:	403b      	ands	r3, r7
     d62:	005b      	lsls	r3, r3, #1
     d64:	2206      	movs	r2, #6
     d66:	4394      	bics	r4, r2
     d68:	431c      	orrs	r4, r3
     d6a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     d6c:	788d      	ldrb	r5, [r1, #2]
     d6e:	8804      	ldrh	r4, [r0, #0]
     d70:	403d      	ands	r5, r7
     d72:	00ed      	lsls	r5, r5, #3
     d74:	2318      	movs	r3, #24
     d76:	439c      	bics	r4, r3
     d78:	432c      	orrs	r4, r5
     d7a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     d7c:	78ca      	ldrb	r2, [r1, #3]
     d7e:	8803      	ldrh	r3, [r0, #0]
     d80:	403a      	ands	r2, r7
     d82:	0212      	lsls	r2, r2, #8
     d84:	4c16      	ldr	r4, [pc, #88]	; (de0 <dma_descriptor_create+0x98>)
     d86:	4023      	ands	r3, r4
     d88:	4313      	orrs	r3, r2
     d8a:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     d8c:	790b      	ldrb	r3, [r1, #4]
     d8e:	8804      	ldrh	r4, [r0, #0]
     d90:	4033      	ands	r3, r6
     d92:	029b      	lsls	r3, r3, #10
     d94:	4a13      	ldr	r2, [pc, #76]	; (de4 <dma_descriptor_create+0x9c>)
     d96:	4014      	ands	r4, r2
     d98:	431c      	orrs	r4, r3
     d9a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     d9c:	794d      	ldrb	r5, [r1, #5]
     d9e:	8804      	ldrh	r4, [r0, #0]
     da0:	4035      	ands	r5, r6
     da2:	02ed      	lsls	r5, r5, #11
     da4:	4b10      	ldr	r3, [pc, #64]	; (de8 <dma_descriptor_create+0xa0>)
     da6:	401c      	ands	r4, r3
     da8:	432c      	orrs	r4, r5
     daa:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     dac:	798a      	ldrb	r2, [r1, #6]
     dae:	8803      	ldrh	r3, [r0, #0]
     db0:	4032      	ands	r2, r6
     db2:	0312      	lsls	r2, r2, #12
     db4:	4c0d      	ldr	r4, [pc, #52]	; (dec <dma_descriptor_create+0xa4>)
     db6:	4023      	ands	r3, r4
     db8:	4313      	orrs	r3, r2
     dba:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     dbc:	79cb      	ldrb	r3, [r1, #7]
     dbe:	2207      	movs	r2, #7
     dc0:	401a      	ands	r2, r3
     dc2:	8803      	ldrh	r3, [r0, #0]
     dc4:	0352      	lsls	r2, r2, #13
     dc6:	04db      	lsls	r3, r3, #19
     dc8:	0cdb      	lsrs	r3, r3, #19
     dca:	4313      	orrs	r3, r2
     dcc:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     dce:	890b      	ldrh	r3, [r1, #8]
     dd0:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     dd2:	68cb      	ldr	r3, [r1, #12]
     dd4:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     dd6:	690b      	ldr	r3, [r1, #16]
     dd8:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     dda:	694b      	ldr	r3, [r1, #20]
     ddc:	60c3      	str	r3, [r0, #12]
}
     dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de0:	fffffcff 	.word	0xfffffcff
     de4:	fffffbff 	.word	0xfffffbff
     de8:	fffff7ff 	.word	0xfffff7ff
     dec:	ffffefff 	.word	0xffffefff

00000df0 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     df0:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     df2:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     df4:	2a05      	cmp	r2, #5
     df6:	d00b      	beq.n	e10 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     df8:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     dfa:	2b00      	cmp	r3, #0
     dfc:	d00a      	beq.n	e14 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     dfe:	68da      	ldr	r2, [r3, #12]
     e00:	2a00      	cmp	r2, #0
     e02:	d003      	beq.n	e0c <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     e04:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     e06:	68da      	ldr	r2, [r3, #12]
     e08:	2a00      	cmp	r2, #0
     e0a:	d1fb      	bne.n	e04 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     e0c:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     e0e:	2300      	movs	r3, #0
}
     e10:	0018      	movs	r0, r3
     e12:	4770      	bx	lr
		resource->descriptor = descriptor;
     e14:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     e16:	2300      	movs	r3, #0
     e18:	e7fa      	b.n	e10 <dma_add_descriptor+0x20>
	...

00000e1c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e1c:	b500      	push	{lr}
     e1e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e20:	ab01      	add	r3, sp, #4
     e22:	2280      	movs	r2, #128	; 0x80
     e24:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e26:	780a      	ldrb	r2, [r1, #0]
     e28:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e2e:	788a      	ldrb	r2, [r1, #2]
     e30:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e32:	0019      	movs	r1, r3
     e34:	4b01      	ldr	r3, [pc, #4]	; (e3c <port_pin_set_config+0x20>)
     e36:	4798      	blx	r3
}
     e38:	b003      	add	sp, #12
     e3a:	bd00      	pop	{pc}
     e3c:	00002891 	.word	0x00002891

00000e40 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     e40:	b5f0      	push	{r4, r5, r6, r7, lr}
     e42:	46ce      	mov	lr, r9
     e44:	4647      	mov	r7, r8
     e46:	b580      	push	{r7, lr}
     e48:	b083      	sub	sp, #12
     e4a:	0005      	movs	r5, r0
     e4c:	000c      	movs	r4, r1
     e4e:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     e50:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     e52:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     e54:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     e56:	079b      	lsls	r3, r3, #30
     e58:	d504      	bpl.n	e64 <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     e5a:	b003      	add	sp, #12
     e5c:	bc0c      	pop	{r2, r3}
     e5e:	4690      	mov	r8, r2
     e60:	4699      	mov	r9, r3
     e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     e64:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     e66:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     e68:	07db      	lsls	r3, r3, #31
     e6a:	d4f6      	bmi.n	e5a <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e6c:	0008      	movs	r0, r1
     e6e:	4b4d      	ldr	r3, [pc, #308]	; (fa4 <i2c_slave_init+0x164>)
     e70:	4699      	mov	r9, r3
     e72:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     e74:	4a4c      	ldr	r2, [pc, #304]	; (fa8 <i2c_slave_init+0x168>)
     e76:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e78:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e7a:	2701      	movs	r7, #1
     e7c:	46b8      	mov	r8, r7
     e7e:	409f      	lsls	r7, r3
     e80:	003b      	movs	r3, r7
     e82:	430b      	orrs	r3, r1
     e84:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e86:	a901      	add	r1, sp, #4
     e88:	7e73      	ldrb	r3, [r6, #25]
     e8a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e8c:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e8e:	b2c3      	uxtb	r3, r0
     e90:	001f      	movs	r7, r3
     e92:	0018      	movs	r0, r3
     e94:	4b45      	ldr	r3, [pc, #276]	; (fac <i2c_slave_init+0x16c>)
     e96:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e98:	0038      	movs	r0, r7
     e9a:	4b45      	ldr	r3, [pc, #276]	; (fb0 <i2c_slave_init+0x170>)
     e9c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e9e:	7e70      	ldrb	r0, [r6, #25]
     ea0:	2100      	movs	r1, #0
     ea2:	4b44      	ldr	r3, [pc, #272]	; (fb4 <i2c_slave_init+0x174>)
     ea4:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ea6:	6828      	ldr	r0, [r5, #0]
     ea8:	47c8      	blx	r9
     eaa:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     eac:	4942      	ldr	r1, [pc, #264]	; (fb8 <i2c_slave_init+0x178>)
     eae:	4b43      	ldr	r3, [pc, #268]	; (fbc <i2c_slave_init+0x17c>)
     eb0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     eb2:	00bf      	lsls	r7, r7, #2
     eb4:	4b42      	ldr	r3, [pc, #264]	; (fc0 <i2c_slave_init+0x180>)
     eb6:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     eb8:	2300      	movs	r3, #0
     eba:	2224      	movs	r2, #36	; 0x24
     ebc:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     ebe:	3201      	adds	r2, #1
     ec0:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     ec2:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     ec4:	7e33      	ldrb	r3, [r6, #24]
     ec6:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     ec8:	2310      	movs	r3, #16
     eca:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ecc:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     ece:	8933      	ldrh	r3, [r6, #8]
     ed0:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     ed2:	7c33      	ldrb	r3, [r6, #16]
     ed4:	722b      	strb	r3, [r5, #8]
     ed6:	2380      	movs	r3, #128	; 0x80
     ed8:	466a      	mov	r2, sp
     eda:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     edc:	2300      	movs	r3, #0
     ede:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ee0:	466b      	mov	r3, sp
     ee2:	4642      	mov	r2, r8
     ee4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     ee6:	2300      	movs	r3, #0
     ee8:	466a      	mov	r2, sp
     eea:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     eec:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     eee:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     ef0:	2800      	cmp	r0, #0
     ef2:	d04b      	beq.n	f8c <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     ef4:	466b      	mov	r3, sp
     ef6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ef8:	2302      	movs	r3, #2
     efa:	466a      	mov	r2, sp
     efc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     efe:	0c00      	lsrs	r0, r0, #16
     f00:	b2c0      	uxtb	r0, r0
     f02:	4669      	mov	r1, sp
     f04:	4b2f      	ldr	r3, [pc, #188]	; (fc4 <i2c_slave_init+0x184>)
     f06:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     f08:	2d00      	cmp	r5, #0
     f0a:	d044      	beq.n	f96 <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     f0c:	466b      	mov	r3, sp
     f0e:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f10:	2302      	movs	r3, #2
     f12:	466a      	mov	r2, sp
     f14:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f16:	0c2d      	lsrs	r5, r5, #16
     f18:	b2e8      	uxtb	r0, r5
     f1a:	4669      	mov	r1, sp
     f1c:	4b29      	ldr	r3, [pc, #164]	; (fc4 <i2c_slave_init+0x184>)
     f1e:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     f20:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     f22:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     f24:	2b00      	cmp	r3, #0
     f26:	d104      	bne.n	f32 <i2c_slave_init+0xf2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f28:	4b27      	ldr	r3, [pc, #156]	; (fc8 <i2c_slave_init+0x188>)
     f2a:	789b      	ldrb	r3, [r3, #2]
     f2c:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     f2e:	0fdb      	lsrs	r3, r3, #31
     f30:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     f32:	2325      	movs	r3, #37	; 0x25
     f34:	5cf3      	ldrb	r3, [r6, r3]
     f36:	2b00      	cmp	r3, #0
     f38:	d104      	bne.n	f44 <i2c_slave_init+0x104>
     f3a:	2380      	movs	r3, #128	; 0x80
     f3c:	049b      	lsls	r3, r3, #18
     f3e:	6971      	ldr	r1, [r6, #20]
     f40:	4299      	cmp	r1, r3
     f42:	d102      	bne.n	f4a <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f44:	2380      	movs	r3, #128	; 0x80
     f46:	051b      	lsls	r3, r3, #20
     f48:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     f4a:	6820      	ldr	r0, [r4, #0]
     f4c:	6873      	ldr	r3, [r6, #4]
     f4e:	6971      	ldr	r1, [r6, #20]
     f50:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     f52:	2124      	movs	r1, #36	; 0x24
     f54:	5c71      	ldrb	r1, [r6, r1]
     f56:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     f58:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     f5a:	2126      	movs	r1, #38	; 0x26
     f5c:	5c71      	ldrb	r1, [r6, r1]
     f5e:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     f60:	430b      	orrs	r3, r1
     f62:	4303      	orrs	r3, r0
     f64:	4313      	orrs	r3, r2
     f66:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     f68:	8972      	ldrh	r2, [r6, #10]
     f6a:	2380      	movs	r3, #128	; 0x80
     f6c:	005b      	lsls	r3, r3, #1
     f6e:	4313      	orrs	r3, r2
     f70:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     f72:	89b3      	ldrh	r3, [r6, #12]
     f74:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     f76:	89f2      	ldrh	r2, [r6, #14]
     f78:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     f7a:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     f7c:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     f7e:	4313      	orrs	r3, r2
     f80:	7c32      	ldrb	r2, [r6, #16]
     f82:	03d2      	lsls	r2, r2, #15
     f84:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     f86:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     f88:	2000      	movs	r0, #0
     f8a:	e766      	b.n	e5a <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     f8c:	2100      	movs	r1, #0
     f8e:	0020      	movs	r0, r4
     f90:	4b0e      	ldr	r3, [pc, #56]	; (fcc <i2c_slave_init+0x18c>)
     f92:	4798      	blx	r3
     f94:	e7ae      	b.n	ef4 <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     f96:	2101      	movs	r1, #1
     f98:	0020      	movs	r0, r4
     f9a:	4b0c      	ldr	r3, [pc, #48]	; (fcc <i2c_slave_init+0x18c>)
     f9c:	4798      	blx	r3
     f9e:	0005      	movs	r5, r0
     fa0:	e7b4      	b.n	f0c <i2c_slave_init+0xcc>
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	000013b1 	.word	0x000013b1
     fa8:	40000400 	.word	0x40000400
     fac:	00002799 	.word	0x00002799
     fb0:	0000270d 	.word	0x0000270d
     fb4:	000012a5 	.word	0x000012a5
     fb8:	00001015 	.word	0x00001015
     fbc:	000013ed 	.word	0x000013ed
     fc0:	20000210 	.word	0x20000210
     fc4:	00002891 	.word	0x00002891
     fc8:	41002000 	.word	0x41002000
     fcc:	000012f1 	.word	0x000012f1

00000fd0 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     fd0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     fd2:	1c93      	adds	r3, r2, #2
     fd4:	009b      	lsls	r3, r3, #2
     fd6:	18c3      	adds	r3, r0, r3
     fd8:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     fda:	2424      	movs	r4, #36	; 0x24
     fdc:	5d03      	ldrb	r3, [r0, r4]
     fde:	2101      	movs	r1, #1
     fe0:	4091      	lsls	r1, r2
     fe2:	430b      	orrs	r3, r1
     fe4:	b2db      	uxtb	r3, r3
     fe6:	5503      	strb	r3, [r0, r4]
}
     fe8:	bd10      	pop	{r4, pc}

00000fea <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     fea:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     fec:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     fee:	2a00      	cmp	r2, #0
     ff0:	d001      	beq.n	ff6 <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     ff2:	0018      	movs	r0, r3
     ff4:	4770      	bx	lr
	module->buffer           = packet->data;
     ff6:	684b      	ldr	r3, [r1, #4]
     ff8:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     ffa:	880b      	ldrh	r3, [r1, #0]
     ffc:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     ffe:	880b      	ldrh	r3, [r1, #0]
    1000:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
    1002:	3205      	adds	r2, #5
    1004:	2331      	movs	r3, #49	; 0x31
    1006:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1008:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    100a:	3202      	adds	r2, #2
    100c:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    100e:	2300      	movs	r3, #0
    1010:	e7ef      	b.n	ff2 <i2c_slave_write_packet_job+0x8>
	...

00001014 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    1014:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
    1016:	0080      	lsls	r0, r0, #2
    1018:	4b95      	ldr	r3, [pc, #596]	; (1270 <_i2c_slave_interrupt_handler+0x25c>)
    101a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    101c:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    101e:	2325      	movs	r3, #37	; 0x25
    1020:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
    1022:	2224      	movs	r2, #36	; 0x24
    1024:	5ca6      	ldrb	r6, [r4, r2]
    1026:	401e      	ands	r6, r3

	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    1028:	7e2b      	ldrb	r3, [r5, #24]
    102a:	079b      	lsls	r3, r3, #30
    102c:	d400      	bmi.n	1030 <_i2c_slave_interrupt_handler+0x1c>
    102e:	e08a      	b.n	1146 <_i2c_slave_interrupt_handler+0x132>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    1030:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1032:	b29b      	uxth	r3, r3
    1034:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1036:	4293      	cmp	r3, r2
    1038:	d00d      	beq.n	1056 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    103a:	2330      	movs	r3, #48	; 0x30
    103c:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
    103e:	2b00      	cmp	r3, #0
    1040:	d109      	bne.n	1056 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
    1042:	2231      	movs	r2, #49	; 0x31
    1044:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
    1046:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
    1048:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    104a:	07b3      	lsls	r3, r6, #30
    104c:	d50b      	bpl.n	1066 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    104e:	6923      	ldr	r3, [r4, #16]
    1050:	0020      	movs	r0, r4
    1052:	4798      	blx	r3
    1054:	e007      	b.n	1066 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    1056:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1058:	b29b      	uxth	r3, r3
    105a:	429a      	cmp	r2, r3
    105c:	d003      	beq.n	1066 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
    105e:	2330      	movs	r3, #48	; 0x30
    1060:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
    1062:	2b01      	cmp	r3, #1
    1064:	d020      	beq.n	10a8 <_i2c_slave_interrupt_handler+0x94>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    1066:	8b6a      	ldrh	r2, [r5, #26]
    1068:	2343      	movs	r3, #67	; 0x43
    106a:	421a      	tst	r2, r3
    106c:	d004      	beq.n	1078 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    106e:	2210      	movs	r2, #16
    1070:	3b12      	subs	r3, #18
    1072:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    1074:	06b3      	lsls	r3, r6, #26
    1076:	d422      	bmi.n	10be <_i2c_slave_interrupt_handler+0xaa>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
    1078:	7a63      	ldrb	r3, [r4, #9]
    107a:	2b00      	cmp	r3, #0
    107c:	d123      	bne.n	10c6 <_i2c_slave_interrupt_handler+0xb2>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    107e:	8b6b      	ldrh	r3, [r5, #26]
    1080:	071b      	lsls	r3, r3, #28
    1082:	d53f      	bpl.n	1104 <_i2c_slave_interrupt_handler+0xf0>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    1084:	2201      	movs	r2, #1
    1086:	2330      	movs	r3, #48	; 0x30
    1088:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    108a:	0773      	lsls	r3, r6, #29
    108c:	d436      	bmi.n	10fc <_i2c_slave_interrupt_handler+0xe8>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
    108e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1090:	b29b      	uxth	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	d021      	beq.n	10da <_i2c_slave_interrupt_handler+0xc6>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1096:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    1098:	4b76      	ldr	r3, [pc, #472]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    109a:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
    109c:	2300      	movs	r3, #0
    109e:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
    10a0:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    10a2:	4b75      	ldr	r3, [pc, #468]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    10a4:	4798      	blx	r3
    10a6:	e018      	b.n	10da <_i2c_slave_interrupt_handler+0xc6>
			module->status = STATUS_OK;
    10a8:	2300      	movs	r3, #0
    10aa:	2231      	movs	r2, #49	; 0x31
    10ac:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
    10ae:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
    10b0:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    10b2:	07f3      	lsls	r3, r6, #31
    10b4:	d5d7      	bpl.n	1066 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    10b6:	68e3      	ldr	r3, [r4, #12]
    10b8:	0020      	movs	r0, r4
    10ba:	4798      	blx	r3
    10bc:	e7d3      	b.n	1066 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    10be:	6a23      	ldr	r3, [r4, #32]
    10c0:	0020      	movs	r0, r4
    10c2:	4798      	blx	r3
    10c4:	e7d8      	b.n	1078 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    10c6:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    10c8:	4b6a      	ldr	r3, [pc, #424]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    10ca:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    10cc:	2300      	movs	r3, #0
    10ce:	836b      	strh	r3, [r5, #26]
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    10d0:	2380      	movs	r3, #128	; 0x80
    10d2:	02db      	lsls	r3, r3, #11
    10d4:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    10d6:	4b68      	ldr	r3, [pc, #416]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    10d8:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    10da:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    10dc:	7e1a      	ldrb	r2, [r3, #24]
    10de:	07d2      	lsls	r2, r2, #31
    10e0:	d501      	bpl.n	10e6 <_i2c_slave_interrupt_handler+0xd2>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    10e2:	2201      	movs	r2, #1
    10e4:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    10e6:	2202      	movs	r2, #2
    10e8:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    10ea:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
    10ec:	4b61      	ldr	r3, [pc, #388]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    10ee:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    10f0:	2300      	movs	r3, #0
    10f2:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
    10f4:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
    10f6:	4b60      	ldr	r3, [pc, #384]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    10f8:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    10fa:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    10fc:	6963      	ldr	r3, [r4, #20]
    10fe:	0020      	movs	r0, r4
    1100:	4798      	blx	r3
    1102:	e7c4      	b.n	108e <_i2c_slave_interrupt_handler+0x7a>
			module->transfer_direction = I2C_TRANSFER_WRITE;
    1104:	2200      	movs	r2, #0
    1106:	2330      	movs	r3, #48	; 0x30
    1108:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    110a:	0733      	lsls	r3, r6, #28
    110c:	d40e      	bmi.n	112c <_i2c_slave_interrupt_handler+0x118>
			if (module->buffer_length == 0) {
    110e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1110:	b29b      	uxth	r3, r3
    1112:	2b00      	cmp	r3, #0
    1114:	d10e      	bne.n	1134 <_i2c_slave_interrupt_handler+0x120>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1116:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    1118:	4b56      	ldr	r3, [pc, #344]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    111a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    111c:	2300      	movs	r3, #0
    111e:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    1120:	2380      	movs	r3, #128	; 0x80
    1122:	02db      	lsls	r3, r3, #11
    1124:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    1126:	4b54      	ldr	r3, [pc, #336]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    1128:	4798      	blx	r3
    112a:	e7d6      	b.n	10da <_i2c_slave_interrupt_handler+0xc6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    112c:	69a3      	ldr	r3, [r4, #24]
    112e:	0020      	movs	r0, r4
    1130:	4798      	blx	r3
    1132:	e7ec      	b.n	110e <_i2c_slave_interrupt_handler+0xfa>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1134:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    1136:	4b4f      	ldr	r3, [pc, #316]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    1138:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    113a:	2300      	movs	r3, #0
    113c:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
    113e:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    1140:	4b4d      	ldr	r3, [pc, #308]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    1142:	4798      	blx	r3
    1144:	e7c9      	b.n	10da <_i2c_slave_interrupt_handler+0xc6>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    1146:	7e2b      	ldrb	r3, [r5, #24]
    1148:	07db      	lsls	r3, r3, #31
    114a:	d52e      	bpl.n	11aa <_i2c_slave_interrupt_handler+0x196>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    114c:	2301      	movs	r3, #1
    114e:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    1150:	3304      	adds	r3, #4
    1152:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    1154:	3320      	adds	r3, #32
    1156:	5ce3      	ldrb	r3, [r4, r3]
    1158:	075b      	lsls	r3, r3, #29
    115a:	d405      	bmi.n	1168 <_i2c_slave_interrupt_handler+0x154>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    115c:	2325      	movs	r3, #37	; 0x25
    115e:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    1160:	2b08      	cmp	r3, #8
    1162:	d001      	beq.n	1168 <_i2c_slave_interrupt_handler+0x154>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    1164:	2302      	movs	r3, #2
    1166:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    1168:	2331      	movs	r3, #49	; 0x31
    116a:	5ce3      	ldrb	r3, [r4, r3]
    116c:	2b1e      	cmp	r3, #30
    116e:	d0c4      	beq.n	10fa <_i2c_slave_interrupt_handler+0xe6>
    1170:	2331      	movs	r3, #49	; 0x31
    1172:	5ce3      	ldrb	r3, [r4, r3]
    1174:	2b10      	cmp	r3, #16
    1176:	d0c0      	beq.n	10fa <_i2c_slave_interrupt_handler+0xe6>
			module->status = STATUS_OK;
    1178:	2300      	movs	r3, #0
    117a:	2231      	movs	r2, #49	; 0x31
    117c:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
    117e:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
    1180:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    1182:	07b3      	lsls	r3, r6, #30
    1184:	d503      	bpl.n	118e <_i2c_slave_interrupt_handler+0x17a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1186:	2330      	movs	r3, #48	; 0x30
    1188:	5ce3      	ldrb	r3, [r4, r3]
    118a:	2b00      	cmp	r3, #0
    118c:	d009      	beq.n	11a2 <_i2c_slave_interrupt_handler+0x18e>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    118e:	07f3      	lsls	r3, r6, #31
    1190:	d5b3      	bpl.n	10fa <_i2c_slave_interrupt_handler+0xe6>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1192:	2330      	movs	r3, #48	; 0x30
    1194:	5ce3      	ldrb	r3, [r4, r3]
    1196:	2b01      	cmp	r3, #1
    1198:	d1af      	bne.n	10fa <_i2c_slave_interrupt_handler+0xe6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    119a:	68e3      	ldr	r3, [r4, #12]
    119c:	0020      	movs	r0, r4
    119e:	4798      	blx	r3
    11a0:	e7ab      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    11a2:	6923      	ldr	r3, [r4, #16]
    11a4:	0020      	movs	r0, r4
    11a6:	4798      	blx	r3
    11a8:	e7a7      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    11aa:	7e2b      	ldrb	r3, [r5, #24]
    11ac:	075b      	lsls	r3, r3, #29
    11ae:	d5a4      	bpl.n	10fa <_i2c_slave_interrupt_handler+0xe6>
		if (module->buffer_remaining <= 0 ||
    11b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    11b2:	2b00      	cmp	r3, #0
    11b4:	d01d      	beq.n	11f2 <_i2c_slave_interrupt_handler+0x1de>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    11b6:	2230      	movs	r2, #48	; 0x30
    11b8:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
    11ba:	2a01      	cmp	r2, #1
    11bc:	d012      	beq.n	11e4 <_i2c_slave_interrupt_handler+0x1d0>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    11be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    11c0:	b29b      	uxth	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	d099      	beq.n	10fa <_i2c_slave_interrupt_handler+0xe6>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    11c6:	2330      	movs	r3, #48	; 0x30
    11c8:	5ce3      	ldrb	r3, [r4, r3]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d044      	beq.n	1258 <_i2c_slave_interrupt_handler+0x244>
	i2c_hw->DATA.reg = *(module->buffer++);
    11ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    11d0:	1c5a      	adds	r2, r3, #1
    11d2:	62e2      	str	r2, [r4, #44]	; 0x2c
    11d4:	781b      	ldrb	r3, [r3, #0]
    11d6:	b2db      	uxtb	r3, r3
    11d8:	2228      	movs	r2, #40	; 0x28
    11da:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
    11dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    11de:	3b01      	subs	r3, #1
    11e0:	8523      	strh	r3, [r4, #40]	; 0x28
}
    11e2:	e78a      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
				(module->buffer_length > module->buffer_remaining) &&
    11e4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    11e6:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
    11e8:	4293      	cmp	r3, r2
    11ea:	d2e8      	bcs.n	11be <_i2c_slave_interrupt_handler+0x1aa>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    11ec:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
    11ee:	075b      	lsls	r3, r3, #29
    11f0:	d5e5      	bpl.n	11be <_i2c_slave_interrupt_handler+0x1aa>
			module->buffer_remaining = 0;
    11f2:	2300      	movs	r3, #0
    11f4:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
    11f6:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    11f8:	3330      	adds	r3, #48	; 0x30
    11fa:	5ce3      	ldrb	r3, [r4, r3]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d117      	bne.n	1230 <_i2c_slave_interrupt_handler+0x21c>
	cpu_irq_enter_critical();
    1200:	4b1c      	ldr	r3, [pc, #112]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    1202:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1204:	2300      	movs	r3, #0
    1206:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    1208:	2380      	movs	r3, #128	; 0x80
    120a:	02db      	lsls	r3, r3, #11
    120c:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    120e:	4b1a      	ldr	r3, [pc, #104]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    1210:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    1212:	686a      	ldr	r2, [r5, #4]
    1214:	2380      	movs	r3, #128	; 0x80
    1216:	029b      	lsls	r3, r3, #10
    1218:	4313      	orrs	r3, r2
    121a:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
    121c:	221e      	movs	r2, #30
    121e:	2331      	movs	r3, #49	; 0x31
    1220:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    1222:	06f3      	lsls	r3, r6, #27
    1224:	d400      	bmi.n	1228 <_i2c_slave_interrupt_handler+0x214>
    1226:	e768      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    1228:	69e3      	ldr	r3, [r4, #28]
    122a:	0020      	movs	r0, r4
    122c:	4798      	blx	r3
    122e:	e764      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
	cpu_irq_enter_critical();
    1230:	4b10      	ldr	r3, [pc, #64]	; (1274 <_i2c_slave_interrupt_handler+0x260>)
    1232:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1234:	2300      	movs	r3, #0
    1236:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    1238:	2380      	movs	r3, #128	; 0x80
    123a:	02db      	lsls	r3, r3, #11
    123c:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    123e:	4b0e      	ldr	r3, [pc, #56]	; (1278 <_i2c_slave_interrupt_handler+0x264>)
    1240:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    1242:	686a      	ldr	r2, [r5, #4]
    1244:	2380      	movs	r3, #128	; 0x80
    1246:	029b      	lsls	r3, r3, #10
    1248:	4313      	orrs	r3, r2
    124a:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
    124c:	2331      	movs	r3, #49	; 0x31
    124e:	2200      	movs	r2, #0
    1250:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1252:	3b2d      	subs	r3, #45	; 0x2d
    1254:	752b      	strb	r3, [r5, #20]
    1256:	e750      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
	*(module->buffer++) = i2c_hw->DATA.reg;
    1258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    125a:	1c53      	adds	r3, r2, #1
    125c:	62e3      	str	r3, [r4, #44]	; 0x2c
    125e:	2328      	movs	r3, #40	; 0x28
    1260:	5ceb      	ldrb	r3, [r5, r3]
    1262:	b2db      	uxtb	r3, r3
    1264:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
    1266:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1268:	3b01      	subs	r3, #1
    126a:	8523      	strh	r3, [r4, #40]	; 0x28
    126c:	e745      	b.n	10fa <_i2c_slave_interrupt_handler+0xe6>
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	20000210 	.word	0x20000210
    1274:	00002101 	.word	0x00002101
    1278:	00002141 	.word	0x00002141

0000127c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    127c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    127e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1280:	2340      	movs	r3, #64	; 0x40
    1282:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1284:	4281      	cmp	r1, r0
    1286:	d202      	bcs.n	128e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1288:	0018      	movs	r0, r3
    128a:	bd10      	pop	{r4, pc}
		baud_calculated++;
    128c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    128e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1290:	1c63      	adds	r3, r4, #1
    1292:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1294:	4288      	cmp	r0, r1
    1296:	d9f9      	bls.n	128c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1298:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    129a:	2cff      	cmp	r4, #255	; 0xff
    129c:	d8f4      	bhi.n	1288 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    129e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    12a0:	2300      	movs	r3, #0
    12a2:	e7f1      	b.n	1288 <_sercom_get_sync_baud_val+0xc>

000012a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    12a4:	b510      	push	{r4, lr}
    12a6:	b082      	sub	sp, #8
    12a8:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    12aa:	4b0e      	ldr	r3, [pc, #56]	; (12e4 <sercom_set_gclk_generator+0x40>)
    12ac:	781b      	ldrb	r3, [r3, #0]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d007      	beq.n	12c2 <sercom_set_gclk_generator+0x1e>
    12b2:	2900      	cmp	r1, #0
    12b4:	d105      	bne.n	12c2 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    12b6:	4b0b      	ldr	r3, [pc, #44]	; (12e4 <sercom_set_gclk_generator+0x40>)
    12b8:	785b      	ldrb	r3, [r3, #1]
    12ba:	4283      	cmp	r3, r0
    12bc:	d010      	beq.n	12e0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    12be:	201d      	movs	r0, #29
    12c0:	e00c      	b.n	12dc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    12c2:	a901      	add	r1, sp, #4
    12c4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    12c6:	200d      	movs	r0, #13
    12c8:	4b07      	ldr	r3, [pc, #28]	; (12e8 <sercom_set_gclk_generator+0x44>)
    12ca:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    12cc:	200d      	movs	r0, #13
    12ce:	4b07      	ldr	r3, [pc, #28]	; (12ec <sercom_set_gclk_generator+0x48>)
    12d0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    12d2:	4b04      	ldr	r3, [pc, #16]	; (12e4 <sercom_set_gclk_generator+0x40>)
    12d4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    12d6:	2201      	movs	r2, #1
    12d8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    12da:	2000      	movs	r0, #0
}
    12dc:	b002      	add	sp, #8
    12de:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    12e0:	2000      	movs	r0, #0
    12e2:	e7fb      	b.n	12dc <sercom_set_gclk_generator+0x38>
    12e4:	20000128 	.word	0x20000128
    12e8:	00002799 	.word	0x00002799
    12ec:	0000270d 	.word	0x0000270d

000012f0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    12f0:	4b20      	ldr	r3, [pc, #128]	; (1374 <_sercom_get_default_pad+0x84>)
    12f2:	4298      	cmp	r0, r3
    12f4:	d017      	beq.n	1326 <_sercom_get_default_pad+0x36>
    12f6:	4b20      	ldr	r3, [pc, #128]	; (1378 <_sercom_get_default_pad+0x88>)
    12f8:	4298      	cmp	r0, r3
    12fa:	d024      	beq.n	1346 <_sercom_get_default_pad+0x56>
    12fc:	4b1f      	ldr	r3, [pc, #124]	; (137c <_sercom_get_default_pad+0x8c>)
    12fe:	4298      	cmp	r0, r3
    1300:	d001      	beq.n	1306 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1302:	2000      	movs	r0, #0
}
    1304:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1306:	2901      	cmp	r1, #1
    1308:	d007      	beq.n	131a <_sercom_get_default_pad+0x2a>
    130a:	2900      	cmp	r1, #0
    130c:	d02b      	beq.n	1366 <_sercom_get_default_pad+0x76>
    130e:	2902      	cmp	r1, #2
    1310:	d005      	beq.n	131e <_sercom_get_default_pad+0x2e>
    1312:	2903      	cmp	r1, #3
    1314:	d005      	beq.n	1322 <_sercom_get_default_pad+0x32>
	return 0;
    1316:	2000      	movs	r0, #0
    1318:	e7f4      	b.n	1304 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    131a:	4819      	ldr	r0, [pc, #100]	; (1380 <_sercom_get_default_pad+0x90>)
    131c:	e7f2      	b.n	1304 <_sercom_get_default_pad+0x14>
    131e:	4819      	ldr	r0, [pc, #100]	; (1384 <_sercom_get_default_pad+0x94>)
    1320:	e7f0      	b.n	1304 <_sercom_get_default_pad+0x14>
    1322:	4819      	ldr	r0, [pc, #100]	; (1388 <_sercom_get_default_pad+0x98>)
    1324:	e7ee      	b.n	1304 <_sercom_get_default_pad+0x14>
    1326:	2901      	cmp	r1, #1
    1328:	d007      	beq.n	133a <_sercom_get_default_pad+0x4a>
    132a:	2900      	cmp	r1, #0
    132c:	d01d      	beq.n	136a <_sercom_get_default_pad+0x7a>
    132e:	2902      	cmp	r1, #2
    1330:	d005      	beq.n	133e <_sercom_get_default_pad+0x4e>
    1332:	2903      	cmp	r1, #3
    1334:	d005      	beq.n	1342 <_sercom_get_default_pad+0x52>
	return 0;
    1336:	2000      	movs	r0, #0
    1338:	e7e4      	b.n	1304 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    133a:	4814      	ldr	r0, [pc, #80]	; (138c <_sercom_get_default_pad+0x9c>)
    133c:	e7e2      	b.n	1304 <_sercom_get_default_pad+0x14>
    133e:	4814      	ldr	r0, [pc, #80]	; (1390 <_sercom_get_default_pad+0xa0>)
    1340:	e7e0      	b.n	1304 <_sercom_get_default_pad+0x14>
    1342:	4814      	ldr	r0, [pc, #80]	; (1394 <_sercom_get_default_pad+0xa4>)
    1344:	e7de      	b.n	1304 <_sercom_get_default_pad+0x14>
    1346:	2901      	cmp	r1, #1
    1348:	d007      	beq.n	135a <_sercom_get_default_pad+0x6a>
    134a:	2900      	cmp	r1, #0
    134c:	d00f      	beq.n	136e <_sercom_get_default_pad+0x7e>
    134e:	2902      	cmp	r1, #2
    1350:	d005      	beq.n	135e <_sercom_get_default_pad+0x6e>
    1352:	2903      	cmp	r1, #3
    1354:	d005      	beq.n	1362 <_sercom_get_default_pad+0x72>
	return 0;
    1356:	2000      	movs	r0, #0
    1358:	e7d4      	b.n	1304 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    135a:	480f      	ldr	r0, [pc, #60]	; (1398 <_sercom_get_default_pad+0xa8>)
    135c:	e7d2      	b.n	1304 <_sercom_get_default_pad+0x14>
    135e:	480f      	ldr	r0, [pc, #60]	; (139c <_sercom_get_default_pad+0xac>)
    1360:	e7d0      	b.n	1304 <_sercom_get_default_pad+0x14>
    1362:	480f      	ldr	r0, [pc, #60]	; (13a0 <_sercom_get_default_pad+0xb0>)
    1364:	e7ce      	b.n	1304 <_sercom_get_default_pad+0x14>
    1366:	480f      	ldr	r0, [pc, #60]	; (13a4 <_sercom_get_default_pad+0xb4>)
    1368:	e7cc      	b.n	1304 <_sercom_get_default_pad+0x14>
    136a:	480f      	ldr	r0, [pc, #60]	; (13a8 <_sercom_get_default_pad+0xb8>)
    136c:	e7ca      	b.n	1304 <_sercom_get_default_pad+0x14>
    136e:	480f      	ldr	r0, [pc, #60]	; (13ac <_sercom_get_default_pad+0xbc>)
    1370:	e7c8      	b.n	1304 <_sercom_get_default_pad+0x14>
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	42000c00 	.word	0x42000c00
    1378:	42001000 	.word	0x42001000
    137c:	42000800 	.word	0x42000800
    1380:	00050003 	.word	0x00050003
    1384:	00060003 	.word	0x00060003
    1388:	00070003 	.word	0x00070003
    138c:	00170002 	.word	0x00170002
    1390:	001e0003 	.word	0x001e0003
    1394:	001f0003 	.word	0x001f0003
    1398:	00170003 	.word	0x00170003
    139c:	00100003 	.word	0x00100003
    13a0:	00190003 	.word	0x00190003
    13a4:	00040003 	.word	0x00040003
    13a8:	00160002 	.word	0x00160002
    13ac:	00160003 	.word	0x00160003

000013b0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    13b0:	b530      	push	{r4, r5, lr}
    13b2:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    13b4:	aa01      	add	r2, sp, #4
    13b6:	4b0b      	ldr	r3, [pc, #44]	; (13e4 <_sercom_get_sercom_inst_index+0x34>)
    13b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    13ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13bc:	0003      	movs	r3, r0
    13be:	9a01      	ldr	r2, [sp, #4]
    13c0:	4282      	cmp	r2, r0
    13c2:	d00c      	beq.n	13de <_sercom_get_sercom_inst_index+0x2e>
    13c4:	9a02      	ldr	r2, [sp, #8]
    13c6:	4282      	cmp	r2, r0
    13c8:	d007      	beq.n	13da <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    13ca:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13cc:	9a03      	ldr	r2, [sp, #12]
    13ce:	429a      	cmp	r2, r3
    13d0:	d001      	beq.n	13d6 <_sercom_get_sercom_inst_index+0x26>
}
    13d2:	b005      	add	sp, #20
    13d4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13d6:	3002      	adds	r0, #2
    13d8:	e002      	b.n	13e0 <_sercom_get_sercom_inst_index+0x30>
    13da:	2001      	movs	r0, #1
    13dc:	e000      	b.n	13e0 <_sercom_get_sercom_inst_index+0x30>
    13de:	2000      	movs	r0, #0
			return i;
    13e0:	b2c0      	uxtb	r0, r0
    13e2:	e7f6      	b.n	13d2 <_sercom_get_sercom_inst_index+0x22>
    13e4:	00002e08 	.word	0x00002e08

000013e8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    13e8:	4770      	bx	lr
	...

000013ec <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    13ec:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    13ee:	4b0a      	ldr	r3, [pc, #40]	; (1418 <_sercom_set_handler+0x2c>)
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d10c      	bne.n	1410 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    13f6:	4c09      	ldr	r4, [pc, #36]	; (141c <_sercom_set_handler+0x30>)
    13f8:	4d09      	ldr	r5, [pc, #36]	; (1420 <_sercom_set_handler+0x34>)
    13fa:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    13fc:	4b09      	ldr	r3, [pc, #36]	; (1424 <_sercom_set_handler+0x38>)
    13fe:	2200      	movs	r2, #0
    1400:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1402:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1404:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1406:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1408:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    140a:	3201      	adds	r2, #1
    140c:	4b02      	ldr	r3, [pc, #8]	; (1418 <_sercom_set_handler+0x2c>)
    140e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1410:	0080      	lsls	r0, r0, #2
    1412:	4b02      	ldr	r3, [pc, #8]	; (141c <_sercom_set_handler+0x30>)
    1414:	50c1      	str	r1, [r0, r3]
}
    1416:	bd30      	pop	{r4, r5, pc}
    1418:	2000012a 	.word	0x2000012a
    141c:	2000012c 	.word	0x2000012c
    1420:	000013e9 	.word	0x000013e9
    1424:	20000210 	.word	0x20000210

00001428 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1428:	b510      	push	{r4, lr}
    142a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    142c:	ac01      	add	r4, sp, #4
    142e:	2309      	movs	r3, #9
    1430:	7023      	strb	r3, [r4, #0]
    1432:	3301      	adds	r3, #1
    1434:	7063      	strb	r3, [r4, #1]
    1436:	3301      	adds	r3, #1
    1438:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    143a:	4b02      	ldr	r3, [pc, #8]	; (1444 <_sercom_get_interrupt_vector+0x1c>)
    143c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    143e:	5620      	ldrsb	r0, [r4, r0]
}
    1440:	b002      	add	sp, #8
    1442:	bd10      	pop	{r4, pc}
    1444:	000013b1 	.word	0x000013b1

00001448 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1448:	b510      	push	{r4, lr}
    144a:	4b02      	ldr	r3, [pc, #8]	; (1454 <SERCOM0_Handler+0xc>)
    144c:	681b      	ldr	r3, [r3, #0]
    144e:	2000      	movs	r0, #0
    1450:	4798      	blx	r3
    1452:	bd10      	pop	{r4, pc}
    1454:	2000012c 	.word	0x2000012c

00001458 <SERCOM1_Handler>:
    1458:	b510      	push	{r4, lr}
    145a:	4b02      	ldr	r3, [pc, #8]	; (1464 <SERCOM1_Handler+0xc>)
    145c:	685b      	ldr	r3, [r3, #4]
    145e:	2001      	movs	r0, #1
    1460:	4798      	blx	r3
    1462:	bd10      	pop	{r4, pc}
    1464:	2000012c 	.word	0x2000012c

00001468 <SERCOM2_Handler>:
    1468:	b510      	push	{r4, lr}
    146a:	4b02      	ldr	r3, [pc, #8]	; (1474 <SERCOM2_Handler+0xc>)
    146c:	689b      	ldr	r3, [r3, #8]
    146e:	2002      	movs	r0, #2
    1470:	4798      	blx	r3
    1472:	bd10      	pop	{r4, pc}
    1474:	2000012c 	.word	0x2000012c

00001478 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1478:	b5f0      	push	{r4, r5, r6, r7, lr}
    147a:	b08b      	sub	sp, #44	; 0x2c
    147c:	0005      	movs	r5, r0
    147e:	000c      	movs	r4, r1
    1480:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1482:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1484:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1486:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1488:	079b      	lsls	r3, r3, #30
    148a:	d501      	bpl.n	1490 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    148c:	b00b      	add	sp, #44	; 0x2c
    148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1490:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1492:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1494:	07db      	lsls	r3, r3, #31
    1496:	d4f9      	bmi.n	148c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1498:	0008      	movs	r0, r1
    149a:	4b6f      	ldr	r3, [pc, #444]	; (1658 <spi_init+0x1e0>)
    149c:	4798      	blx	r3
    149e:	4a6f      	ldr	r2, [pc, #444]	; (165c <spi_init+0x1e4>)
    14a0:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14a2:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14a4:	2301      	movs	r3, #1
    14a6:	40bb      	lsls	r3, r7
    14a8:	430b      	orrs	r3, r1
    14aa:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    14ac:	a909      	add	r1, sp, #36	; 0x24
    14ae:	2724      	movs	r7, #36	; 0x24
    14b0:	5df3      	ldrb	r3, [r6, r7]
    14b2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14b4:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14b6:	b2c3      	uxtb	r3, r0
    14b8:	9301      	str	r3, [sp, #4]
    14ba:	0018      	movs	r0, r3
    14bc:	4b68      	ldr	r3, [pc, #416]	; (1660 <spi_init+0x1e8>)
    14be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14c0:	9801      	ldr	r0, [sp, #4]
    14c2:	4b68      	ldr	r3, [pc, #416]	; (1664 <spi_init+0x1ec>)
    14c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14c6:	5df0      	ldrb	r0, [r6, r7]
    14c8:	2100      	movs	r1, #0
    14ca:	4b67      	ldr	r3, [pc, #412]	; (1668 <spi_init+0x1f0>)
    14cc:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    14ce:	7833      	ldrb	r3, [r6, #0]
    14d0:	2b01      	cmp	r3, #1
    14d2:	d03f      	beq.n	1554 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    14d4:	7833      	ldrb	r3, [r6, #0]
    14d6:	2b00      	cmp	r3, #0
    14d8:	d103      	bne.n	14e2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    14da:	6823      	ldr	r3, [r4, #0]
    14dc:	2208      	movs	r2, #8
    14de:	4313      	orrs	r3, r2
    14e0:	6023      	str	r3, [r4, #0]
    14e2:	002b      	movs	r3, r5
    14e4:	330c      	adds	r3, #12
    14e6:	0029      	movs	r1, r5
    14e8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    14ea:	2200      	movs	r2, #0
    14ec:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    14ee:	428b      	cmp	r3, r1
    14f0:	d1fc      	bne.n	14ec <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    14f2:	2300      	movs	r3, #0
    14f4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    14f6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    14f8:	2400      	movs	r4, #0
    14fa:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    14fc:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    14fe:	3336      	adds	r3, #54	; 0x36
    1500:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1502:	3301      	adds	r3, #1
    1504:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1506:	3301      	adds	r3, #1
    1508:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    150a:	3b35      	subs	r3, #53	; 0x35
    150c:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    150e:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1510:	6828      	ldr	r0, [r5, #0]
    1512:	4b51      	ldr	r3, [pc, #324]	; (1658 <spi_init+0x1e0>)
    1514:	4798      	blx	r3
    1516:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1518:	4954      	ldr	r1, [pc, #336]	; (166c <spi_init+0x1f4>)
    151a:	4b55      	ldr	r3, [pc, #340]	; (1670 <spi_init+0x1f8>)
    151c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    151e:	00bf      	lsls	r7, r7, #2
    1520:	4b54      	ldr	r3, [pc, #336]	; (1674 <spi_init+0x1fc>)
    1522:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1524:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1526:	ab04      	add	r3, sp, #16
    1528:	2280      	movs	r2, #128	; 0x80
    152a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    152c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    152e:	3a7f      	subs	r2, #127	; 0x7f
    1530:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1532:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1534:	7833      	ldrb	r3, [r6, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d102      	bne.n	1540 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    153a:	2200      	movs	r2, #0
    153c:	ab04      	add	r3, sp, #16
    153e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1540:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1542:	9305      	str	r3, [sp, #20]
    1544:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1546:	9306      	str	r3, [sp, #24]
    1548:	6b33      	ldr	r3, [r6, #48]	; 0x30
    154a:	9307      	str	r3, [sp, #28]
    154c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    154e:	9308      	str	r3, [sp, #32]
    1550:	2400      	movs	r4, #0
    1552:	e00b      	b.n	156c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1554:	6823      	ldr	r3, [r4, #0]
    1556:	220c      	movs	r2, #12
    1558:	4313      	orrs	r3, r2
    155a:	6023      	str	r3, [r4, #0]
    155c:	e7ba      	b.n	14d4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    155e:	0038      	movs	r0, r7
    1560:	4b45      	ldr	r3, [pc, #276]	; (1678 <spi_init+0x200>)
    1562:	4798      	blx	r3
    1564:	e00a      	b.n	157c <spi_init+0x104>
    1566:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1568:	2c04      	cmp	r4, #4
    156a:	d010      	beq.n	158e <spi_init+0x116>
    156c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    156e:	00a3      	lsls	r3, r4, #2
    1570:	aa02      	add	r2, sp, #8
    1572:	200c      	movs	r0, #12
    1574:	1812      	adds	r2, r2, r0
    1576:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1578:	2800      	cmp	r0, #0
    157a:	d0f0      	beq.n	155e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    157c:	1c43      	adds	r3, r0, #1
    157e:	d0f2      	beq.n	1566 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1580:	a904      	add	r1, sp, #16
    1582:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1584:	0c00      	lsrs	r0, r0, #16
    1586:	b2c0      	uxtb	r0, r0
    1588:	4b3c      	ldr	r3, [pc, #240]	; (167c <spi_init+0x204>)
    158a:	4798      	blx	r3
    158c:	e7eb      	b.n	1566 <spi_init+0xee>
	module->mode             = config->mode;
    158e:	7833      	ldrb	r3, [r6, #0]
    1590:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1592:	7c33      	ldrb	r3, [r6, #16]
    1594:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1596:	7cb3      	ldrb	r3, [r6, #18]
    1598:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    159a:	7d33      	ldrb	r3, [r6, #20]
    159c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    159e:	2200      	movs	r2, #0
    15a0:	ab02      	add	r3, sp, #8
    15a2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    15a4:	7833      	ldrb	r3, [r6, #0]
    15a6:	2b01      	cmp	r3, #1
    15a8:	d012      	beq.n	15d0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    15aa:	7833      	ldrb	r3, [r6, #0]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d126      	bne.n	15fe <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    15b0:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    15b2:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    15b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    15b6:	7ff1      	ldrb	r1, [r6, #31]
    15b8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    15ba:	7fb4      	ldrb	r4, [r6, #30]
    15bc:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    15be:	4319      	orrs	r1, r3
    15c0:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    15c2:	2320      	movs	r3, #32
    15c4:	5cf3      	ldrb	r3, [r6, r3]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d01b      	beq.n	1602 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    15ca:	2340      	movs	r3, #64	; 0x40
    15cc:	431a      	orrs	r2, r3
    15ce:	e018      	b.n	1602 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    15d0:	6828      	ldr	r0, [r5, #0]
    15d2:	4b21      	ldr	r3, [pc, #132]	; (1658 <spi_init+0x1e0>)
    15d4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    15d6:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    15d8:	b2c0      	uxtb	r0, r0
    15da:	4b29      	ldr	r3, [pc, #164]	; (1680 <spi_init+0x208>)
    15dc:	4798      	blx	r3
    15de:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    15e0:	ab02      	add	r3, sp, #8
    15e2:	1d9a      	adds	r2, r3, #6
    15e4:	69b0      	ldr	r0, [r6, #24]
    15e6:	4b27      	ldr	r3, [pc, #156]	; (1684 <spi_init+0x20c>)
    15e8:	4798      	blx	r3
    15ea:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    15ec:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    15ee:	2b00      	cmp	r3, #0
    15f0:	d000      	beq.n	15f4 <spi_init+0x17c>
    15f2:	e74b      	b.n	148c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    15f4:	ab02      	add	r3, sp, #8
    15f6:	3306      	adds	r3, #6
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	733b      	strb	r3, [r7, #12]
    15fc:	e7d5      	b.n	15aa <spi_init+0x132>
	uint32_t ctrlb = 0;
    15fe:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1600:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1602:	6873      	ldr	r3, [r6, #4]
    1604:	68b1      	ldr	r1, [r6, #8]
    1606:	430b      	orrs	r3, r1
    1608:	68f1      	ldr	r1, [r6, #12]
    160a:	430b      	orrs	r3, r1
    160c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    160e:	7c31      	ldrb	r1, [r6, #16]
    1610:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1612:	7c71      	ldrb	r1, [r6, #17]
    1614:	2900      	cmp	r1, #0
    1616:	d103      	bne.n	1620 <spi_init+0x1a8>
    1618:	491b      	ldr	r1, [pc, #108]	; (1688 <spi_init+0x210>)
    161a:	7889      	ldrb	r1, [r1, #2]
    161c:	0789      	lsls	r1, r1, #30
    161e:	d501      	bpl.n	1624 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1620:	2180      	movs	r1, #128	; 0x80
    1622:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1624:	7cb1      	ldrb	r1, [r6, #18]
    1626:	2900      	cmp	r1, #0
    1628:	d002      	beq.n	1630 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    162a:	2180      	movs	r1, #128	; 0x80
    162c:	0289      	lsls	r1, r1, #10
    162e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1630:	7cf1      	ldrb	r1, [r6, #19]
    1632:	2900      	cmp	r1, #0
    1634:	d002      	beq.n	163c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1636:	2180      	movs	r1, #128	; 0x80
    1638:	0089      	lsls	r1, r1, #2
    163a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    163c:	7d31      	ldrb	r1, [r6, #20]
    163e:	2900      	cmp	r1, #0
    1640:	d002      	beq.n	1648 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1642:	2180      	movs	r1, #128	; 0x80
    1644:	0189      	lsls	r1, r1, #6
    1646:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1648:	6839      	ldr	r1, [r7, #0]
    164a:	430b      	orrs	r3, r1
    164c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	431a      	orrs	r2, r3
    1652:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1654:	2000      	movs	r0, #0
    1656:	e719      	b.n	148c <spi_init+0x14>
    1658:	000013b1 	.word	0x000013b1
    165c:	40000400 	.word	0x40000400
    1660:	00002799 	.word	0x00002799
    1664:	0000270d 	.word	0x0000270d
    1668:	000012a5 	.word	0x000012a5
    166c:	0000168d 	.word	0x0000168d
    1670:	000013ed 	.word	0x000013ed
    1674:	20000210 	.word	0x20000210
    1678:	000012f1 	.word	0x000012f1
    167c:	00002891 	.word	0x00002891
    1680:	000027b5 	.word	0x000027b5
    1684:	0000127d 	.word	0x0000127d
    1688:	41002000 	.word	0x41002000

0000168c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    168e:	0080      	lsls	r0, r0, #2
    1690:	4b86      	ldr	r3, [pc, #536]	; (18ac <_spi_interrupt_handler+0x220>)
    1692:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1694:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1696:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1698:	5ce3      	ldrb	r3, [r4, r3]
    169a:	2236      	movs	r2, #54	; 0x36
    169c:	5ca7      	ldrb	r7, [r4, r2]
    169e:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    16a0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    16a2:	7db5      	ldrb	r5, [r6, #22]
    16a4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    16a6:	07eb      	lsls	r3, r5, #31
    16a8:	d52e      	bpl.n	1708 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    16aa:	7963      	ldrb	r3, [r4, #5]
    16ac:	2b01      	cmp	r3, #1
    16ae:	d025      	beq.n	16fc <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    16b0:	2b00      	cmp	r3, #0
    16b2:	d129      	bne.n	1708 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    16b4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    16b6:	2b00      	cmp	r3, #0
    16b8:	d026      	beq.n	1708 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    16ba:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    16bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    16be:	7813      	ldrb	r3, [r2, #0]
    16c0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    16c2:	1c50      	adds	r0, r2, #1
    16c4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16c6:	79a0      	ldrb	r0, [r4, #6]
    16c8:	2801      	cmp	r0, #1
    16ca:	d100      	bne.n	16ce <_spi_interrupt_handler+0x42>
    16cc:	e06b      	b.n	17a6 <_spi_interrupt_handler+0x11a>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    16ce:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    16d0:	05db      	lsls	r3, r3, #23
    16d2:	0ddb      	lsrs	r3, r3, #23
    16d4:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    16d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    16d8:	3b01      	subs	r3, #1
    16da:	b29b      	uxth	r3, r3
    16dc:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    16de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    16e0:	b29b      	uxth	r3, r3
    16e2:	2b00      	cmp	r3, #0
    16e4:	d110      	bne.n	1708 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    16e6:	3301      	adds	r3, #1
    16e8:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    16ea:	7a63      	ldrb	r3, [r4, #9]
    16ec:	2b01      	cmp	r3, #1
    16ee:	d10b      	bne.n	1708 <_spi_interrupt_handler+0x7c>
    16f0:	79e3      	ldrb	r3, [r4, #7]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d108      	bne.n	1708 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16f6:	3302      	adds	r3, #2
    16f8:	75b3      	strb	r3, [r6, #22]
    16fa:	e005      	b.n	1708 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    16fc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    16fe:	2b00      	cmp	r3, #0
    1700:	d040      	beq.n	1784 <_spi_interrupt_handler+0xf8>
			(module->dir != SPI_DIRECTION_READ))
    1702:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1704:	2b00      	cmp	r3, #0
    1706:	d1d8      	bne.n	16ba <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1708:	076b      	lsls	r3, r5, #29
    170a:	d513      	bpl.n	1734 <_spi_interrupt_handler+0xa8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    170c:	8b73      	ldrh	r3, [r6, #26]
    170e:	075b      	lsls	r3, r3, #29
    1710:	d553      	bpl.n	17ba <_spi_interrupt_handler+0x12e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1712:	7a63      	ldrb	r3, [r4, #9]
    1714:	2b01      	cmp	r3, #1
    1716:	d008      	beq.n	172a <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1718:	221e      	movs	r2, #30
    171a:	2338      	movs	r3, #56	; 0x38
    171c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    171e:	3b35      	subs	r3, #53	; 0x35
    1720:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1722:	3302      	adds	r3, #2
    1724:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1726:	073b      	lsls	r3, r7, #28
    1728:	d443      	bmi.n	17b2 <_spi_interrupt_handler+0x126>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    172a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    172c:	8b73      	ldrh	r3, [r6, #26]
    172e:	2204      	movs	r2, #4
    1730:	4313      	orrs	r3, r2
    1732:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1734:	07ab      	lsls	r3, r5, #30
    1736:	d515      	bpl.n	1764 <_spi_interrupt_handler+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1738:	7963      	ldrb	r3, [r4, #5]
    173a:	2b00      	cmp	r3, #0
    173c:	d10e      	bne.n	175c <_spi_interrupt_handler+0xd0>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    173e:	3307      	adds	r3, #7
    1740:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1742:	3b05      	subs	r3, #5
    1744:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1746:	3301      	adds	r3, #1
    1748:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    174a:	2300      	movs	r3, #0
    174c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    174e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1750:	3338      	adds	r3, #56	; 0x38
    1752:	2200      	movs	r2, #0
    1754:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1756:	06fb      	lsls	r3, r7, #27
    1758:	d500      	bpl.n	175c <_spi_interrupt_handler+0xd0>
    175a:	e07f      	b.n	185c <_spi_interrupt_handler+0x1d0>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    175c:	7963      	ldrb	r3, [r4, #5]
    175e:	2b01      	cmp	r3, #1
    1760:	d100      	bne.n	1764 <_spi_interrupt_handler+0xd8>
    1762:	e07f      	b.n	1864 <_spi_interrupt_handler+0x1d8>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1764:	072b      	lsls	r3, r5, #28
    1766:	d508      	bpl.n	177a <_spi_interrupt_handler+0xee>
			if (module->mode == SPI_MODE_SLAVE) {
    1768:	7963      	ldrb	r3, [r4, #5]
    176a:	2b00      	cmp	r3, #0
    176c:	d105      	bne.n	177a <_spi_interrupt_handler+0xee>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    176e:	3308      	adds	r3, #8
    1770:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1772:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1774:	06bb      	lsls	r3, r7, #26
    1776:	d500      	bpl.n	177a <_spi_interrupt_handler+0xee>
    1778:	e08a      	b.n	1890 <_spi_interrupt_handler+0x204>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    177a:	b26d      	sxtb	r5, r5
    177c:	2d00      	cmp	r5, #0
    177e:	da00      	bge.n	1782 <_spi_interrupt_handler+0xf6>
    1780:	e08a      	b.n	1898 <_spi_interrupt_handler+0x20c>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1784:	4b4a      	ldr	r3, [pc, #296]	; (18b0 <_spi_interrupt_handler+0x224>)
    1786:	881b      	ldrh	r3, [r3, #0]
    1788:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    178a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    178c:	3b01      	subs	r3, #1
    178e:	b29b      	uxth	r3, r3
    1790:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1792:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1794:	b29b      	uxth	r3, r3
    1796:	2b00      	cmp	r3, #0
    1798:	d101      	bne.n	179e <_spi_interrupt_handler+0x112>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    179a:	3301      	adds	r3, #1
    179c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    179e:	7963      	ldrb	r3, [r4, #5]
		if (0
    17a0:	2b01      	cmp	r3, #1
    17a2:	d0ae      	beq.n	1702 <_spi_interrupt_handler+0x76>
    17a4:	e784      	b.n	16b0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    17a6:	7850      	ldrb	r0, [r2, #1]
    17a8:	0200      	lsls	r0, r0, #8
    17aa:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    17ac:	3202      	adds	r2, #2
    17ae:	62e2      	str	r2, [r4, #44]	; 0x2c
    17b0:	e78e      	b.n	16d0 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    17b2:	0020      	movs	r0, r4
    17b4:	69a3      	ldr	r3, [r4, #24]
    17b6:	4798      	blx	r3
    17b8:	e7b7      	b.n	172a <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    17ba:	7a63      	ldrb	r3, [r4, #9]
    17bc:	2b01      	cmp	r3, #1
    17be:	d027      	beq.n	1810 <_spi_interrupt_handler+0x184>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    17c0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    17c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17c4:	05db      	lsls	r3, r3, #23
    17c6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    17c8:	b2da      	uxtb	r2, r3
    17ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    17cc:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    17ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    17d0:	1c51      	adds	r1, r2, #1
    17d2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    17d4:	79a1      	ldrb	r1, [r4, #6]
    17d6:	2901      	cmp	r1, #1
    17d8:	d033      	beq.n	1842 <_spi_interrupt_handler+0x1b6>
	module->remaining_rx_buffer_length--;
    17da:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    17dc:	3b01      	subs	r3, #1
    17de:	b29b      	uxth	r3, r3
    17e0:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    17e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    17e4:	b29b      	uxth	r3, r3
    17e6:	2b00      	cmp	r3, #0
    17e8:	d1a4      	bne.n	1734 <_spi_interrupt_handler+0xa8>
					module->status = STATUS_OK;
    17ea:	2200      	movs	r2, #0
    17ec:	3338      	adds	r3, #56	; 0x38
    17ee:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    17f0:	3b34      	subs	r3, #52	; 0x34
    17f2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    17f4:	7a63      	ldrb	r3, [r4, #9]
    17f6:	2b02      	cmp	r3, #2
    17f8:	d029      	beq.n	184e <_spi_interrupt_handler+0x1c2>
					} else if (module->dir == SPI_DIRECTION_READ) {
    17fa:	7a63      	ldrb	r3, [r4, #9]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d000      	beq.n	1802 <_spi_interrupt_handler+0x176>
    1800:	e798      	b.n	1734 <_spi_interrupt_handler+0xa8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1802:	07bb      	lsls	r3, r7, #30
    1804:	d400      	bmi.n	1808 <_spi_interrupt_handler+0x17c>
    1806:	e795      	b.n	1734 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1808:	0020      	movs	r0, r4
    180a:	6923      	ldr	r3, [r4, #16]
    180c:	4798      	blx	r3
    180e:	e791      	b.n	1734 <_spi_interrupt_handler+0xa8>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1810:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1814:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1816:	3b01      	subs	r3, #1
    1818:	b29b      	uxth	r3, r3
    181a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    181c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    181e:	b29b      	uxth	r3, r3
    1820:	2b00      	cmp	r3, #0
    1822:	d000      	beq.n	1826 <_spi_interrupt_handler+0x19a>
    1824:	e786      	b.n	1734 <_spi_interrupt_handler+0xa8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1826:	3304      	adds	r3, #4
    1828:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    182a:	2200      	movs	r2, #0
    182c:	3334      	adds	r3, #52	; 0x34
    182e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1830:	3b35      	subs	r3, #53	; 0x35
    1832:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1834:	07fb      	lsls	r3, r7, #31
    1836:	d400      	bmi.n	183a <_spi_interrupt_handler+0x1ae>
    1838:	e77c      	b.n	1734 <_spi_interrupt_handler+0xa8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    183a:	0020      	movs	r0, r4
    183c:	68e3      	ldr	r3, [r4, #12]
    183e:	4798      	blx	r3
    1840:	e778      	b.n	1734 <_spi_interrupt_handler+0xa8>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1842:	0a1b      	lsrs	r3, r3, #8
    1844:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1848:	3301      	adds	r3, #1
    184a:	62a3      	str	r3, [r4, #40]	; 0x28
    184c:	e7c5      	b.n	17da <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    184e:	077b      	lsls	r3, r7, #29
    1850:	d400      	bmi.n	1854 <_spi_interrupt_handler+0x1c8>
    1852:	e76f      	b.n	1734 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1854:	0020      	movs	r0, r4
    1856:	6963      	ldr	r3, [r4, #20]
    1858:	4798      	blx	r3
    185a:	e76b      	b.n	1734 <_spi_interrupt_handler+0xa8>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    185c:	0020      	movs	r0, r4
    185e:	69e3      	ldr	r3, [r4, #28]
    1860:	4798      	blx	r3
    1862:	e77b      	b.n	175c <_spi_interrupt_handler+0xd0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1864:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1866:	2b01      	cmp	r3, #1
    1868:	d000      	beq.n	186c <_spi_interrupt_handler+0x1e0>
    186a:	e786      	b.n	177a <_spi_interrupt_handler+0xee>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    186c:	79e3      	ldrb	r3, [r4, #7]
    186e:	2b00      	cmp	r3, #0
    1870:	d000      	beq.n	1874 <_spi_interrupt_handler+0x1e8>
    1872:	e782      	b.n	177a <_spi_interrupt_handler+0xee>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1874:	3302      	adds	r3, #2
    1876:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1878:	3301      	adds	r3, #1
    187a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    187c:	2200      	movs	r2, #0
    187e:	3335      	adds	r3, #53	; 0x35
    1880:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1882:	07fb      	lsls	r3, r7, #31
    1884:	d400      	bmi.n	1888 <_spi_interrupt_handler+0x1fc>
    1886:	e76d      	b.n	1764 <_spi_interrupt_handler+0xd8>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1888:	0020      	movs	r0, r4
    188a:	68e3      	ldr	r3, [r4, #12]
    188c:	4798      	blx	r3
    188e:	e769      	b.n	1764 <_spi_interrupt_handler+0xd8>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1890:	0020      	movs	r0, r4
    1892:	6a23      	ldr	r3, [r4, #32]
    1894:	4798      	blx	r3
    1896:	e770      	b.n	177a <_spi_interrupt_handler+0xee>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1898:	2380      	movs	r3, #128	; 0x80
    189a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    189c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    189e:	067b      	lsls	r3, r7, #25
    18a0:	d400      	bmi.n	18a4 <_spi_interrupt_handler+0x218>
    18a2:	e76e      	b.n	1782 <_spi_interrupt_handler+0xf6>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    18a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    18a6:	0020      	movs	r0, r4
    18a8:	4798      	blx	r3
}
    18aa:	e76a      	b.n	1782 <_spi_interrupt_handler+0xf6>
    18ac:	20000210 	.word	0x20000210
    18b0:	2000021c 	.word	0x2000021c

000018b4 <detect_cube>:
extern volatile bool sensorsUpdate;

#define CUBE_MATCH_THRESHOLD 25


bool detect_cube(bool S0, bool S1, bool S2, uint8_t place) {
    18b4:	b510      	push	{r4, lr}
    18b6:	001c      	movs	r4, r3
	uint16_t value = 0;
	
	select_mux(S0, S1, S2);
    18b8:	4b0f      	ldr	r3, [pc, #60]	; (18f8 <detect_cube+0x44>)
    18ba:	4798      	blx	r3
	switch (place)
    18bc:	2c01      	cmp	r4, #1
    18be:	d00f      	beq.n	18e0 <detect_cube+0x2c>
    18c0:	2c00      	cmp	r4, #0
    18c2:	d005      	beq.n	18d0 <detect_cube+0x1c>
    18c4:	2c02      	cmp	r4, #2
    18c6:	d00f      	beq.n	18e8 <detect_cube+0x34>
    18c8:	2c03      	cmp	r4, #3
    18ca:	d011      	beq.n	18f0 <detect_cube+0x3c>
	uint16_t value = 0;
    18cc:	2300      	movs	r3, #0
    18ce:	e002      	b.n	18d6 <detect_cube+0x22>
	{
		case 0:
			value = read_ones();
    18d0:	4b0a      	ldr	r3, [pc, #40]	; (18fc <detect_cube+0x48>)
    18d2:	4798      	blx	r3
    18d4:	0003      	movs	r3, r0
    18d6:	2032      	movs	r0, #50	; 0x32
    18d8:	4298      	cmp	r0, r3
    18da:	4180      	sbcs	r0, r0
    18dc:	4240      	negs	r0, r0
	if (value > CUBE_DETECT_THRESHOLD) {
		return true;
	} else {
		return false;
	}
}
    18de:	bd10      	pop	{r4, pc}
			value = read_tens();
    18e0:	4b07      	ldr	r3, [pc, #28]	; (1900 <detect_cube+0x4c>)
    18e2:	4798      	blx	r3
    18e4:	0003      	movs	r3, r0
			break;
    18e6:	e7f6      	b.n	18d6 <detect_cube+0x22>
			value = read_hndrds();
    18e8:	4b06      	ldr	r3, [pc, #24]	; (1904 <detect_cube+0x50>)
    18ea:	4798      	blx	r3
    18ec:	0003      	movs	r3, r0
			break;
    18ee:	e7f2      	b.n	18d6 <detect_cube+0x22>
			value = read_misc();
    18f0:	4b05      	ldr	r3, [pc, #20]	; (1908 <detect_cube+0x54>)
    18f2:	4798      	blx	r3
    18f4:	0003      	movs	r3, r0
			break;
    18f6:	e7ee      	b.n	18d6 <detect_cube+0x22>
    18f8:	00001d49 	.word	0x00001d49
    18fc:	00001d91 	.word	0x00001d91
    1900:	00001da1 	.word	0x00001da1
    1904:	00001db1 	.word	0x00001db1
    1908:	00001dc1 	.word	0x00001dc1

0000190c <formatData>:
void formatData(uint32_t cubes_detected)
{
	uint8_t i = 0;
	uint32_t temp = 0;
	
	sensorsUpdate = true;
    190c:	4908      	ldr	r1, [pc, #32]	; (1930 <formatData+0x24>)
    190e:	2301      	movs	r3, #1
    1910:	700b      	strb	r3, [r1, #0]
	for(i=0;i<4;i++)
	{
		cubeOutputs[i] = (uint8_t)((cubes_detected >> (24 - 8*i)) & 0xFF) ;
    1912:	0e02      	lsrs	r2, r0, #24
    1914:	4b07      	ldr	r3, [pc, #28]	; (1934 <formatData+0x28>)
    1916:	701a      	strb	r2, [r3, #0]
    1918:	0c02      	lsrs	r2, r0, #16
    191a:	b2d2      	uxtb	r2, r2
    191c:	705a      	strb	r2, [r3, #1]
    191e:	0a02      	lsrs	r2, r0, #8
    1920:	b2d2      	uxtb	r2, r2
    1922:	709a      	strb	r2, [r3, #2]
    1924:	b2c0      	uxtb	r0, r0
    1926:	70d8      	strb	r0, [r3, #3]
	}
	sensorsUpdate = false;
    1928:	2300      	movs	r3, #0
    192a:	700b      	strb	r3, [r1, #0]
	
}
    192c:	4770      	bx	lr
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	20000184 	.word	0x20000184
    1934:	200002f8 	.word	0x200002f8

00001938 <filterData>:
{
	static uint32_t prevCubesDetected = 0;
	static uint16_t cubeMatchCount = 0;
	static uint32_t filteredValue = 0;
	
	if(cubes_detected == prevCubesDetected)
    1938:	4b0d      	ldr	r3, [pc, #52]	; (1970 <filterData+0x38>)
    193a:	681b      	ldr	r3, [r3, #0]
    193c:	4283      	cmp	r3, r0
    193e:	d007      	beq.n	1950 <filterData+0x18>
			filteredValue = cubes_detected;
		}
	}
	else
	{
		cubeMatchCount = 0;
    1940:	2200      	movs	r2, #0
    1942:	4b0c      	ldr	r3, [pc, #48]	; (1974 <filterData+0x3c>)
    1944:	801a      	strh	r2, [r3, #0]
	}
	prevCubesDetected = cubes_detected;
    1946:	4b0a      	ldr	r3, [pc, #40]	; (1970 <filterData+0x38>)
    1948:	6018      	str	r0, [r3, #0]
	return filteredValue;
    194a:	4b0b      	ldr	r3, [pc, #44]	; (1978 <filterData+0x40>)
    194c:	6818      	ldr	r0, [r3, #0]
}
    194e:	4770      	bx	lr
		cubeMatchCount ++;
    1950:	4b08      	ldr	r3, [pc, #32]	; (1974 <filterData+0x3c>)
    1952:	881b      	ldrh	r3, [r3, #0]
    1954:	3301      	adds	r3, #1
    1956:	b29b      	uxth	r3, r3
		if(cubeMatchCount > CUBE_MATCH_THRESHOLD)
    1958:	2b19      	cmp	r3, #25
    195a:	d802      	bhi.n	1962 <filterData+0x2a>
		cubeMatchCount ++;
    195c:	4a05      	ldr	r2, [pc, #20]	; (1974 <filterData+0x3c>)
    195e:	8013      	strh	r3, [r2, #0]
    1960:	e7f1      	b.n	1946 <filterData+0xe>
			cubeMatchCount =0;
    1962:	2200      	movs	r2, #0
    1964:	4b03      	ldr	r3, [pc, #12]	; (1974 <filterData+0x3c>)
    1966:	801a      	strh	r2, [r3, #0]
			filteredValue = cubes_detected;
    1968:	4b03      	ldr	r3, [pc, #12]	; (1978 <filterData+0x40>)
    196a:	6018      	str	r0, [r3, #0]
    196c:	e7eb      	b.n	1946 <filterData+0xe>
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	20000144 	.word	0x20000144
    1974:	2000013c 	.word	0x2000013c
    1978:	20000140 	.word	0x20000140

0000197c <read_all_values>:

/*
 * Reads through all different values, detects the cube, 
 * creates an number in the form of the values
 */
void read_all_values(){
    197c:	b5f0      	push	{r4, r5, r6, r7, lr}
    197e:	46de      	mov	lr, fp
    1980:	4657      	mov	r7, sl
    1982:	464e      	mov	r6, r9
    1984:	4645      	mov	r5, r8
    1986:	b5e0      	push	{r5, r6, r7, lr}
    1988:	b085      	sub	sp, #20
	uint8_t i, place;
	uint8_t ind;
	static bool S0;
	static bool S1;
	static bool S2;
    volatile bool cube = false;
    198a:	2200      	movs	r2, #0
    198c:	ab02      	add	r3, sp, #8
    198e:	71da      	strb	r2, [r3, #7]
	uint32_t cubes_detected = 0;
    1990:	2300      	movs	r3, #0
    1992:	4698      	mov	r8, r3
	uint32_t cubes_detected_filtered= 0;
	static uint32_t prev_cubes_detected_filtered = 0;
	
	for (i = 0; i < 8; i++)
    1994:	2600      	movs	r6, #0
    1996:	e023      	b.n	19e0 <read_all_values+0x64>
	{
		S0 = (bool) (i & 0x1);
		S1 = (bool) ((i >> 1) & 0x1);
		S2 = (bool) ((i >> 2) & 0x1);
		for (place = 0; place < 3; place++)
    1998:	3401      	adds	r4, #1
    199a:	b2e4      	uxtb	r4, r4
    199c:	350a      	adds	r5, #10
    199e:	b2ed      	uxtb	r5, r5
    19a0:	2c03      	cmp	r4, #3
    19a2:	d018      	beq.n	19d6 <read_all_values+0x5a>
		{
			ind = 2 + i + place*10;
			// Put boolean value from detect cube at place indicated by ind
			//delay_ms(10);
			cube = detect_cube(S0, S1, S2, place);
    19a4:	4653      	mov	r3, sl
    19a6:	781a      	ldrb	r2, [r3, #0]
    19a8:	464b      	mov	r3, r9
    19aa:	7819      	ldrb	r1, [r3, #0]
    19ac:	7838      	ldrb	r0, [r7, #0]
    19ae:	0023      	movs	r3, r4
    19b0:	4e33      	ldr	r6, [pc, #204]	; (1a80 <read_all_values+0x104>)
    19b2:	47b0      	blx	r6
    19b4:	ab02      	add	r3, sp, #8
    19b6:	71d8      	strb	r0, [r3, #7]
    19b8:	3307      	adds	r3, #7
			//delay_ms(10);
			if(cube == true)
    19ba:	781b      	ldrb	r3, [r3, #0]
    19bc:	2b00      	cmp	r3, #0
    19be:	d0eb      	beq.n	1998 <read_all_values+0x1c>
			{
				cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    19c0:	ab02      	add	r3, sp, #8
    19c2:	1dda      	adds	r2, r3, #7
    19c4:	79db      	ldrb	r3, [r3, #7]
    19c6:	b2db      	uxtb	r3, r3
    19c8:	40ab      	lsls	r3, r5
    19ca:	4641      	mov	r1, r8
    19cc:	4319      	orrs	r1, r3
    19ce:	4688      	mov	r8, r1
				cube = false;
    19d0:	2300      	movs	r3, #0
    19d2:	7013      	strb	r3, [r2, #0]
    19d4:	e7e0      	b.n	1998 <read_all_values+0x1c>
    19d6:	9e01      	ldr	r6, [sp, #4]
	for (i = 0; i < 8; i++)
    19d8:	3601      	adds	r6, #1
    19da:	b2f6      	uxtb	r6, r6
    19dc:	2e08      	cmp	r6, #8
    19de:	d014      	beq.n	1a0a <read_all_values+0x8e>
		S0 = (bool) (i & 0x1);
    19e0:	2301      	movs	r3, #1
    19e2:	001a      	movs	r2, r3
    19e4:	4032      	ands	r2, r6
    19e6:	4927      	ldr	r1, [pc, #156]	; (1a84 <read_all_values+0x108>)
    19e8:	700a      	strb	r2, [r1, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    19ea:	0872      	lsrs	r2, r6, #1
    19ec:	401a      	ands	r2, r3
    19ee:	4926      	ldr	r1, [pc, #152]	; (1a88 <read_all_values+0x10c>)
    19f0:	700a      	strb	r2, [r1, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    19f2:	08b2      	lsrs	r2, r6, #2
    19f4:	4013      	ands	r3, r2
    19f6:	4a25      	ldr	r2, [pc, #148]	; (1a8c <read_all_values+0x110>)
    19f8:	7013      	strb	r3, [r2, #0]
    19fa:	1cb5      	adds	r5, r6, #2
    19fc:	b2ed      	uxtb	r5, r5
		for (place = 0; place < 3; place++)
    19fe:	2400      	movs	r4, #0
			cube = detect_cube(S0, S1, S2, place);
    1a00:	4692      	mov	sl, r2
    1a02:	4689      	mov	r9, r1
    1a04:	4f1f      	ldr	r7, [pc, #124]	; (1a84 <read_all_values+0x108>)
    1a06:	9601      	str	r6, [sp, #4]
    1a08:	e7cc      	b.n	19a4 <read_all_values+0x28>
    1a0a:	2400      	movs	r4, #0
		}
	}
	
	for (i = 0; i < 6; i++)
	{
		S0 = (bool) (i & 0x1);
    1a0c:	4b1d      	ldr	r3, [pc, #116]	; (1a84 <read_all_values+0x108>)
    1a0e:	4699      	mov	r9, r3
		S1 = (bool) ((i >> 1) & 0x1);
    1a10:	4f1d      	ldr	r7, [pc, #116]	; (1a88 <read_all_values+0x10c>)
		S2 = (bool) ((i >> 2) & 0x1);
    1a12:	4b1e      	ldr	r3, [pc, #120]	; (1a8c <read_all_values+0x110>)
    1a14:	469b      	mov	fp, r3
    1a16:	4645      	mov	r5, r8
		S0 = (bool) (i & 0x1);
    1a18:	2201      	movs	r2, #1
    1a1a:	0010      	movs	r0, r2
    1a1c:	4020      	ands	r0, r4
    1a1e:	464b      	mov	r3, r9
    1a20:	7018      	strb	r0, [r3, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    1a22:	0863      	lsrs	r3, r4, #1
    1a24:	0011      	movs	r1, r2
    1a26:	4019      	ands	r1, r3
    1a28:	7039      	strb	r1, [r7, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    1a2a:	08a6      	lsrs	r6, r4, #2
    1a2c:	4032      	ands	r2, r6
    1a2e:	465e      	mov	r6, fp
    1a30:	7032      	strb	r2, [r6, #0]
		place = 3;
		ind = i + ((i/2)*8);
    1a32:	00db      	lsls	r3, r3, #3
    1a34:	18e3      	adds	r3, r4, r3
    1a36:	b2db      	uxtb	r3, r3
    1a38:	4698      	mov	r8, r3
		// Put boolean value from detect cube at place indicated by ind
		cube = detect_cube(S0, S1, S2, place);
    1a3a:	2303      	movs	r3, #3
    1a3c:	4e10      	ldr	r6, [pc, #64]	; (1a80 <read_all_values+0x104>)
    1a3e:	47b0      	blx	r6
    1a40:	ab02      	add	r3, sp, #8
    1a42:	71d8      	strb	r0, [r3, #7]
    1a44:	3307      	adds	r3, #7
		cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    1a46:	781b      	ldrb	r3, [r3, #0]
    1a48:	b2db      	uxtb	r3, r3
    1a4a:	4642      	mov	r2, r8
    1a4c:	4093      	lsls	r3, r2
    1a4e:	431d      	orrs	r5, r3
	for (i = 0; i < 6; i++)
    1a50:	3401      	adds	r4, #1
    1a52:	b2e4      	uxtb	r4, r4
    1a54:	2c06      	cmp	r4, #6
    1a56:	d1df      	bne.n	1a18 <read_all_values+0x9c>
	}
	
	cubes_detected_filtered = filterData(cubes_detected); // If the cube is placed there for 200 msec than assume that we have a cube there
    1a58:	0028      	movs	r0, r5
    1a5a:	4b0d      	ldr	r3, [pc, #52]	; (1a90 <read_all_values+0x114>)
    1a5c:	4798      	blx	r3
    1a5e:	0004      	movs	r4, r0
	 
	if(cubes_detected_filtered != prev_cubes_detected_filtered)
    1a60:	4b0c      	ldr	r3, [pc, #48]	; (1a94 <read_all_values+0x118>)
    1a62:	681b      	ldr	r3, [r3, #0]
    1a64:	4298      	cmp	r0, r3
    1a66:	d001      	beq.n	1a6c <read_all_values+0xf0>
	{
		formatData(cubes_detected_filtered);
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <read_all_values+0x11c>)
    1a6a:	4798      	blx	r3
	}
	prev_cubes_detected_filtered = cubes_detected_filtered;
    1a6c:	4b09      	ldr	r3, [pc, #36]	; (1a94 <read_all_values+0x118>)
    1a6e:	601c      	str	r4, [r3, #0]
}
    1a70:	b005      	add	sp, #20
    1a72:	bc3c      	pop	{r2, r3, r4, r5}
    1a74:	4690      	mov	r8, r2
    1a76:	4699      	mov	r9, r3
    1a78:	46a2      	mov	sl, r4
    1a7a:	46ab      	mov	fp, r5
    1a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	000018b5 	.word	0x000018b5
    1a84:	20000138 	.word	0x20000138
    1a88:	20000139 	.word	0x20000139
    1a8c:	2000013a 	.word	0x2000013a
    1a90:	00001939 	.word	0x00001939
    1a94:	20000148 	.word	0x20000148
    1a98:	0000190d 	.word	0x0000190d

00001a9c <i2c_read_request_callback>:
	state = port_pin_get_input_level(DETECT_PIN);
	return state;
}

void i2c_read_request_callback(struct i2c_slave_module *const module)
{
    1a9c:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1a9e:	4b10      	ldr	r3, [pc, #64]	; (1ae0 <i2c_read_request_callback+0x44>)
    1aa0:	6a1b      	ldr	r3, [r3, #32]
	static uint8_t count = 0;
	static uint8_t tempCubeOutputs[4];
	if( port_pin_get_input_level(DETECT_PIN) == false)
    1aa2:	01db      	lsls	r3, r3, #7
    1aa4:	d415      	bmi.n	1ad2 <i2c_read_request_callback+0x36>
	{
		
		//delay_cycles_us(2);
		if(sensorsUpdate == false)
    1aa6:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <i2c_read_request_callback+0x48>)
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	2b00      	cmp	r3, #0
    1aac:	d109      	bne.n	1ac2 <i2c_read_request_callback+0x26>
		{
			tempCubeOutputs[0]	   = cubeOutputs[0];
    1aae:	4a0e      	ldr	r2, [pc, #56]	; (1ae8 <i2c_read_request_callback+0x4c>)
    1ab0:	7811      	ldrb	r1, [r2, #0]
    1ab2:	4b0e      	ldr	r3, [pc, #56]	; (1aec <i2c_read_request_callback+0x50>)
    1ab4:	7019      	strb	r1, [r3, #0]
			tempCubeOutputs[1]	   = cubeOutputs[1];
    1ab6:	7851      	ldrb	r1, [r2, #1]
    1ab8:	7059      	strb	r1, [r3, #1]
			tempCubeOutputs[2]	   = cubeOutputs[2];
    1aba:	7891      	ldrb	r1, [r2, #2]
    1abc:	7099      	strb	r1, [r3, #2]
			tempCubeOutputs[3]	   = cubeOutputs[3];
    1abe:	78d2      	ldrb	r2, [r2, #3]
    1ac0:	70da      	strb	r2, [r3, #3]
			//tempCubeOutputs[2]	   = 0x77;
			//tempCubeOutputs[3]	   = 0x11;
		}
		
		//rd_packet.data_length = DATA_LENGTH_SENSORS;
		rd_packet.data_length = DATA_LENGTH_SENSORS;
    1ac2:	490b      	ldr	r1, [pc, #44]	; (1af0 <i2c_read_request_callback+0x54>)
    1ac4:	2304      	movs	r3, #4
    1ac6:	800b      	strh	r3, [r1, #0]
		rd_packet.data        = tempCubeOutputs;
    1ac8:	4b08      	ldr	r3, [pc, #32]	; (1aec <i2c_read_request_callback+0x50>)
    1aca:	604b      	str	r3, [r1, #4]
		i2c_slave_write_packet_job(module, &rd_packet);
    1acc:	4b09      	ldr	r3, [pc, #36]	; (1af4 <i2c_read_request_callback+0x58>)
    1ace:	4798      	blx	r3
		rd_packet.data        = tempCubeOutputs;
		//i2c_slave_write_packet_job(module, &rd_packet);
	}
	
	
}
    1ad0:	bd10      	pop	{r4, pc}
		rd_packet.data_length = 0;
    1ad2:	4b07      	ldr	r3, [pc, #28]	; (1af0 <i2c_read_request_callback+0x54>)
    1ad4:	2200      	movs	r2, #0
    1ad6:	801a      	strh	r2, [r3, #0]
		rd_packet.data        = tempCubeOutputs;
    1ad8:	4a04      	ldr	r2, [pc, #16]	; (1aec <i2c_read_request_callback+0x50>)
    1ada:	605a      	str	r2, [r3, #4]
}
    1adc:	e7f8      	b.n	1ad0 <i2c_read_request_callback+0x34>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	41004400 	.word	0x41004400
    1ae4:	20000184 	.word	0x20000184
    1ae8:	200002f8 	.word	0x200002f8
    1aec:	2000014c 	.word	0x2000014c
    1af0:	20000228 	.word	0x20000228
    1af4:	00000feb 	.word	0x00000feb

00001af8 <configure_i2c_slave>:
	
}

//! [initialize_i2c]
void configure_i2c_slave(void)
{
    1af8:	b530      	push	{r4, r5, lr}
    1afa:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    1afc:	2200      	movs	r2, #0
    1afe:	466b      	mov	r3, sp
    1b00:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    1b02:	2380      	movs	r3, #128	; 0x80
    1b04:	039b      	lsls	r3, r3, #14
    1b06:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
    1b08:	2301      	movs	r3, #1
    1b0a:	425b      	negs	r3, r3
    1b0c:	4669      	mov	r1, sp
    1b0e:	810b      	strh	r3, [r1, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    1b10:	2300      	movs	r3, #0
    1b12:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
    1b14:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    1b16:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
    1b18:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    1b1a:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    1b1c:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby = false;
    1b1e:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1b20:	2224      	movs	r2, #36	; 0x24
    1b22:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1b24:	3201      	adds	r2, #1
    1b26:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1b28:	3201      	adds	r2, #1
    1b2a:	548b      	strb	r3, [r1, r2]
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
    
	config_i2c_slave.generator_source = GCLK_GENERATOR_3;
    1b2c:	2303      	movs	r3, #3
    1b2e:	466a      	mov	r2, sp
    1b30:	764b      	strb	r3, [r1, #25]
	config_i2c_slave.address      = SLAVE_ADDRESS;
    1b32:	330f      	adds	r3, #15
    1b34:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
	
	config_i2c_slave.pinmux_pad0 =  PINMUX_PA22D_SERCOM2_PAD0;
    1b36:	4b0f      	ldr	r3, [pc, #60]	; (1b74 <configure_i2c_slave+0x7c>)
    1b38:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 =  PINMUX_PA23D_SERCOM2_PAD1;
    1b3a:	4b0f      	ldr	r3, [pc, #60]	; (1b78 <configure_i2c_slave+0x80>)
    1b3c:	9308      	str	r3, [sp, #32]
	
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE , &config_i2c_slave);
    1b3e:	4d0f      	ldr	r5, [pc, #60]	; (1b7c <configure_i2c_slave+0x84>)
    1b40:	490f      	ldr	r1, [pc, #60]	; (1b80 <configure_i2c_slave+0x88>)
    1b42:	0028      	movs	r0, r5
    1b44:	4b0f      	ldr	r3, [pc, #60]	; (1b84 <configure_i2c_slave+0x8c>)
    1b46:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1b48:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b4a:	0020      	movs	r0, r4
    1b4c:	4b0e      	ldr	r3, [pc, #56]	; (1b88 <configure_i2c_slave+0x90>)
    1b4e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b50:	231f      	movs	r3, #31
    1b52:	4018      	ands	r0, r3
    1b54:	3b1e      	subs	r3, #30
    1b56:	4083      	lsls	r3, r0
    1b58:	4a0c      	ldr	r2, [pc, #48]	; (1b8c <configure_i2c_slave+0x94>)
    1b5a:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1b5c:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    1b5e:	2203      	movs	r2, #3
    1b60:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    1b62:	421a      	tst	r2, r3
    1b64:	d1fc      	bne.n	1b60 <configure_i2c_slave+0x68>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1b66:	6823      	ldr	r3, [r4, #0]
    1b68:	2202      	movs	r2, #2
    1b6a:	4313      	orrs	r3, r2
    1b6c:	6023      	str	r3, [r4, #0]
	i2c_slave_enable(&i2c_slave_instance);
	
}
    1b6e:	b00b      	add	sp, #44	; 0x2c
    1b70:	bd30      	pop	{r4, r5, pc}
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	00160003 	.word	0x00160003
    1b78:	00170003 	.word	0x00170003
    1b7c:	20000230 	.word	0x20000230
    1b80:	42001000 	.word	0x42001000
    1b84:	00000e41 	.word	0x00000e41
    1b88:	00001429 	.word	0x00001429
    1b8c:	e000e100 	.word	0xe000e100

00001b90 <configure_i2c_slave_callbacks>:

void configure_i2c_slave_callbacks(void)
{
    1b90:	b510      	push	{r4, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,I2C_SLAVE_CALLBACK_READ_REQUEST);
    1b92:	4c07      	ldr	r4, [pc, #28]	; (1bb0 <configure_i2c_slave_callbacks+0x20>)
    1b94:	2202      	movs	r2, #2
    1b96:	4907      	ldr	r1, [pc, #28]	; (1bb4 <configure_i2c_slave_callbacks+0x24>)
    1b98:	0020      	movs	r0, r4
    1b9a:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <configure_i2c_slave_callbacks+0x28>)
    1b9c:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1b9e:	2225      	movs	r2, #37	; 0x25
    1ba0:	5ca3      	ldrb	r3, [r4, r2]
    1ba2:	2104      	movs	r1, #4
    1ba4:	430b      	orrs	r3, r1
    1ba6:	54a3      	strb	r3, [r4, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1ba8:	6823      	ldr	r3, [r4, #0]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    1baa:	3a23      	subs	r2, #35	; 0x23
    1bac:	759a      	strb	r2, [r3, #22]
	i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_READ_REQUEST);
}
    1bae:	bd10      	pop	{r4, pc}
    1bb0:	20000230 	.word	0x20000230
    1bb4:	00001a9d 	.word	0x00001a9d
    1bb8:	00000fd1 	.word	0x00000fd1

00001bbc <configure_adc>:

struct adc_module adc_instance;
uint16_t* adc_result = NULL;

void configure_adc()
{
    1bbc:	b510      	push	{r4, lr}
    1bbe:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1bc0:	4668      	mov	r0, sp
    1bc2:	4b1a      	ldr	r3, [pc, #104]	; (1c2c <configure_adc+0x70>)
    1bc4:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    1bc6:	2002      	movs	r0, #2
    1bc8:	4b19      	ldr	r3, [pc, #100]	; (1c30 <configure_adc+0x74>)
    1bca:	4798      	blx	r3
    1bcc:	4b19      	ldr	r3, [pc, #100]	; (1c34 <configure_adc+0x78>)
    1bce:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1bd0:	2301      	movs	r3, #1
    1bd2:	466a      	mov	r2, sp
    1bd4:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CTRLB_PRESCALER_DIV256;
    1bd6:	22c0      	movs	r2, #192	; 0xc0
    1bd8:	00d2      	lsls	r2, r2, #3
    1bda:	4669      	mov	r1, sp
    1bdc:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    1bde:	2206      	movs	r2, #6
    1be0:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1be2:	22c0      	movs	r2, #192	; 0xc0
    1be4:	0152      	lsls	r2, r2, #5
    1be6:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    1be8:	2230      	movs	r2, #48	; 0x30
    1bea:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    1bec:	466a      	mov	r2, sp
    1bee:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
    1bf0:	4c11      	ldr	r4, [pc, #68]	; (1c38 <configure_adc+0x7c>)
    1bf2:	4912      	ldr	r1, [pc, #72]	; (1c3c <configure_adc+0x80>)
    1bf4:	0020      	movs	r0, r4
    1bf6:	4b12      	ldr	r3, [pc, #72]	; (1c40 <configure_adc+0x84>)
    1bf8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1bfa:	6822      	ldr	r2, [r4, #0]
    1bfc:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1bfe:	b25b      	sxtb	r3, r3
    1c00:	2b00      	cmp	r3, #0
    1c02:	dbfb      	blt.n	1bfc <configure_adc+0x40>
    1c04:	2180      	movs	r1, #128	; 0x80
    1c06:	0209      	lsls	r1, r1, #8
    1c08:	4b0e      	ldr	r3, [pc, #56]	; (1c44 <configure_adc+0x88>)
    1c0a:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1c0c:	230f      	movs	r3, #15
    1c0e:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1c10:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1c12:	7813      	ldrb	r3, [r2, #0]
    1c14:	2102      	movs	r1, #2
    1c16:	430b      	orrs	r3, r1
    1c18:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1c1a:	4b07      	ldr	r3, [pc, #28]	; (1c38 <configure_adc+0x7c>)
    1c1c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c1e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1c20:	b25b      	sxtb	r3, r3
    1c22:	2b00      	cmp	r3, #0
    1c24:	dbfb      	blt.n	1c1e <configure_adc+0x62>
	adc_enable(&adc_instance);
}
    1c26:	b00c      	add	sp, #48	; 0x30
    1c28:	bd10      	pop	{r4, pc}
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	00000581 	.word	0x00000581
    1c30:	00002bc5 	.word	0x00002bc5
    1c34:	20000150 	.word	0x20000150
    1c38:	20000264 	.word	0x20000264
    1c3c:	42002000 	.word	0x42002000
    1c40:	000005c9 	.word	0x000005c9
    1c44:	e000e100 	.word	0xe000e100

00001c48 <configure_mux_select>:

void configure_mux_select() {
    1c48:	b530      	push	{r4, r5, lr}
    1c4a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1c4c:	ac01      	add	r4, sp, #4
    1c4e:	2301      	movs	r3, #1
    1c50:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1c52:	2200      	movs	r2, #0
    1c54:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c56:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MUX_S0, &config_port_pin);
    1c58:	0021      	movs	r1, r4
    1c5a:	200f      	movs	r0, #15
    1c5c:	4d04      	ldr	r5, [pc, #16]	; (1c70 <configure_mux_select+0x28>)
    1c5e:	47a8      	blx	r5
	port_pin_set_config(MUX_S1, &config_port_pin);
    1c60:	0021      	movs	r1, r4
    1c62:	2010      	movs	r0, #16
    1c64:	47a8      	blx	r5
	port_pin_set_config(MUX_S2, &config_port_pin);
    1c66:	0021      	movs	r1, r4
    1c68:	2011      	movs	r0, #17
    1c6a:	47a8      	blx	r5
}
    1c6c:	b003      	add	sp, #12
    1c6e:	bd30      	pop	{r4, r5, pc}
    1c70:	00000e1d 	.word	0x00000e1d

00001c74 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    1c74:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    1c76:	4b2d      	ldr	r3, [pc, #180]	; (1d2c <adc_start_read_result+0xb8>)
    1c78:	6819      	ldr	r1, [r3, #0]
    1c7a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c7c:	b25b      	sxtb	r3, r3
    1c7e:	2b00      	cmp	r3, #0
    1c80:	dbfb      	blt.n	1c7a <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1c82:	690b      	ldr	r3, [r1, #16]
    1c84:	221f      	movs	r2, #31
    1c86:	4393      	bics	r3, r2
    1c88:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    1c8a:	6108      	str	r0, [r1, #16]
    1c8c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c8e:	b25b      	sxtb	r3, r3
    1c90:	2b00      	cmp	r3, #0
    1c92:	dbfb      	blt.n	1c8c <adc_start_read_result+0x18>
    1c94:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c96:	b25b      	sxtb	r3, r3
    1c98:	2b00      	cmp	r3, #0
    1c9a:	dbfb      	blt.n	1c94 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1c9c:	7b0b      	ldrb	r3, [r1, #12]
    1c9e:	2202      	movs	r2, #2
    1ca0:	4313      	orrs	r3, r2
    1ca2:	730b      	strb	r3, [r1, #12]
    1ca4:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1ca6:	b25b      	sxtb	r3, r3
    1ca8:	2b00      	cmp	r3, #0
    1caa:	dbfb      	blt.n	1ca4 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1cac:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1cae:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1cb0:	2402      	movs	r4, #2
    1cb2:	e001      	b.n	1cb8 <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    1cb4:	4210      	tst	r0, r2
    1cb6:	d10a      	bne.n	1cce <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1cb8:	7e0b      	ldrb	r3, [r1, #24]
    1cba:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1cbc:	0002      	movs	r2, r0
    1cbe:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1cc0:	421d      	tst	r5, r3
    1cc2:	d000      	beq.n	1cc6 <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    1cc4:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1cc6:	421c      	tst	r4, r3
    1cc8:	d0f4      	beq.n	1cb4 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    1cca:	432a      	orrs	r2, r5
    1ccc:	e7f2      	b.n	1cb4 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1cce:	7e0a      	ldrb	r2, [r1, #24]
    1cd0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1cd2:	2301      	movs	r3, #1
    1cd4:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1cd6:	0750      	lsls	r0, r2, #29
    1cd8:	d501      	bpl.n	1cde <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    1cda:	2002      	movs	r0, #2
    1cdc:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1cde:	0792      	lsls	r2, r2, #30
    1ce0:	d501      	bpl.n	1ce6 <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    1ce2:	2204      	movs	r2, #4
    1ce4:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1ce6:	07db      	lsls	r3, r3, #31
    1ce8:	d403      	bmi.n	1cf2 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    1cea:	4b11      	ldr	r3, [pc, #68]	; (1d30 <adc_start_read_result+0xbc>)
    1cec:	681b      	ldr	r3, [r3, #0]
	return temp;
    1cee:	8818      	ldrh	r0, [r3, #0]
}
    1cf0:	bd30      	pop	{r4, r5, pc}
    1cf2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1cf4:	b25b      	sxtb	r3, r3
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	dbfb      	blt.n	1cf2 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    1cfa:	4b0d      	ldr	r3, [pc, #52]	; (1d30 <adc_start_read_result+0xbc>)
    1cfc:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1cfe:	8b4a      	ldrh	r2, [r1, #26]
    1d00:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    1d02:	4b0a      	ldr	r3, [pc, #40]	; (1d2c <adc_start_read_result+0xb8>)
    1d04:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    1d06:	2301      	movs	r3, #1
    1d08:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1d0a:	7e0a      	ldrb	r2, [r1, #24]
    1d0c:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1d0e:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1d10:	0750      	lsls	r0, r2, #29
    1d12:	d501      	bpl.n	1d18 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    1d14:	2002      	movs	r0, #2
    1d16:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1d18:	0792      	lsls	r2, r2, #30
    1d1a:	d501      	bpl.n	1d20 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    1d1c:	2204      	movs	r2, #4
    1d1e:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1d20:	075b      	lsls	r3, r3, #29
    1d22:	d5e2      	bpl.n	1cea <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    1d24:	2302      	movs	r3, #2
    1d26:	760b      	strb	r3, [r1, #24]
    1d28:	e7df      	b.n	1cea <adc_start_read_result+0x76>
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	20000264 	.word	0x20000264
    1d30:	20000150 	.word	0x20000150

00001d34 <ir_sensor_init>:

void ir_sensor_init()
{
    1d34:	b510      	push	{r4, lr}
	configure_adc();
    1d36:	4b02      	ldr	r3, [pc, #8]	; (1d40 <ir_sensor_init+0xc>)
    1d38:	4798      	blx	r3
	configure_mux_select();
    1d3a:	4b02      	ldr	r3, [pc, #8]	; (1d44 <ir_sensor_init+0x10>)
    1d3c:	4798      	blx	r3
}
    1d3e:	bd10      	pop	{r4, pc}
    1d40:	00001bbd 	.word	0x00001bbd
    1d44:	00001c49 	.word	0x00001c49

00001d48 <select_mux>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1d48:	2800      	cmp	r0, #0
    1d4a:	d010      	beq.n	1d6e <select_mux+0x26>
		port_base->OUTSET.reg = pin_mask;
    1d4c:	2080      	movs	r0, #128	; 0x80
    1d4e:	0200      	lsls	r0, r0, #8
    1d50:	4b0e      	ldr	r3, [pc, #56]	; (1d8c <select_mux+0x44>)
    1d52:	6198      	str	r0, [r3, #24]
	if (level) {
    1d54:	2900      	cmp	r1, #0
    1d56:	d00f      	beq.n	1d78 <select_mux+0x30>
		port_base->OUTSET.reg = pin_mask;
    1d58:	2180      	movs	r1, #128	; 0x80
    1d5a:	0249      	lsls	r1, r1, #9
    1d5c:	4b0b      	ldr	r3, [pc, #44]	; (1d8c <select_mux+0x44>)
    1d5e:	6199      	str	r1, [r3, #24]
	if (level) {
    1d60:	2a00      	cmp	r2, #0
    1d62:	d10e      	bne.n	1d82 <select_mux+0x3a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d64:	2280      	movs	r2, #128	; 0x80
    1d66:	0292      	lsls	r2, r2, #10
    1d68:	4b08      	ldr	r3, [pc, #32]	; (1d8c <select_mux+0x44>)
    1d6a:	615a      	str	r2, [r3, #20]

void select_mux(const bool S0, const bool S1, const bool S2) {
	port_pin_set_output_level(MUX_S0, S0);
	port_pin_set_output_level(MUX_S1, S1);
	port_pin_set_output_level(MUX_S2, S2);
}
    1d6c:	4770      	bx	lr
    1d6e:	2080      	movs	r0, #128	; 0x80
    1d70:	0200      	lsls	r0, r0, #8
    1d72:	4b06      	ldr	r3, [pc, #24]	; (1d8c <select_mux+0x44>)
    1d74:	6158      	str	r0, [r3, #20]
    1d76:	e7ed      	b.n	1d54 <select_mux+0xc>
    1d78:	2180      	movs	r1, #128	; 0x80
    1d7a:	0249      	lsls	r1, r1, #9
    1d7c:	4b03      	ldr	r3, [pc, #12]	; (1d8c <select_mux+0x44>)
    1d7e:	6159      	str	r1, [r3, #20]
    1d80:	e7ee      	b.n	1d60 <select_mux+0x18>
		port_base->OUTSET.reg = pin_mask;
    1d82:	2280      	movs	r2, #128	; 0x80
    1d84:	0292      	lsls	r2, r2, #10
    1d86:	4b01      	ldr	r3, [pc, #4]	; (1d8c <select_mux+0x44>)
    1d88:	619a      	str	r2, [r3, #24]
    1d8a:	e7ef      	b.n	1d6c <select_mux+0x24>
    1d8c:	41004400 	.word	0x41004400

00001d90 <read_ones>:

uint16_t read_ones() {
    1d90:	b510      	push	{r4, lr}
	return adc_start_read_result(ONES_CHANNEL);
    1d92:	2000      	movs	r0, #0
    1d94:	4b01      	ldr	r3, [pc, #4]	; (1d9c <read_ones+0xc>)
    1d96:	4798      	blx	r3
}
    1d98:	bd10      	pop	{r4, pc}
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	00001c75 	.word	0x00001c75

00001da0 <read_tens>:

uint16_t read_tens() {
    1da0:	b510      	push	{r4, lr}
	return adc_start_read_result(TENS_CHANNEL);
    1da2:	2004      	movs	r0, #4
    1da4:	4b01      	ldr	r3, [pc, #4]	; (1dac <read_tens+0xc>)
    1da6:	4798      	blx	r3
}
    1da8:	bd10      	pop	{r4, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	00001c75 	.word	0x00001c75

00001db0 <read_hndrds>:

uint16_t read_hndrds() {
    1db0:	b510      	push	{r4, lr}
	return adc_start_read_result(HNDRDS_CHANNEL);
    1db2:	2003      	movs	r0, #3
    1db4:	4b01      	ldr	r3, [pc, #4]	; (1dbc <read_hndrds+0xc>)
    1db6:	4798      	blx	r3
}
    1db8:	bd10      	pop	{r4, pc}
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	00001c75 	.word	0x00001c75

00001dc0 <read_misc>:

uint16_t read_misc() {
    1dc0:	b510      	push	{r4, lr}
	return adc_start_read_result(MISC_CHANNEL);
    1dc2:	2002      	movs	r0, #2
    1dc4:	4b01      	ldr	r3, [pc, #4]	; (1dcc <read_misc+0xc>)
    1dc6:	4798      	blx	r3
    1dc8:	bd10      	pop	{r4, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	00001c75 	.word	0x00001c75

00001dd0 <transfer_done>:
	
}

static void transfer_done(struct dma_resource* const resource )
{
	transferDone = true;
    1dd0:	2201      	movs	r2, #1
    1dd2:	4b01      	ldr	r3, [pc, #4]	; (1dd8 <transfer_done+0x8>)
    1dd4:	701a      	strb	r2, [r3, #0]
}
    1dd6:	4770      	bx	lr
    1dd8:	20000185 	.word	0x20000185

00001ddc <sourceRegisterInit>:
{
    1ddc:	2300      	movs	r3, #0
		DMASourceRegister[i]	=	0x00;
    1dde:	490a      	ldr	r1, [pc, #40]	; (1e08 <sourceRegisterInit+0x2c>)
    1de0:	2200      	movs	r2, #0
    1de2:	54ca      	strb	r2, [r1, r3]
    1de4:	3301      	adds	r3, #1
	for(i=0;i<STARTZEROS;i++)
    1de6:	2b60      	cmp	r3, #96	; 0x60
    1de8:	d1fb      	bne.n	1de2 <sourceRegisterInit+0x6>
		DMASourceRegister[i]	=	0x88;
    1dea:	4907      	ldr	r1, [pc, #28]	; (1e08 <sourceRegisterInit+0x2c>)
    1dec:	2288      	movs	r2, #136	; 0x88
    1dee:	54ca      	strb	r2, [r1, r3]
    1df0:	3301      	adds	r3, #1
	for(i=STARTZEROS;i<STARTZEROS + NOLEDS*NoBytesLED ;i++)
    1df2:	2b84      	cmp	r3, #132	; 0x84
    1df4:	d1fb      	bne.n	1dee <sourceRegisterInit+0x12>
    1df6:	3b60      	subs	r3, #96	; 0x60
		DMASourceRegister[i]    =   0x00;
    1df8:	4903      	ldr	r1, [pc, #12]	; (1e08 <sourceRegisterInit+0x2c>)
    1dfa:	2200      	movs	r2, #0
    1dfc:	54ca      	strb	r2, [r1, r3]
    1dfe:	3301      	adds	r3, #1
	for(i=NOLEDS*NoBytesLED;i<STARTZEROS;i++)
    1e00:	2b60      	cmp	r3, #96	; 0x60
    1e02:	d1fb      	bne.n	1dfc <sourceRegisterInit+0x20>
}
    1e04:	4770      	bx	lr
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	200002fc 	.word	0x200002fc

00001e0c <setup_DMA>:
	dma_descriptor_create(descriptor, &descriptor_config);

}

void setup_DMA()
{
    1e0c:	b570      	push	{r4, r5, r6, lr}
    1e0e:	b086      	sub	sp, #24
	dma_get_config_defaults(&config);
    1e10:	4668      	mov	r0, sp
    1e12:	4b1d      	ldr	r3, [pc, #116]	; (1e88 <setup_DMA+0x7c>)
    1e14:	4798      	blx	r3
	config.peripheral_trigger = SERCOM0_DMAC_ID_TX;
    1e16:	2302      	movs	r3, #2
    1e18:	2602      	movs	r6, #2
    1e1a:	466a      	mov	r2, sp
    1e1c:	7053      	strb	r3, [r2, #1]
	config.trigger_action     = DMA_TRIGGER_ACTON_BEAT;
    1e1e:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    1e20:	4c1a      	ldr	r4, [pc, #104]	; (1e8c <setup_DMA+0x80>)
    1e22:	4669      	mov	r1, sp
    1e24:	0020      	movs	r0, r4
    1e26:	4b1a      	ldr	r3, [pc, #104]	; (1e90 <setup_DMA+0x84>)
    1e28:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    1e2a:	2201      	movs	r2, #1
    1e2c:	466b      	mov	r3, sp
    1e2e:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1e30:	2300      	movs	r3, #0
    1e32:	4669      	mov	r1, sp
    1e34:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1e36:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1e38:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    1e3a:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    1e3c:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1e3e:	71cb      	strb	r3, [r1, #7]
	descriptor_config.dst_increment_enable = false;
    1e40:	714b      	strb	r3, [r1, #5]
	descriptor_config.block_transfer_count = blockTransferCount;
    1e42:	33e4      	adds	r3, #228	; 0xe4
    1e44:	810b      	strh	r3, [r1, #8]
	descriptor_config.source_address = (uint32_t)DMASourceRegister+blockTransferCount;
    1e46:	4b13      	ldr	r3, [pc, #76]	; (1e94 <setup_DMA+0x88>)
    1e48:	33e4      	adds	r3, #228	; 0xe4
    1e4a:	9303      	str	r3, [sp, #12]
	descriptor_config.destination_address = 0x42000828; //sercom0
    1e4c:	4b12      	ldr	r3, [pc, #72]	; (1e98 <setup_DMA+0x8c>)
    1e4e:	9304      	str	r3, [sp, #16]
	descriptor_config.next_descriptor_address = (uint32_t)descriptor;
    1e50:	4d12      	ldr	r5, [pc, #72]	; (1e9c <setup_DMA+0x90>)
    1e52:	9505      	str	r5, [sp, #20]
	dma_descriptor_create(descriptor, &descriptor_config);
    1e54:	0028      	movs	r0, r5
    1e56:	4b12      	ldr	r3, [pc, #72]	; (1ea0 <setup_DMA+0x94>)
    1e58:	4798      	blx	r3
	configure_dma_resource(&example_resource);
	setup_transfer_descriptor(&example_descriptor);
	dma_add_descriptor(&example_resource, &example_descriptor);
    1e5a:	0029      	movs	r1, r5
    1e5c:	0020      	movs	r0, r4
    1e5e:	4b11      	ldr	r3, [pc, #68]	; (1ea4 <setup_DMA+0x98>)
    1e60:	4798      	blx	r3
	resource->callback[type] = callback;
    1e62:	4b11      	ldr	r3, [pc, #68]	; (1ea8 <setup_DMA+0x9c>)
    1e64:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    1e66:	7c23      	ldrb	r3, [r4, #16]
    1e68:	4333      	orrs	r3, r6
    1e6a:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1e6c:	7822      	ldrb	r2, [r4, #0]
    1e6e:	490f      	ldr	r1, [pc, #60]	; (1eac <setup_DMA+0xa0>)
    1e70:	5c8b      	ldrb	r3, [r1, r2]
    1e72:	4333      	orrs	r3, r6
    1e74:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&example_resource, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&example_resource, DMA_CALLBACK_TRANSFER_DONE);
	while(dma_start_transfer_job(&example_resource) == STATUS_OK);
    1e76:	4d05      	ldr	r5, [pc, #20]	; (1e8c <setup_DMA+0x80>)
    1e78:	4c0d      	ldr	r4, [pc, #52]	; (1eb0 <setup_DMA+0xa4>)
    1e7a:	0028      	movs	r0, r5
    1e7c:	47a0      	blx	r4
    1e7e:	2800      	cmp	r0, #0
    1e80:	d0fb      	beq.n	1e7a <setup_DMA+0x6e>
}
    1e82:	b006      	add	sp, #24
    1e84:	bd70      	pop	{r4, r5, r6, pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00000b69 	.word	0x00000b69
    1e8c:	200002a0 	.word	0x200002a0
    1e90:	00000b79 	.word	0x00000b79
    1e94:	200002fc 	.word	0x200002fc
    1e98:	42000828 	.word	0x42000828
    1e9c:	20000290 	.word	0x20000290
    1ea0:	00000d49 	.word	0x00000d49
    1ea4:	00000df1 	.word	0x00000df1
    1ea8:	00001dd1 	.word	0x00001dd1
    1eac:	20000120 	.word	0x20000120
    1eb0:	00000cc1 	.word	0x00000cc1

00001eb4 <configureSPIMaster>:

void configureSPIMaster(void)
{
    1eb4:	b570      	push	{r4, r5, r6, lr}
    1eb6:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1eb8:	2401      	movs	r4, #1
    1eba:	466b      	mov	r3, sp
    1ebc:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1ebe:	2500      	movs	r5, #0
    1ec0:	9501      	str	r5, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1ec2:	23c0      	movs	r3, #192	; 0xc0
    1ec4:	039b      	lsls	r3, r3, #14
    1ec6:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1ec8:	466b      	mov	r3, sp
    1eca:	741d      	strb	r5, [r3, #16]
	config->run_in_standby   = false;
    1ecc:	745d      	strb	r5, [r3, #17]
	config->receiver_enable  = true;
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1ece:	74dc      	strb	r4, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1ed0:	751d      	strb	r5, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1ed2:	220c      	movs	r2, #12
    1ed4:	2100      	movs	r1, #0
    1ed6:	a806      	add	r0, sp, #24
    1ed8:	4b16      	ldr	r3, [pc, #88]	; (1f34 <configureSPIMaster+0x80>)
    1eda:	4798      	blx	r3
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    1edc:	2380      	movs	r3, #128	; 0x80
    1ede:	055b      	lsls	r3, r3, #21
    1ee0:	9302      	str	r3, [sp, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    1ee2:	4b15      	ldr	r3, [pc, #84]	; (1f38 <configureSPIMaster+0x84>)
    1ee4:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    1ee6:	2301      	movs	r3, #1
    1ee8:	425b      	negs	r3, r3
    1eea:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    1eec:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    1eee:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.receiver_enable  = false;
    1ef0:	466b      	mov	r3, sp
    1ef2:	749d      	strb	r5, [r3, #18]
	config_spi_master.mode_specific.master.baudrate =  SPIBAUDRATE; //2.5MHz  = 400ns per signal
    1ef4:	4b11      	ldr	r3, [pc, #68]	; (1f3c <configureSPIMaster+0x88>)
    1ef6:	9306      	str	r3, [sp, #24]
	config_spi_master.generator_source = GCLK_GENERATOR_3;
    1ef8:	2203      	movs	r2, #3
    1efa:	2324      	movs	r3, #36	; 0x24
    1efc:	4669      	mov	r1, sp
    1efe:	54ca      	strb	r2, [r1, r3]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    1f00:	4e0f      	ldr	r6, [pc, #60]	; (1f40 <configureSPIMaster+0x8c>)
    1f02:	466a      	mov	r2, sp
    1f04:	490f      	ldr	r1, [pc, #60]	; (1f44 <configureSPIMaster+0x90>)
    1f06:	0030      	movs	r0, r6
    1f08:	4b0f      	ldr	r3, [pc, #60]	; (1f48 <configureSPIMaster+0x94>)
    1f0a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f0c:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f0e:	0028      	movs	r0, r5
    1f10:	4b0e      	ldr	r3, [pc, #56]	; (1f4c <configureSPIMaster+0x98>)
    1f12:	4798      	blx	r3
    1f14:	231f      	movs	r3, #31
    1f16:	4018      	ands	r0, r3
    1f18:	4084      	lsls	r4, r0
    1f1a:	4b0d      	ldr	r3, [pc, #52]	; (1f50 <configureSPIMaster+0x9c>)
    1f1c:	601c      	str	r4, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f1e:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1f20:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1f22:	2b00      	cmp	r3, #0
    1f24:	d1fc      	bne.n	1f20 <configureSPIMaster+0x6c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f26:	682b      	ldr	r3, [r5, #0]
    1f28:	2202      	movs	r2, #2
    1f2a:	4313      	orrs	r3, r2
    1f2c:	602b      	str	r3, [r5, #0]
	spi_enable(&spi_master_instance);
}
    1f2e:	b00e      	add	sp, #56	; 0x38
    1f30:	bd70      	pop	{r4, r5, r6, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	00002beb 	.word	0x00002beb
    1f38:	000e0002 	.word	0x000e0002
    1f3c:	002625a0 	.word	0x002625a0
    1f40:	200002bc 	.word	0x200002bc
    1f44:	42000800 	.word	0x42000800
    1f48:	00001479 	.word	0x00001479
    1f4c:	00001429 	.word	0x00001429
    1f50:	e000e100 	.word	0xe000e100

00001f54 <RGBPI55Init>:
	configureSPIMaster();
	
}

void RGBPI55Init()
{
    1f54:	b510      	push	{r4, lr}
	sourceRegisterInit();
    1f56:	4b03      	ldr	r3, [pc, #12]	; (1f64 <RGBPI55Init+0x10>)
    1f58:	4798      	blx	r3
	configureSPIMaster();
    1f5a:	4b03      	ldr	r3, [pc, #12]	; (1f68 <RGBPI55Init+0x14>)
    1f5c:	4798      	blx	r3
	SPIMasterInit();
	setup_DMA();
    1f5e:	4b03      	ldr	r3, [pc, #12]	; (1f6c <RGBPI55Init+0x18>)
    1f60:	4798      	blx	r3
}
    1f62:	bd10      	pop	{r4, pc}
    1f64:	00001ddd 	.word	0x00001ddd
    1f68:	00001eb5 	.word	0x00001eb5
    1f6c:	00001e0d 	.word	0x00001e0d

00001f70 <convertColorSPIData>:
#define TWOBITSPIVALUES {0x88,0x8E,0xE8,0xEE}
const	uint8_t SPIDataConertConsArray[] = TWOBITSPIVALUES;


static uint8_t* convertColorSPIData(colorInfo* colorData )
{
    1f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f72:	46d6      	mov	lr, sl
    1f74:	464f      	mov	r7, r9
    1f76:	4646      	mov	r6, r8
    1f78:	b5c0      	push	{r6, r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	4682      	mov	sl, r0
	volatile static uint8_t SPIData[NoBytesLED];
	volatile uint8_t i =0;
    1f7e:	466b      	mov	r3, sp
    1f80:	1dda      	adds	r2, r3, #7
    1f82:	2300      	movs	r3, #0
    1f84:	7013      	strb	r3, [r2, #0]
	uint8_t countSPIData = 0;
	volatile uint8_t temp =0;
    1f86:	4669      	mov	r1, sp
    1f88:	718b      	strb	r3, [r1, #6]
	volatile uint8_t twoBitValue = 0;
    1f8a:	4669      	mov	r1, sp
    1f8c:	714b      	strb	r3, [r1, #5]
	for(i=0;i<4;i++)
    1f8e:	7013      	strb	r3, [r2, #0]
    1f90:	7813      	ldrb	r3, [r2, #0]
    1f92:	b2db      	uxtb	r3, r3
    1f94:	2b03      	cmp	r3, #3
    1f96:	d900      	bls.n	1f9a <convertColorSPIData+0x2a>
    1f98:	e089      	b.n	20ae <convertColorSPIData+0x13e>
    1f9a:	2300      	movs	r3, #0
	{
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1f9c:	466a      	mov	r2, sp
    1f9e:	1dd1      	adds	r1, r2, #7
    1fa0:	22c0      	movs	r2, #192	; 0xc0
    1fa2:	4694      	mov	ip, r2
    1fa4:	2703      	movs	r7, #3
    1fa6:	466a      	mov	r2, sp
    1fa8:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1faa:	4e42      	ldr	r6, [pc, #264]	; (20b4 <convertColorSPIData+0x144>)
    1fac:	4d42      	ldr	r5, [pc, #264]	; (20b8 <convertColorSPIData+0x148>)
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1fae:	780a      	ldrb	r2, [r1, #0]
    1fb0:	7808      	ldrb	r0, [r1, #0]
    1fb2:	4680      	mov	r8, r0
    1fb4:	0052      	lsls	r2, r2, #1
    1fb6:	4660      	mov	r0, ip
    1fb8:	4110      	asrs	r0, r2
    1fba:	4652      	mov	r2, sl
    1fbc:	7852      	ldrb	r2, [r2, #1]
    1fbe:	4002      	ands	r2, r0
    1fc0:	4640      	mov	r0, r8
    1fc2:	1a38      	subs	r0, r7, r0
    1fc4:	0040      	lsls	r0, r0, #1
    1fc6:	4102      	asrs	r2, r0
    1fc8:	b2d2      	uxtb	r2, r2
    1fca:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1fcc:	7822      	ldrb	r2, [r4, #0]
    1fce:	b2d2      	uxtb	r2, r2
    1fd0:	5cb2      	ldrb	r2, [r6, r2]
    1fd2:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    1fd4:	3301      	adds	r3, #1
    1fd6:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    1fd8:	780a      	ldrb	r2, [r1, #0]
    1fda:	3201      	adds	r2, #1
    1fdc:	b2d2      	uxtb	r2, r2
    1fde:	700a      	strb	r2, [r1, #0]
    1fe0:	780a      	ldrb	r2, [r1, #0]
    1fe2:	b2d2      	uxtb	r2, r2
    1fe4:	2a03      	cmp	r2, #3
    1fe6:	d9e2      	bls.n	1fae <convertColorSPIData+0x3e>
	}
	for(i=0;i<4;i++)
    1fe8:	466a      	mov	r2, sp
    1fea:	2100      	movs	r1, #0
    1fec:	71d1      	strb	r1, [r2, #7]
    1fee:	3207      	adds	r2, #7
    1ff0:	7812      	ldrb	r2, [r2, #0]
    1ff2:	b2d2      	uxtb	r2, r2
    1ff4:	2a03      	cmp	r2, #3
    1ff6:	d825      	bhi.n	2044 <convertColorSPIData+0xd4>
	{
		//temp = (0x30>>(i*2));
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    1ff8:	466a      	mov	r2, sp
    1ffa:	1dd1      	adds	r1, r2, #7
    1ffc:	22c0      	movs	r2, #192	; 0xc0
    1ffe:	4694      	mov	ip, r2
    2000:	2703      	movs	r7, #3
    2002:	466a      	mov	r2, sp
    2004:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2006:	4e2b      	ldr	r6, [pc, #172]	; (20b4 <convertColorSPIData+0x144>)
    2008:	4d2b      	ldr	r5, [pc, #172]	; (20b8 <convertColorSPIData+0x148>)
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    200a:	780a      	ldrb	r2, [r1, #0]
    200c:	7808      	ldrb	r0, [r1, #0]
    200e:	4680      	mov	r8, r0
    2010:	0052      	lsls	r2, r2, #1
    2012:	4660      	mov	r0, ip
    2014:	4110      	asrs	r0, r2
    2016:	4652      	mov	r2, sl
    2018:	7812      	ldrb	r2, [r2, #0]
    201a:	4002      	ands	r2, r0
    201c:	4640      	mov	r0, r8
    201e:	1a38      	subs	r0, r7, r0
    2020:	0040      	lsls	r0, r0, #1
    2022:	4102      	asrs	r2, r0
    2024:	b2d2      	uxtb	r2, r2
    2026:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2028:	7822      	ldrb	r2, [r4, #0]
    202a:	b2d2      	uxtb	r2, r2
    202c:	5cb2      	ldrb	r2, [r6, r2]
    202e:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    2030:	3301      	adds	r3, #1
    2032:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    2034:	780a      	ldrb	r2, [r1, #0]
    2036:	3201      	adds	r2, #1
    2038:	b2d2      	uxtb	r2, r2
    203a:	700a      	strb	r2, [r1, #0]
    203c:	780a      	ldrb	r2, [r1, #0]
    203e:	b2d2      	uxtb	r2, r2
    2040:	2a03      	cmp	r2, #3
    2042:	d9e2      	bls.n	200a <convertColorSPIData+0x9a>
	}
	for(i=0;i<4;i++)
    2044:	466a      	mov	r2, sp
    2046:	2100      	movs	r1, #0
    2048:	71d1      	strb	r1, [r2, #7]
    204a:	3207      	adds	r2, #7
    204c:	7812      	ldrb	r2, [r2, #0]
    204e:	b2d2      	uxtb	r2, r2
    2050:	2a03      	cmp	r2, #3
    2052:	d825      	bhi.n	20a0 <convertColorSPIData+0x130>
	{
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    2054:	466a      	mov	r2, sp
    2056:	1dd1      	adds	r1, r2, #7
    2058:	22c0      	movs	r2, #192	; 0xc0
    205a:	4694      	mov	ip, r2
    205c:	2703      	movs	r7, #3
    205e:	466a      	mov	r2, sp
    2060:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2062:	4e14      	ldr	r6, [pc, #80]	; (20b4 <convertColorSPIData+0x144>)
    2064:	4d14      	ldr	r5, [pc, #80]	; (20b8 <convertColorSPIData+0x148>)
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    2066:	780a      	ldrb	r2, [r1, #0]
    2068:	7808      	ldrb	r0, [r1, #0]
    206a:	4680      	mov	r8, r0
    206c:	0052      	lsls	r2, r2, #1
    206e:	4660      	mov	r0, ip
    2070:	4110      	asrs	r0, r2
    2072:	4652      	mov	r2, sl
    2074:	7892      	ldrb	r2, [r2, #2]
    2076:	4002      	ands	r2, r0
    2078:	4640      	mov	r0, r8
    207a:	1a38      	subs	r0, r7, r0
    207c:	0040      	lsls	r0, r0, #1
    207e:	4102      	asrs	r2, r0
    2080:	b2d2      	uxtb	r2, r2
    2082:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2084:	7822      	ldrb	r2, [r4, #0]
    2086:	b2d2      	uxtb	r2, r2
    2088:	5cb2      	ldrb	r2, [r6, r2]
    208a:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    208c:	3301      	adds	r3, #1
    208e:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    2090:	780a      	ldrb	r2, [r1, #0]
    2092:	3201      	adds	r2, #1
    2094:	b2d2      	uxtb	r2, r2
    2096:	700a      	strb	r2, [r1, #0]
    2098:	780a      	ldrb	r2, [r1, #0]
    209a:	b2d2      	uxtb	r2, r2
    209c:	2a03      	cmp	r2, #3
    209e:	d9e2      	bls.n	2066 <convertColorSPIData+0xf6>
	}
	return SPIData;
}
    20a0:	4805      	ldr	r0, [pc, #20]	; (20b8 <convertColorSPIData+0x148>)
    20a2:	b002      	add	sp, #8
    20a4:	bc1c      	pop	{r2, r3, r4}
    20a6:	4690      	mov	r8, r2
    20a8:	4699      	mov	r9, r3
    20aa:	46a2      	mov	sl, r4
    20ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t countSPIData = 0;
    20ae:	2300      	movs	r3, #0
    20b0:	e79a      	b.n	1fe8 <convertColorSPIData+0x78>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	00002e14 	.word	0x00002e14
    20b8:	20000154 	.word	0x20000154

000020bc <RGBPI55SetAllLED>:

void RGBPI55SetAllLED(colorInfo*  colorLED)
{
    20bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20be:	46c6      	mov	lr, r8
    20c0:	b500      	push	{lr}
    20c2:	0006      	movs	r6, r0
    20c4:	2560      	movs	r5, #96	; 0x60
	
	//SPIMasterInit();
	
	for(j = 0 ; j < NOLEDS ; j++)
	{
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    20c6:	4b0b      	ldr	r3, [pc, #44]	; (20f4 <RGBPI55SetAllLED+0x38>)
    20c8:	4698      	mov	r8, r3
		startArrayAddress   = j*NoBytesLED + STARTZEROS;
		for(i = 0 ; i < NoBytesLED ; i++)
		{
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    20ca:	4c0b      	ldr	r4, [pc, #44]	; (20f8 <RGBPI55SetAllLED+0x3c>)
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    20cc:	0030      	movs	r0, r6
    20ce:	47c0      	blx	r8
    20d0:	0007      	movs	r7, r0
    20d2:	370c      	adds	r7, #12
    20d4:	0003      	movs	r3, r0
    20d6:	1a28      	subs	r0, r5, r0
    20d8:	18c2      	adds	r2, r0, r3
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    20da:	7819      	ldrb	r1, [r3, #0]
    20dc:	54a1      	strb	r1, [r4, r2]
    20de:	3301      	adds	r3, #1
		for(i = 0 ; i < NoBytesLED ; i++)
    20e0:	42bb      	cmp	r3, r7
    20e2:	d1f9      	bne.n	20d8 <RGBPI55SetAllLED+0x1c>
    20e4:	3603      	adds	r6, #3
    20e6:	350c      	adds	r5, #12
	for(j = 0 ; j < NOLEDS ; j++)
    20e8:	2d84      	cmp	r5, #132	; 0x84
    20ea:	d1ef      	bne.n	20cc <RGBPI55SetAllLED+0x10>
	//clearMOSI();
	
	transferOngoing = false;
	transferDone = false;
	*/
}
    20ec:	bc04      	pop	{r2}
    20ee:	4690      	mov	r8, r2
    20f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00001f71 	.word	0x00001f71
    20f8:	200002fc 	.word	0x200002fc

000020fc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    20fc:	4770      	bx	lr
	...

00002100 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2100:	4b0c      	ldr	r3, [pc, #48]	; (2134 <cpu_irq_enter_critical+0x34>)
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	2b00      	cmp	r3, #0
    2106:	d106      	bne.n	2116 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2108:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    210c:	2b00      	cmp	r3, #0
    210e:	d007      	beq.n	2120 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2110:	2200      	movs	r2, #0
    2112:	4b09      	ldr	r3, [pc, #36]	; (2138 <cpu_irq_enter_critical+0x38>)
    2114:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2116:	4a07      	ldr	r2, [pc, #28]	; (2134 <cpu_irq_enter_critical+0x34>)
    2118:	6813      	ldr	r3, [r2, #0]
    211a:	3301      	adds	r3, #1
    211c:	6013      	str	r3, [r2, #0]
}
    211e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2120:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2122:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2126:	2200      	movs	r2, #0
    2128:	4b04      	ldr	r3, [pc, #16]	; (213c <cpu_irq_enter_critical+0x3c>)
    212a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    212c:	3201      	adds	r2, #1
    212e:	4b02      	ldr	r3, [pc, #8]	; (2138 <cpu_irq_enter_critical+0x38>)
    2130:	701a      	strb	r2, [r3, #0]
    2132:	e7f0      	b.n	2116 <cpu_irq_enter_critical+0x16>
    2134:	20000160 	.word	0x20000160
    2138:	20000164 	.word	0x20000164
    213c:	20000014 	.word	0x20000014

00002140 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2140:	4b08      	ldr	r3, [pc, #32]	; (2164 <cpu_irq_leave_critical+0x24>)
    2142:	681a      	ldr	r2, [r3, #0]
    2144:	3a01      	subs	r2, #1
    2146:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2148:	681b      	ldr	r3, [r3, #0]
    214a:	2b00      	cmp	r3, #0
    214c:	d109      	bne.n	2162 <cpu_irq_leave_critical+0x22>
    214e:	4b06      	ldr	r3, [pc, #24]	; (2168 <cpu_irq_leave_critical+0x28>)
    2150:	781b      	ldrb	r3, [r3, #0]
    2152:	2b00      	cmp	r3, #0
    2154:	d005      	beq.n	2162 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2156:	2201      	movs	r2, #1
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <cpu_irq_leave_critical+0x2c>)
    215a:	701a      	strb	r2, [r3, #0]
    215c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2160:	b662      	cpsie	i
	}
}
    2162:	4770      	bx	lr
    2164:	20000160 	.word	0x20000160
    2168:	20000164 	.word	0x20000164
    216c:	20000014 	.word	0x20000014

00002170 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2170:	b510      	push	{r4, lr}
	switch (clock_source) {
    2172:	2808      	cmp	r0, #8
    2174:	d803      	bhi.n	217e <system_clock_source_get_hz+0xe>
    2176:	0080      	lsls	r0, r0, #2
    2178:	4b1c      	ldr	r3, [pc, #112]	; (21ec <system_clock_source_get_hz+0x7c>)
    217a:	581b      	ldr	r3, [r3, r0]
    217c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    217e:	2000      	movs	r0, #0
    2180:	e032      	b.n	21e8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2182:	4b1b      	ldr	r3, [pc, #108]	; (21f0 <system_clock_source_get_hz+0x80>)
    2184:	6918      	ldr	r0, [r3, #16]
    2186:	e02f      	b.n	21e8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2188:	4b1a      	ldr	r3, [pc, #104]	; (21f4 <system_clock_source_get_hz+0x84>)
    218a:	6a1b      	ldr	r3, [r3, #32]
    218c:	059b      	lsls	r3, r3, #22
    218e:	0f9b      	lsrs	r3, r3, #30
    2190:	4819      	ldr	r0, [pc, #100]	; (21f8 <system_clock_source_get_hz+0x88>)
    2192:	40d8      	lsrs	r0, r3
    2194:	e028      	b.n	21e8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2196:	4b16      	ldr	r3, [pc, #88]	; (21f0 <system_clock_source_get_hz+0x80>)
    2198:	6958      	ldr	r0, [r3, #20]
    219a:	e025      	b.n	21e8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    219c:	4b14      	ldr	r3, [pc, #80]	; (21f0 <system_clock_source_get_hz+0x80>)
    219e:	681b      	ldr	r3, [r3, #0]
			return 0;
    21a0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    21a2:	079b      	lsls	r3, r3, #30
    21a4:	d520      	bpl.n	21e8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    21a6:	4913      	ldr	r1, [pc, #76]	; (21f4 <system_clock_source_get_hz+0x84>)
    21a8:	2210      	movs	r2, #16
    21aa:	68cb      	ldr	r3, [r1, #12]
    21ac:	421a      	tst	r2, r3
    21ae:	d0fc      	beq.n	21aa <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    21b0:	4b0f      	ldr	r3, [pc, #60]	; (21f0 <system_clock_source_get_hz+0x80>)
    21b2:	681a      	ldr	r2, [r3, #0]
    21b4:	2324      	movs	r3, #36	; 0x24
    21b6:	4013      	ands	r3, r2
    21b8:	2b04      	cmp	r3, #4
    21ba:	d001      	beq.n	21c0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    21bc:	480f      	ldr	r0, [pc, #60]	; (21fc <system_clock_source_get_hz+0x8c>)
    21be:	e013      	b.n	21e8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    21c0:	2000      	movs	r0, #0
    21c2:	4b0f      	ldr	r3, [pc, #60]	; (2200 <system_clock_source_get_hz+0x90>)
    21c4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    21c6:	4b0a      	ldr	r3, [pc, #40]	; (21f0 <system_clock_source_get_hz+0x80>)
    21c8:	689b      	ldr	r3, [r3, #8]
    21ca:	041b      	lsls	r3, r3, #16
    21cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    21ce:	4358      	muls	r0, r3
    21d0:	e00a      	b.n	21e8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    21d2:	2350      	movs	r3, #80	; 0x50
    21d4:	4a07      	ldr	r2, [pc, #28]	; (21f4 <system_clock_source_get_hz+0x84>)
    21d6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    21d8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    21da:	075b      	lsls	r3, r3, #29
    21dc:	d504      	bpl.n	21e8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    21de:	4b04      	ldr	r3, [pc, #16]	; (21f0 <system_clock_source_get_hz+0x80>)
    21e0:	68d8      	ldr	r0, [r3, #12]
    21e2:	e001      	b.n	21e8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    21e4:	2080      	movs	r0, #128	; 0x80
    21e6:	0200      	lsls	r0, r0, #8
	}
}
    21e8:	bd10      	pop	{r4, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	00002e18 	.word	0x00002e18
    21f0:	20000168 	.word	0x20000168
    21f4:	40000800 	.word	0x40000800
    21f8:	007a1200 	.word	0x007a1200
    21fc:	02dc6c00 	.word	0x02dc6c00
    2200:	000027b5 	.word	0x000027b5

00002204 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2204:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2206:	490c      	ldr	r1, [pc, #48]	; (2238 <system_clock_source_osc8m_set_config+0x34>)
    2208:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    220a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    220c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    220e:	7840      	ldrb	r0, [r0, #1]
    2210:	2201      	movs	r2, #1
    2212:	4010      	ands	r0, r2
    2214:	0180      	lsls	r0, r0, #6
    2216:	2640      	movs	r6, #64	; 0x40
    2218:	43b3      	bics	r3, r6
    221a:	4303      	orrs	r3, r0
    221c:	402a      	ands	r2, r5
    221e:	01d2      	lsls	r2, r2, #7
    2220:	2080      	movs	r0, #128	; 0x80
    2222:	4383      	bics	r3, r0
    2224:	4313      	orrs	r3, r2
    2226:	2203      	movs	r2, #3
    2228:	4022      	ands	r2, r4
    222a:	0212      	lsls	r2, r2, #8
    222c:	4803      	ldr	r0, [pc, #12]	; (223c <system_clock_source_osc8m_set_config+0x38>)
    222e:	4003      	ands	r3, r0
    2230:	4313      	orrs	r3, r2
    2232:	620b      	str	r3, [r1, #32]
}
    2234:	bd70      	pop	{r4, r5, r6, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	40000800 	.word	0x40000800
    223c:	fffffcff 	.word	0xfffffcff

00002240 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2240:	b5f0      	push	{r4, r5, r6, r7, lr}
    2242:	46ce      	mov	lr, r9
    2244:	4647      	mov	r7, r8
    2246:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2248:	4b19      	ldr	r3, [pc, #100]	; (22b0 <system_clock_source_osc32k_set_config+0x70>)
    224a:	4699      	mov	r9, r3
    224c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    224e:	7841      	ldrb	r1, [r0, #1]
    2250:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2252:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2254:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2256:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2258:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    225a:	7880      	ldrb	r0, [r0, #2]
    225c:	2101      	movs	r1, #1
    225e:	4008      	ands	r0, r1
    2260:	0080      	lsls	r0, r0, #2
    2262:	2204      	movs	r2, #4
    2264:	4393      	bics	r3, r2
    2266:	4303      	orrs	r3, r0
    2268:	4660      	mov	r0, ip
    226a:	4008      	ands	r0, r1
    226c:	00c0      	lsls	r0, r0, #3
    226e:	3204      	adds	r2, #4
    2270:	4393      	bics	r3, r2
    2272:	4303      	orrs	r3, r0
    2274:	0038      	movs	r0, r7
    2276:	4008      	ands	r0, r1
    2278:	0180      	lsls	r0, r0, #6
    227a:	2740      	movs	r7, #64	; 0x40
    227c:	43bb      	bics	r3, r7
    227e:	4303      	orrs	r3, r0
    2280:	0030      	movs	r0, r6
    2282:	4008      	ands	r0, r1
    2284:	01c0      	lsls	r0, r0, #7
    2286:	2680      	movs	r6, #128	; 0x80
    2288:	43b3      	bics	r3, r6
    228a:	4303      	orrs	r3, r0
    228c:	2007      	movs	r0, #7
    228e:	4005      	ands	r5, r0
    2290:	022d      	lsls	r5, r5, #8
    2292:	4808      	ldr	r0, [pc, #32]	; (22b4 <system_clock_source_osc32k_set_config+0x74>)
    2294:	4003      	ands	r3, r0
    2296:	432b      	orrs	r3, r5
    2298:	4021      	ands	r1, r4
    229a:	0309      	lsls	r1, r1, #12
    229c:	4806      	ldr	r0, [pc, #24]	; (22b8 <system_clock_source_osc32k_set_config+0x78>)
    229e:	4003      	ands	r3, r0
    22a0:	430b      	orrs	r3, r1
    22a2:	464a      	mov	r2, r9
    22a4:	6193      	str	r3, [r2, #24]
}
    22a6:	bc0c      	pop	{r2, r3}
    22a8:	4690      	mov	r8, r2
    22aa:	4699      	mov	r9, r3
    22ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	40000800 	.word	0x40000800
    22b4:	fffff8ff 	.word	0xfffff8ff
    22b8:	ffffefff 	.word	0xffffefff

000022bc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    22bc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    22be:	7a03      	ldrb	r3, [r0, #8]
    22c0:	069b      	lsls	r3, r3, #26
    22c2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    22c4:	8942      	ldrh	r2, [r0, #10]
    22c6:	0592      	lsls	r2, r2, #22
    22c8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    22ca:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    22cc:	4918      	ldr	r1, [pc, #96]	; (2330 <system_clock_source_dfll_set_config+0x74>)
    22ce:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    22d0:	7983      	ldrb	r3, [r0, #6]
    22d2:	79c2      	ldrb	r2, [r0, #7]
    22d4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    22d6:	8842      	ldrh	r2, [r0, #2]
    22d8:	8884      	ldrh	r4, [r0, #4]
    22da:	4322      	orrs	r2, r4
    22dc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    22de:	7842      	ldrb	r2, [r0, #1]
    22e0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    22e2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    22e4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    22e6:	7803      	ldrb	r3, [r0, #0]
    22e8:	2b04      	cmp	r3, #4
    22ea:	d011      	beq.n	2310 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    22ec:	2b20      	cmp	r3, #32
    22ee:	d10e      	bne.n	230e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    22f0:	7b03      	ldrb	r3, [r0, #12]
    22f2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    22f4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    22f6:	4313      	orrs	r3, r2
    22f8:	89c2      	ldrh	r2, [r0, #14]
    22fa:	0412      	lsls	r2, r2, #16
    22fc:	490d      	ldr	r1, [pc, #52]	; (2334 <system_clock_source_dfll_set_config+0x78>)
    22fe:	400a      	ands	r2, r1
    2300:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2302:	4a0b      	ldr	r2, [pc, #44]	; (2330 <system_clock_source_dfll_set_config+0x74>)
    2304:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2306:	6811      	ldr	r1, [r2, #0]
    2308:	4b0b      	ldr	r3, [pc, #44]	; (2338 <system_clock_source_dfll_set_config+0x7c>)
    230a:	430b      	orrs	r3, r1
    230c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    230e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2310:	7b03      	ldrb	r3, [r0, #12]
    2312:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2314:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2316:	4313      	orrs	r3, r2
    2318:	89c2      	ldrh	r2, [r0, #14]
    231a:	0412      	lsls	r2, r2, #16
    231c:	4905      	ldr	r1, [pc, #20]	; (2334 <system_clock_source_dfll_set_config+0x78>)
    231e:	400a      	ands	r2, r1
    2320:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2322:	4a03      	ldr	r2, [pc, #12]	; (2330 <system_clock_source_dfll_set_config+0x74>)
    2324:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2326:	6813      	ldr	r3, [r2, #0]
    2328:	2104      	movs	r1, #4
    232a:	430b      	orrs	r3, r1
    232c:	6013      	str	r3, [r2, #0]
    232e:	e7ee      	b.n	230e <system_clock_source_dfll_set_config+0x52>
    2330:	20000168 	.word	0x20000168
    2334:	03ff0000 	.word	0x03ff0000
    2338:	00000424 	.word	0x00000424

0000233c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    233c:	2808      	cmp	r0, #8
    233e:	d803      	bhi.n	2348 <system_clock_source_enable+0xc>
    2340:	0080      	lsls	r0, r0, #2
    2342:	4b25      	ldr	r3, [pc, #148]	; (23d8 <system_clock_source_enable+0x9c>)
    2344:	581b      	ldr	r3, [r3, r0]
    2346:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2348:	2017      	movs	r0, #23
    234a:	e044      	b.n	23d6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    234c:	4a23      	ldr	r2, [pc, #140]	; (23dc <system_clock_source_enable+0xa0>)
    234e:	6a13      	ldr	r3, [r2, #32]
    2350:	2102      	movs	r1, #2
    2352:	430b      	orrs	r3, r1
    2354:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2356:	2000      	movs	r0, #0
    2358:	e03d      	b.n	23d6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    235a:	4a20      	ldr	r2, [pc, #128]	; (23dc <system_clock_source_enable+0xa0>)
    235c:	6993      	ldr	r3, [r2, #24]
    235e:	2102      	movs	r1, #2
    2360:	430b      	orrs	r3, r1
    2362:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2364:	2000      	movs	r0, #0
		break;
    2366:	e036      	b.n	23d6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2368:	4a1c      	ldr	r2, [pc, #112]	; (23dc <system_clock_source_enable+0xa0>)
    236a:	8a13      	ldrh	r3, [r2, #16]
    236c:	2102      	movs	r1, #2
    236e:	430b      	orrs	r3, r1
    2370:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2372:	2000      	movs	r0, #0
		break;
    2374:	e02f      	b.n	23d6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2376:	4a19      	ldr	r2, [pc, #100]	; (23dc <system_clock_source_enable+0xa0>)
    2378:	8a93      	ldrh	r3, [r2, #20]
    237a:	2102      	movs	r1, #2
    237c:	430b      	orrs	r3, r1
    237e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2380:	2000      	movs	r0, #0
		break;
    2382:	e028      	b.n	23d6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2384:	4916      	ldr	r1, [pc, #88]	; (23e0 <system_clock_source_enable+0xa4>)
    2386:	680b      	ldr	r3, [r1, #0]
    2388:	2202      	movs	r2, #2
    238a:	4313      	orrs	r3, r2
    238c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    238e:	4b13      	ldr	r3, [pc, #76]	; (23dc <system_clock_source_enable+0xa0>)
    2390:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2392:	0019      	movs	r1, r3
    2394:	320e      	adds	r2, #14
    2396:	68cb      	ldr	r3, [r1, #12]
    2398:	421a      	tst	r2, r3
    239a:	d0fc      	beq.n	2396 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    239c:	4a10      	ldr	r2, [pc, #64]	; (23e0 <system_clock_source_enable+0xa4>)
    239e:	6891      	ldr	r1, [r2, #8]
    23a0:	4b0e      	ldr	r3, [pc, #56]	; (23dc <system_clock_source_enable+0xa0>)
    23a2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    23a4:	6852      	ldr	r2, [r2, #4]
    23a6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    23a8:	2200      	movs	r2, #0
    23aa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23ac:	0019      	movs	r1, r3
    23ae:	3210      	adds	r2, #16
    23b0:	68cb      	ldr	r3, [r1, #12]
    23b2:	421a      	tst	r2, r3
    23b4:	d0fc      	beq.n	23b0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    23b6:	4b0a      	ldr	r3, [pc, #40]	; (23e0 <system_clock_source_enable+0xa4>)
    23b8:	681b      	ldr	r3, [r3, #0]
    23ba:	b29b      	uxth	r3, r3
    23bc:	4a07      	ldr	r2, [pc, #28]	; (23dc <system_clock_source_enable+0xa0>)
    23be:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    23c0:	2000      	movs	r0, #0
    23c2:	e008      	b.n	23d6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    23c4:	4905      	ldr	r1, [pc, #20]	; (23dc <system_clock_source_enable+0xa0>)
    23c6:	2244      	movs	r2, #68	; 0x44
    23c8:	5c8b      	ldrb	r3, [r1, r2]
    23ca:	2002      	movs	r0, #2
    23cc:	4303      	orrs	r3, r0
    23ce:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    23d0:	2000      	movs	r0, #0
		break;
    23d2:	e000      	b.n	23d6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    23d4:	2000      	movs	r0, #0
}
    23d6:	4770      	bx	lr
    23d8:	00002e3c 	.word	0x00002e3c
    23dc:	40000800 	.word	0x40000800
    23e0:	20000168 	.word	0x20000168

000023e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    23e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e6:	46ce      	mov	lr, r9
    23e8:	4647      	mov	r7, r8
    23ea:	b580      	push	{r7, lr}
    23ec:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    23ee:	22c2      	movs	r2, #194	; 0xc2
    23f0:	00d2      	lsls	r2, r2, #3
    23f2:	4b4d      	ldr	r3, [pc, #308]	; (2528 <system_clock_init+0x144>)
    23f4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    23f6:	494d      	ldr	r1, [pc, #308]	; (252c <system_clock_init+0x148>)
    23f8:	684b      	ldr	r3, [r1, #4]
    23fa:	221e      	movs	r2, #30
    23fc:	4393      	bics	r3, r2
    23fe:	3a1c      	subs	r2, #28
    2400:	4313      	orrs	r3, r2
    2402:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2404:	ab01      	add	r3, sp, #4
    2406:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2408:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    240a:	4d49      	ldr	r5, [pc, #292]	; (2530 <system_clock_init+0x14c>)
    240c:	b2e0      	uxtb	r0, r4
    240e:	a901      	add	r1, sp, #4
    2410:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2412:	3401      	adds	r4, #1
    2414:	2c18      	cmp	r4, #24
    2416:	d1f9      	bne.n	240c <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    2418:	4c46      	ldr	r4, [pc, #280]	; (2534 <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    241a:	6823      	ldr	r3, [r4, #0]
    241c:	04db      	lsls	r3, r3, #19
    241e:	4942      	ldr	r1, [pc, #264]	; (2528 <system_clock_init+0x144>)
    2420:	698a      	ldr	r2, [r1, #24]
    2422:	0e5b      	lsrs	r3, r3, #25
    2424:	041b      	lsls	r3, r3, #16
    2426:	4844      	ldr	r0, [pc, #272]	; (2538 <system_clock_init+0x154>)
    2428:	4002      	ands	r2, r0
    242a:	4313      	orrs	r3, r2
    242c:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    242e:	a80a      	add	r0, sp, #40	; 0x28
    2430:	2301      	movs	r3, #1
    2432:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2434:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    2436:	2500      	movs	r5, #0
    2438:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    243a:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    243c:	3306      	adds	r3, #6
    243e:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2440:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2442:	4b3e      	ldr	r3, [pc, #248]	; (253c <system_clock_init+0x158>)
    2444:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2446:	2004      	movs	r0, #4
    2448:	4b3d      	ldr	r3, [pc, #244]	; (2540 <system_clock_init+0x15c>)
    244a:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    244c:	ab05      	add	r3, sp, #20
    244e:	2200      	movs	r2, #0
    2450:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2452:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2454:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2456:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2458:	213f      	movs	r1, #63	; 0x3f
    245a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    245c:	393b      	subs	r1, #59	; 0x3b
    245e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2460:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2462:	6823      	ldr	r3, [r4, #0]
    2464:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2466:	2b3f      	cmp	r3, #63	; 0x3f
    2468:	d05b      	beq.n	2522 <system_clock_init+0x13e>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    246a:	a805      	add	r0, sp, #20
    246c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    246e:	23b7      	movs	r3, #183	; 0xb7
    2470:	00db      	lsls	r3, r3, #3
    2472:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2474:	2307      	movs	r3, #7
    2476:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2478:	3338      	adds	r3, #56	; 0x38
    247a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    247c:	4b31      	ldr	r3, [pc, #196]	; (2544 <system_clock_init+0x160>)
    247e:	4798      	blx	r3
	config->run_in_standby  = false;
    2480:	a804      	add	r0, sp, #16
    2482:	2500      	movs	r5, #0
    2484:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2486:	2601      	movs	r6, #1
    2488:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    248a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    248c:	4b2e      	ldr	r3, [pc, #184]	; (2548 <system_clock_init+0x164>)
    248e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2490:	2006      	movs	r0, #6
    2492:	4f2b      	ldr	r7, [pc, #172]	; (2540 <system_clock_init+0x15c>)
    2494:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2496:	4b2d      	ldr	r3, [pc, #180]	; (254c <system_clock_init+0x168>)
    2498:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    249a:	ac01      	add	r4, sp, #4
    249c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    249e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    24a0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    24a2:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    24a4:	2304      	movs	r3, #4
    24a6:	7023      	strb	r3, [r4, #0]
    24a8:	0021      	movs	r1, r4
    24aa:	2001      	movs	r0, #1
    24ac:	4b28      	ldr	r3, [pc, #160]	; (2550 <system_clock_init+0x16c>)
    24ae:	4699      	mov	r9, r3
    24b0:	4798      	blx	r3
    24b2:	2001      	movs	r0, #1
    24b4:	4b27      	ldr	r3, [pc, #156]	; (2554 <system_clock_init+0x170>)
    24b6:	4698      	mov	r8, r3
    24b8:	4798      	blx	r3
	config->division_factor    = 1;
    24ba:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    24bc:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    24be:	2306      	movs	r3, #6
    24c0:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    24c2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    24c4:	7265      	strb	r5, [r4, #9]
    24c6:	0021      	movs	r1, r4
    24c8:	2003      	movs	r0, #3
    24ca:	47c8      	blx	r9
    24cc:	2003      	movs	r0, #3
    24ce:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    24d0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    24d2:	0021      	movs	r1, r4
    24d4:	2000      	movs	r0, #0
    24d6:	4b16      	ldr	r3, [pc, #88]	; (2530 <system_clock_init+0x14c>)
    24d8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    24da:	2000      	movs	r0, #0
    24dc:	4b1e      	ldr	r3, [pc, #120]	; (2558 <system_clock_init+0x174>)
    24de:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    24e0:	2007      	movs	r0, #7
    24e2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    24e4:	4910      	ldr	r1, [pc, #64]	; (2528 <system_clock_init+0x144>)
    24e6:	22d0      	movs	r2, #208	; 0xd0
    24e8:	68cb      	ldr	r3, [r1, #12]
    24ea:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    24ec:	2bd0      	cmp	r3, #208	; 0xd0
    24ee:	d1fb      	bne.n	24e8 <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    24f0:	4a1a      	ldr	r2, [pc, #104]	; (255c <system_clock_init+0x178>)
    24f2:	2300      	movs	r3, #0
    24f4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    24f6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    24f8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    24fa:	72d3      	strb	r3, [r2, #11]
	config->high_when_disabled = false;
    24fc:	a901      	add	r1, sp, #4
    24fe:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2500:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2502:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2504:	3307      	adds	r3, #7
    2506:	700b      	strb	r3, [r1, #0]
    2508:	3b05      	subs	r3, #5
    250a:	604b      	str	r3, [r1, #4]
    250c:	2000      	movs	r0, #0
    250e:	4b10      	ldr	r3, [pc, #64]	; (2550 <system_clock_init+0x16c>)
    2510:	4798      	blx	r3
    2512:	2000      	movs	r0, #0
    2514:	4b0f      	ldr	r3, [pc, #60]	; (2554 <system_clock_init+0x170>)
    2516:	4798      	blx	r3
#endif
}
    2518:	b00d      	add	sp, #52	; 0x34
    251a:	bc0c      	pop	{r2, r3}
    251c:	4690      	mov	r8, r2
    251e:	4699      	mov	r9, r3
    2520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2522:	3b20      	subs	r3, #32
    2524:	e7a1      	b.n	246a <system_clock_init+0x86>
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	40000800 	.word	0x40000800
    252c:	41004000 	.word	0x41004000
    2530:	00002799 	.word	0x00002799
    2534:	00806024 	.word	0x00806024
    2538:	ff80ffff 	.word	0xff80ffff
    253c:	00002241 	.word	0x00002241
    2540:	0000233d 	.word	0x0000233d
    2544:	000022bd 	.word	0x000022bd
    2548:	00002205 	.word	0x00002205
    254c:	00002561 	.word	0x00002561
    2550:	00002585 	.word	0x00002585
    2554:	0000263d 	.word	0x0000263d
    2558:	0000270d 	.word	0x0000270d
    255c:	40000400 	.word	0x40000400

00002560 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2560:	4a06      	ldr	r2, [pc, #24]	; (257c <system_gclk_init+0x1c>)
    2562:	6993      	ldr	r3, [r2, #24]
    2564:	2108      	movs	r1, #8
    2566:	430b      	orrs	r3, r1
    2568:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    256a:	2201      	movs	r2, #1
    256c:	4b04      	ldr	r3, [pc, #16]	; (2580 <system_gclk_init+0x20>)
    256e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2570:	0019      	movs	r1, r3
    2572:	780b      	ldrb	r3, [r1, #0]
    2574:	4213      	tst	r3, r2
    2576:	d1fc      	bne.n	2572 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2578:	4770      	bx	lr
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	40000400 	.word	0x40000400
    2580:	40000c00 	.word	0x40000c00

00002584 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2584:	b570      	push	{r4, r5, r6, lr}
    2586:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2588:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    258a:	780d      	ldrb	r5, [r1, #0]
    258c:	022d      	lsls	r5, r5, #8
    258e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2590:	784b      	ldrb	r3, [r1, #1]
    2592:	2b00      	cmp	r3, #0
    2594:	d002      	beq.n	259c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2596:	2380      	movs	r3, #128	; 0x80
    2598:	02db      	lsls	r3, r3, #11
    259a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    259c:	7a4b      	ldrb	r3, [r1, #9]
    259e:	2b00      	cmp	r3, #0
    25a0:	d002      	beq.n	25a8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    25a2:	2380      	movs	r3, #128	; 0x80
    25a4:	031b      	lsls	r3, r3, #12
    25a6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    25a8:	6848      	ldr	r0, [r1, #4]
    25aa:	2801      	cmp	r0, #1
    25ac:	d910      	bls.n	25d0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    25ae:	1e43      	subs	r3, r0, #1
    25b0:	4218      	tst	r0, r3
    25b2:	d134      	bne.n	261e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    25b4:	2802      	cmp	r0, #2
    25b6:	d930      	bls.n	261a <system_gclk_gen_set_config+0x96>
    25b8:	2302      	movs	r3, #2
    25ba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    25bc:	3201      	adds	r2, #1
						mask <<= 1) {
    25be:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    25c0:	4298      	cmp	r0, r3
    25c2:	d8fb      	bhi.n	25bc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    25c4:	0212      	lsls	r2, r2, #8
    25c6:	4332      	orrs	r2, r6
    25c8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    25ca:	2380      	movs	r3, #128	; 0x80
    25cc:	035b      	lsls	r3, r3, #13
    25ce:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    25d0:	7a0b      	ldrb	r3, [r1, #8]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d002      	beq.n	25dc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	039b      	lsls	r3, r3, #14
    25da:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25dc:	4a13      	ldr	r2, [pc, #76]	; (262c <system_gclk_gen_set_config+0xa8>)
    25de:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    25e0:	b25b      	sxtb	r3, r3
    25e2:	2b00      	cmp	r3, #0
    25e4:	dbfb      	blt.n	25de <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    25e6:	4b12      	ldr	r3, [pc, #72]	; (2630 <system_gclk_gen_set_config+0xac>)
    25e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    25ea:	4b12      	ldr	r3, [pc, #72]	; (2634 <system_gclk_gen_set_config+0xb0>)
    25ec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25ee:	4a0f      	ldr	r2, [pc, #60]	; (262c <system_gclk_gen_set_config+0xa8>)
    25f0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    25f2:	b25b      	sxtb	r3, r3
    25f4:	2b00      	cmp	r3, #0
    25f6:	dbfb      	blt.n	25f0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    25f8:	4b0c      	ldr	r3, [pc, #48]	; (262c <system_gclk_gen_set_config+0xa8>)
    25fa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25fc:	001a      	movs	r2, r3
    25fe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2600:	b25b      	sxtb	r3, r3
    2602:	2b00      	cmp	r3, #0
    2604:	dbfb      	blt.n	25fe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2606:	4a09      	ldr	r2, [pc, #36]	; (262c <system_gclk_gen_set_config+0xa8>)
    2608:	6853      	ldr	r3, [r2, #4]
    260a:	2180      	movs	r1, #128	; 0x80
    260c:	0249      	lsls	r1, r1, #9
    260e:	400b      	ands	r3, r1
    2610:	431d      	orrs	r5, r3
    2612:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2614:	4b08      	ldr	r3, [pc, #32]	; (2638 <system_gclk_gen_set_config+0xb4>)
    2616:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2618:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    261a:	2200      	movs	r2, #0
    261c:	e7d2      	b.n	25c4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    261e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2620:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2622:	2380      	movs	r3, #128	; 0x80
    2624:	029b      	lsls	r3, r3, #10
    2626:	431d      	orrs	r5, r3
    2628:	e7d2      	b.n	25d0 <system_gclk_gen_set_config+0x4c>
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	40000c00 	.word	0x40000c00
    2630:	00002101 	.word	0x00002101
    2634:	40000c08 	.word	0x40000c08
    2638:	00002141 	.word	0x00002141

0000263c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    263c:	b510      	push	{r4, lr}
    263e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2640:	4a0b      	ldr	r2, [pc, #44]	; (2670 <system_gclk_gen_enable+0x34>)
    2642:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2644:	b25b      	sxtb	r3, r3
    2646:	2b00      	cmp	r3, #0
    2648:	dbfb      	blt.n	2642 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    264a:	4b0a      	ldr	r3, [pc, #40]	; (2674 <system_gclk_gen_enable+0x38>)
    264c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    264e:	4b0a      	ldr	r3, [pc, #40]	; (2678 <system_gclk_gen_enable+0x3c>)
    2650:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2652:	4a07      	ldr	r2, [pc, #28]	; (2670 <system_gclk_gen_enable+0x34>)
    2654:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2656:	b25b      	sxtb	r3, r3
    2658:	2b00      	cmp	r3, #0
    265a:	dbfb      	blt.n	2654 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    265c:	4a04      	ldr	r2, [pc, #16]	; (2670 <system_gclk_gen_enable+0x34>)
    265e:	6851      	ldr	r1, [r2, #4]
    2660:	2380      	movs	r3, #128	; 0x80
    2662:	025b      	lsls	r3, r3, #9
    2664:	430b      	orrs	r3, r1
    2666:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <system_gclk_gen_enable+0x40>)
    266a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    266c:	bd10      	pop	{r4, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	40000c00 	.word	0x40000c00
    2674:	00002101 	.word	0x00002101
    2678:	40000c04 	.word	0x40000c04
    267c:	00002141 	.word	0x00002141

00002680 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2684:	4a1a      	ldr	r2, [pc, #104]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    2686:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2688:	b25b      	sxtb	r3, r3
    268a:	2b00      	cmp	r3, #0
    268c:	dbfb      	blt.n	2686 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    268e:	4b19      	ldr	r3, [pc, #100]	; (26f4 <system_gclk_gen_get_hz+0x74>)
    2690:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2692:	4b19      	ldr	r3, [pc, #100]	; (26f8 <system_gclk_gen_get_hz+0x78>)
    2694:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2696:	4a16      	ldr	r2, [pc, #88]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    2698:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    269a:	b25b      	sxtb	r3, r3
    269c:	2b00      	cmp	r3, #0
    269e:	dbfb      	blt.n	2698 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    26a0:	4e13      	ldr	r6, [pc, #76]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    26a2:	6870      	ldr	r0, [r6, #4]
    26a4:	04c0      	lsls	r0, r0, #19
    26a6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    26a8:	4b14      	ldr	r3, [pc, #80]	; (26fc <system_gclk_gen_get_hz+0x7c>)
    26aa:	4798      	blx	r3
    26ac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26ae:	4b12      	ldr	r3, [pc, #72]	; (26f8 <system_gclk_gen_get_hz+0x78>)
    26b0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    26b2:	6876      	ldr	r6, [r6, #4]
    26b4:	02f6      	lsls	r6, r6, #11
    26b6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26b8:	4b11      	ldr	r3, [pc, #68]	; (2700 <system_gclk_gen_get_hz+0x80>)
    26ba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26bc:	4a0c      	ldr	r2, [pc, #48]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    26be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26c0:	b25b      	sxtb	r3, r3
    26c2:	2b00      	cmp	r3, #0
    26c4:	dbfb      	blt.n	26be <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    26c6:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <system_gclk_gen_get_hz+0x70>)
    26c8:	689c      	ldr	r4, [r3, #8]
    26ca:	0224      	lsls	r4, r4, #8
    26cc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    26ce:	4b0d      	ldr	r3, [pc, #52]	; (2704 <system_gclk_gen_get_hz+0x84>)
    26d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    26d2:	2e00      	cmp	r6, #0
    26d4:	d107      	bne.n	26e6 <system_gclk_gen_get_hz+0x66>
    26d6:	2c01      	cmp	r4, #1
    26d8:	d907      	bls.n	26ea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    26da:	0021      	movs	r1, r4
    26dc:	0028      	movs	r0, r5
    26de:	4b0a      	ldr	r3, [pc, #40]	; (2708 <system_gclk_gen_get_hz+0x88>)
    26e0:	4798      	blx	r3
    26e2:	0005      	movs	r5, r0
    26e4:	e001      	b.n	26ea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    26e6:	3401      	adds	r4, #1
    26e8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    26ea:	0028      	movs	r0, r5
    26ec:	bd70      	pop	{r4, r5, r6, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	40000c00 	.word	0x40000c00
    26f4:	00002101 	.word	0x00002101
    26f8:	40000c04 	.word	0x40000c04
    26fc:	00002171 	.word	0x00002171
    2700:	40000c08 	.word	0x40000c08
    2704:	00002141 	.word	0x00002141
    2708:	00002a65 	.word	0x00002a65

0000270c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    270c:	b510      	push	{r4, lr}
    270e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2710:	4b06      	ldr	r3, [pc, #24]	; (272c <system_gclk_chan_enable+0x20>)
    2712:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2714:	4b06      	ldr	r3, [pc, #24]	; (2730 <system_gclk_chan_enable+0x24>)
    2716:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2718:	4a06      	ldr	r2, [pc, #24]	; (2734 <system_gclk_chan_enable+0x28>)
    271a:	8853      	ldrh	r3, [r2, #2]
    271c:	2180      	movs	r1, #128	; 0x80
    271e:	01c9      	lsls	r1, r1, #7
    2720:	430b      	orrs	r3, r1
    2722:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2724:	4b04      	ldr	r3, [pc, #16]	; (2738 <system_gclk_chan_enable+0x2c>)
    2726:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2728:	bd10      	pop	{r4, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	00002101 	.word	0x00002101
    2730:	40000c02 	.word	0x40000c02
    2734:	40000c00 	.word	0x40000c00
    2738:	00002141 	.word	0x00002141

0000273c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    273c:	b510      	push	{r4, lr}
    273e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2740:	4b0f      	ldr	r3, [pc, #60]	; (2780 <system_gclk_chan_disable+0x44>)
    2742:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2744:	4b0f      	ldr	r3, [pc, #60]	; (2784 <system_gclk_chan_disable+0x48>)
    2746:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2748:	4a0f      	ldr	r2, [pc, #60]	; (2788 <system_gclk_chan_disable+0x4c>)
    274a:	8853      	ldrh	r3, [r2, #2]
    274c:	051b      	lsls	r3, r3, #20
    274e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2750:	8853      	ldrh	r3, [r2, #2]
    2752:	490e      	ldr	r1, [pc, #56]	; (278c <system_gclk_chan_disable+0x50>)
    2754:	400b      	ands	r3, r1
    2756:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2758:	8853      	ldrh	r3, [r2, #2]
    275a:	490d      	ldr	r1, [pc, #52]	; (2790 <system_gclk_chan_disable+0x54>)
    275c:	400b      	ands	r3, r1
    275e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2760:	0011      	movs	r1, r2
    2762:	2280      	movs	r2, #128	; 0x80
    2764:	01d2      	lsls	r2, r2, #7
    2766:	884b      	ldrh	r3, [r1, #2]
    2768:	4213      	tst	r3, r2
    276a:	d1fc      	bne.n	2766 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    276c:	4906      	ldr	r1, [pc, #24]	; (2788 <system_gclk_chan_disable+0x4c>)
    276e:	884a      	ldrh	r2, [r1, #2]
    2770:	0203      	lsls	r3, r0, #8
    2772:	4806      	ldr	r0, [pc, #24]	; (278c <system_gclk_chan_disable+0x50>)
    2774:	4002      	ands	r2, r0
    2776:	4313      	orrs	r3, r2
    2778:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    277a:	4b06      	ldr	r3, [pc, #24]	; (2794 <system_gclk_chan_disable+0x58>)
    277c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    277e:	bd10      	pop	{r4, pc}
    2780:	00002101 	.word	0x00002101
    2784:	40000c02 	.word	0x40000c02
    2788:	40000c00 	.word	0x40000c00
    278c:	fffff0ff 	.word	0xfffff0ff
    2790:	ffffbfff 	.word	0xffffbfff
    2794:	00002141 	.word	0x00002141

00002798 <system_gclk_chan_set_config>:
{
    2798:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    279a:	780c      	ldrb	r4, [r1, #0]
    279c:	0224      	lsls	r4, r4, #8
    279e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    27a0:	4b02      	ldr	r3, [pc, #8]	; (27ac <system_gclk_chan_set_config+0x14>)
    27a2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    27a4:	b2a4      	uxth	r4, r4
    27a6:	4b02      	ldr	r3, [pc, #8]	; (27b0 <system_gclk_chan_set_config+0x18>)
    27a8:	805c      	strh	r4, [r3, #2]
}
    27aa:	bd10      	pop	{r4, pc}
    27ac:	0000273d 	.word	0x0000273d
    27b0:	40000c00 	.word	0x40000c00

000027b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    27b4:	b510      	push	{r4, lr}
    27b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27b8:	4b06      	ldr	r3, [pc, #24]	; (27d4 <system_gclk_chan_get_hz+0x20>)
    27ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27bc:	4b06      	ldr	r3, [pc, #24]	; (27d8 <system_gclk_chan_get_hz+0x24>)
    27be:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    27c0:	4b06      	ldr	r3, [pc, #24]	; (27dc <system_gclk_chan_get_hz+0x28>)
    27c2:	885c      	ldrh	r4, [r3, #2]
    27c4:	0524      	lsls	r4, r4, #20
    27c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    27c8:	4b05      	ldr	r3, [pc, #20]	; (27e0 <system_gclk_chan_get_hz+0x2c>)
    27ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    27cc:	0020      	movs	r0, r4
    27ce:	4b05      	ldr	r3, [pc, #20]	; (27e4 <system_gclk_chan_get_hz+0x30>)
    27d0:	4798      	blx	r3
}
    27d2:	bd10      	pop	{r4, pc}
    27d4:	00002101 	.word	0x00002101
    27d8:	40000c02 	.word	0x40000c02
    27dc:	40000c00 	.word	0x40000c00
    27e0:	00002141 	.word	0x00002141
    27e4:	00002681 	.word	0x00002681

000027e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    27e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    27ea:	78d3      	ldrb	r3, [r2, #3]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d135      	bne.n	285c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    27f0:	7813      	ldrb	r3, [r2, #0]
    27f2:	2b80      	cmp	r3, #128	; 0x80
    27f4:	d029      	beq.n	284a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    27f6:	061b      	lsls	r3, r3, #24
    27f8:	2480      	movs	r4, #128	; 0x80
    27fa:	0264      	lsls	r4, r4, #9
    27fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    27fe:	7854      	ldrb	r4, [r2, #1]
    2800:	2502      	movs	r5, #2
    2802:	43ac      	bics	r4, r5
    2804:	d106      	bne.n	2814 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2806:	7894      	ldrb	r4, [r2, #2]
    2808:	2c00      	cmp	r4, #0
    280a:	d120      	bne.n	284e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    280c:	2480      	movs	r4, #128	; 0x80
    280e:	02a4      	lsls	r4, r4, #10
    2810:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2812:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2814:	7854      	ldrb	r4, [r2, #1]
    2816:	3c01      	subs	r4, #1
    2818:	2c01      	cmp	r4, #1
    281a:	d91c      	bls.n	2856 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    281c:	040d      	lsls	r5, r1, #16
    281e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2820:	24a0      	movs	r4, #160	; 0xa0
    2822:	05e4      	lsls	r4, r4, #23
    2824:	432c      	orrs	r4, r5
    2826:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2828:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    282a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    282c:	24d0      	movs	r4, #208	; 0xd0
    282e:	0624      	lsls	r4, r4, #24
    2830:	432c      	orrs	r4, r5
    2832:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2834:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2836:	78d4      	ldrb	r4, [r2, #3]
    2838:	2c00      	cmp	r4, #0
    283a:	d122      	bne.n	2882 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    283c:	035b      	lsls	r3, r3, #13
    283e:	d51c      	bpl.n	287a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2840:	7893      	ldrb	r3, [r2, #2]
    2842:	2b01      	cmp	r3, #1
    2844:	d01e      	beq.n	2884 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2846:	6141      	str	r1, [r0, #20]
    2848:	e017      	b.n	287a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    284a:	2300      	movs	r3, #0
    284c:	e7d7      	b.n	27fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    284e:	24c0      	movs	r4, #192	; 0xc0
    2850:	02e4      	lsls	r4, r4, #11
    2852:	4323      	orrs	r3, r4
    2854:	e7dd      	b.n	2812 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2856:	4c0d      	ldr	r4, [pc, #52]	; (288c <_system_pinmux_config+0xa4>)
    2858:	4023      	ands	r3, r4
    285a:	e7df      	b.n	281c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    285c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    285e:	040c      	lsls	r4, r1, #16
    2860:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2862:	23a0      	movs	r3, #160	; 0xa0
    2864:	05db      	lsls	r3, r3, #23
    2866:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2868:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    286a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    286c:	23d0      	movs	r3, #208	; 0xd0
    286e:	061b      	lsls	r3, r3, #24
    2870:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2872:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2874:	78d3      	ldrb	r3, [r2, #3]
    2876:	2b00      	cmp	r3, #0
    2878:	d103      	bne.n	2882 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    287a:	7853      	ldrb	r3, [r2, #1]
    287c:	3b01      	subs	r3, #1
    287e:	2b01      	cmp	r3, #1
    2880:	d902      	bls.n	2888 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2882:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2884:	6181      	str	r1, [r0, #24]
    2886:	e7f8      	b.n	287a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2888:	6081      	str	r1, [r0, #8]
}
    288a:	e7fa      	b.n	2882 <_system_pinmux_config+0x9a>
    288c:	fffbffff 	.word	0xfffbffff

00002890 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2890:	b510      	push	{r4, lr}
    2892:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2894:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2896:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2898:	2900      	cmp	r1, #0
    289a:	d104      	bne.n	28a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    289c:	0943      	lsrs	r3, r0, #5
    289e:	01db      	lsls	r3, r3, #7
    28a0:	4905      	ldr	r1, [pc, #20]	; (28b8 <system_pinmux_pin_set_config+0x28>)
    28a2:	468c      	mov	ip, r1
    28a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    28a6:	241f      	movs	r4, #31
    28a8:	4020      	ands	r0, r4
    28aa:	2101      	movs	r1, #1
    28ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    28ae:	0018      	movs	r0, r3
    28b0:	4b02      	ldr	r3, [pc, #8]	; (28bc <system_pinmux_pin_set_config+0x2c>)
    28b2:	4798      	blx	r3
}
    28b4:	bd10      	pop	{r4, pc}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	41004400 	.word	0x41004400
    28bc:	000027e9 	.word	0x000027e9

000028c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    28c0:	4770      	bx	lr
	...

000028c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    28c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <system_init+0x18>)
    28c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    28ca:	4b05      	ldr	r3, [pc, #20]	; (28e0 <system_init+0x1c>)
    28cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    28ce:	4b05      	ldr	r3, [pc, #20]	; (28e4 <system_init+0x20>)
    28d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    28d2:	4b05      	ldr	r3, [pc, #20]	; (28e8 <system_init+0x24>)
    28d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <system_init+0x28>)
    28d8:	4798      	blx	r3
}
    28da:	bd10      	pop	{r4, pc}
    28dc:	000023e5 	.word	0x000023e5
    28e0:	000020fd 	.word	0x000020fd
    28e4:	000028c1 	.word	0x000028c1
    28e8:	000028c1 	.word	0x000028c1
    28ec:	000028c1 	.word	0x000028c1

000028f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28f0:	e7fe      	b.n	28f0 <Dummy_Handler>
	...

000028f4 <Reset_Handler>:
{
    28f4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    28f6:	4a26      	ldr	r2, [pc, #152]	; (2990 <Reset_Handler+0x9c>)
    28f8:	4b26      	ldr	r3, [pc, #152]	; (2994 <Reset_Handler+0xa0>)
    28fa:	429a      	cmp	r2, r3
    28fc:	d011      	beq.n	2922 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    28fe:	001a      	movs	r2, r3
    2900:	4b25      	ldr	r3, [pc, #148]	; (2998 <Reset_Handler+0xa4>)
    2902:	429a      	cmp	r2, r3
    2904:	d20d      	bcs.n	2922 <Reset_Handler+0x2e>
    2906:	4a25      	ldr	r2, [pc, #148]	; (299c <Reset_Handler+0xa8>)
    2908:	3303      	adds	r3, #3
    290a:	1a9b      	subs	r3, r3, r2
    290c:	089b      	lsrs	r3, r3, #2
    290e:	3301      	adds	r3, #1
    2910:	009b      	lsls	r3, r3, #2
    2912:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2914:	481f      	ldr	r0, [pc, #124]	; (2994 <Reset_Handler+0xa0>)
    2916:	491e      	ldr	r1, [pc, #120]	; (2990 <Reset_Handler+0x9c>)
    2918:	588c      	ldr	r4, [r1, r2]
    291a:	5084      	str	r4, [r0, r2]
    291c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    291e:	429a      	cmp	r2, r3
    2920:	d1fa      	bne.n	2918 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2922:	4a1f      	ldr	r2, [pc, #124]	; (29a0 <Reset_Handler+0xac>)
    2924:	4b1f      	ldr	r3, [pc, #124]	; (29a4 <Reset_Handler+0xb0>)
    2926:	429a      	cmp	r2, r3
    2928:	d20a      	bcs.n	2940 <Reset_Handler+0x4c>
    292a:	43d3      	mvns	r3, r2
    292c:	491d      	ldr	r1, [pc, #116]	; (29a4 <Reset_Handler+0xb0>)
    292e:	185b      	adds	r3, r3, r1
    2930:	2103      	movs	r1, #3
    2932:	438b      	bics	r3, r1
    2934:	3304      	adds	r3, #4
    2936:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2938:	2100      	movs	r1, #0
    293a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    293c:	4293      	cmp	r3, r2
    293e:	d1fc      	bne.n	293a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2940:	4a19      	ldr	r2, [pc, #100]	; (29a8 <Reset_Handler+0xb4>)
    2942:	21ff      	movs	r1, #255	; 0xff
    2944:	4b19      	ldr	r3, [pc, #100]	; (29ac <Reset_Handler+0xb8>)
    2946:	438b      	bics	r3, r1
    2948:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    294a:	39fd      	subs	r1, #253	; 0xfd
    294c:	2390      	movs	r3, #144	; 0x90
    294e:	005b      	lsls	r3, r3, #1
    2950:	4a17      	ldr	r2, [pc, #92]	; (29b0 <Reset_Handler+0xbc>)
    2952:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2954:	4b17      	ldr	r3, [pc, #92]	; (29b4 <Reset_Handler+0xc0>)
    2956:	7b9a      	ldrb	r2, [r3, #14]
    2958:	312e      	adds	r1, #46	; 0x2e
    295a:	438a      	bics	r2, r1
    295c:	2120      	movs	r1, #32
    295e:	430a      	orrs	r2, r1
    2960:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2962:	7b9a      	ldrb	r2, [r3, #14]
    2964:	210c      	movs	r1, #12
    2966:	438a      	bics	r2, r1
    2968:	2108      	movs	r1, #8
    296a:	430a      	orrs	r2, r1
    296c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    296e:	7b9a      	ldrb	r2, [r3, #14]
    2970:	2103      	movs	r1, #3
    2972:	438a      	bics	r2, r1
    2974:	2102      	movs	r1, #2
    2976:	430a      	orrs	r2, r1
    2978:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    297a:	4a0f      	ldr	r2, [pc, #60]	; (29b8 <Reset_Handler+0xc4>)
    297c:	6853      	ldr	r3, [r2, #4]
    297e:	2180      	movs	r1, #128	; 0x80
    2980:	430b      	orrs	r3, r1
    2982:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2984:	4b0d      	ldr	r3, [pc, #52]	; (29bc <Reset_Handler+0xc8>)
    2986:	4798      	blx	r3
        main();
    2988:	4b0d      	ldr	r3, [pc, #52]	; (29c0 <Reset_Handler+0xcc>)
    298a:	4798      	blx	r3
    298c:	e7fe      	b.n	298c <Reset_Handler+0x98>
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	00002e80 	.word	0x00002e80
    2994:	20000000 	.word	0x20000000
    2998:	2000007c 	.word	0x2000007c
    299c:	20000004 	.word	0x20000004
    29a0:	20000080 	.word	0x20000080
    29a4:	2000089c 	.word	0x2000089c
    29a8:	e000ed00 	.word	0xe000ed00
    29ac:	00000000 	.word	0x00000000
    29b0:	41007000 	.word	0x41007000
    29b4:	41004800 	.word	0x41004800
    29b8:	41004000 	.word	0x41004000
    29bc:	00002b7d 	.word	0x00002b7d
    29c0:	00002a05 	.word	0x00002a05

000029c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    29c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    29c6:	4a06      	ldr	r2, [pc, #24]	; (29e0 <_sbrk+0x1c>)
    29c8:	6812      	ldr	r2, [r2, #0]
    29ca:	2a00      	cmp	r2, #0
    29cc:	d004      	beq.n	29d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    29ce:	4a04      	ldr	r2, [pc, #16]	; (29e0 <_sbrk+0x1c>)
    29d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    29d2:	18c3      	adds	r3, r0, r3
    29d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    29d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    29d8:	4902      	ldr	r1, [pc, #8]	; (29e4 <_sbrk+0x20>)
    29da:	4a01      	ldr	r2, [pc, #4]	; (29e0 <_sbrk+0x1c>)
    29dc:	6011      	str	r1, [r2, #0]
    29de:	e7f6      	b.n	29ce <_sbrk+0xa>
    29e0:	20000180 	.word	0x20000180
    29e4:	20000ca0 	.word	0x20000ca0

000029e8 <setI2CDetect>:
	}

}

void setI2CDetect()
{
    29e8:	b500      	push	{lr}
    29ea:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    29ec:	a901      	add	r1, sp, #4
    29ee:	2300      	movs	r3, #0
    29f0:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    29f2:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    29f4:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(DETECT_PIN, &config_port_pin);
    29f6:	2018      	movs	r0, #24
    29f8:	4b01      	ldr	r3, [pc, #4]	; (2a00 <setI2CDetect+0x18>)
    29fa:	4798      	blx	r3
}
    29fc:	b003      	add	sp, #12
    29fe:	bd00      	pop	{pc}
    2a00:	00000e1d 	.word	0x00000e1d

00002a04 <main>:


int main (void)
{
    2a04:	b570      	push	{r4, r5, r6, lr}
	system_init();
    2a06:	4b0c      	ldr	r3, [pc, #48]	; (2a38 <main+0x34>)
    2a08:	4798      	blx	r3
	delay_init();
    2a0a:	4b0c      	ldr	r3, [pc, #48]	; (2a3c <main+0x38>)
    2a0c:	4798      	blx	r3
	
	ir_sensor_init();
    2a0e:	4b0c      	ldr	r3, [pc, #48]	; (2a40 <main+0x3c>)
    2a10:	4798      	blx	r3
	RGBPI55Init();
    2a12:	4b0c      	ldr	r3, [pc, #48]	; (2a44 <main+0x40>)
    2a14:	4798      	blx	r3
	//delay_cycles_ms(1000);
	setI2CDetect();
    2a16:	4b0c      	ldr	r3, [pc, #48]	; (2a48 <main+0x44>)
    2a18:	4798      	blx	r3
	
	
	configure_i2c_slave();
    2a1a:	4b0c      	ldr	r3, [pc, #48]	; (2a4c <main+0x48>)
    2a1c:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    2a1e:	4b0c      	ldr	r3, [pc, #48]	; (2a50 <main+0x4c>)
    2a20:	4798      	blx	r3
	testTimer();
    2a22:	4b0c      	ldr	r3, [pc, #48]	; (2a54 <main+0x50>)
    2a24:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	while(true) {
		//fadeREDControlled();
		updaeteADDLED();
    2a26:	4e0c      	ldr	r6, [pc, #48]	; (2a58 <main+0x54>)
		read_all_values();
    2a28:	4d0c      	ldr	r5, [pc, #48]	; (2a5c <main+0x58>)
		//testADDLED();
		//fadeREDControlled();
		//readI2CDetect();
		//fadeRED();
		delay_ms(10);
    2a2a:	4c0d      	ldr	r4, [pc, #52]	; (2a60 <main+0x5c>)
		updaeteADDLED();
    2a2c:	47b0      	blx	r6
		read_all_values();
    2a2e:	47a8      	blx	r5
		delay_ms(10);
    2a30:	200a      	movs	r0, #10
    2a32:	47a0      	blx	r4
    2a34:	e7fa      	b.n	2a2c <main+0x28>
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	000028c5 	.word	0x000028c5
    2a3c:	00000515 	.word	0x00000515
    2a40:	00001d35 	.word	0x00001d35
    2a44:	00001f55 	.word	0x00001f55
    2a48:	000029e9 	.word	0x000029e9
    2a4c:	00001af9 	.word	0x00001af9
    2a50:	00001b91 	.word	0x00001b91
    2a54:	00000501 	.word	0x00000501
    2a58:	00000405 	.word	0x00000405
    2a5c:	0000197d 	.word	0x0000197d
    2a60:	00000555 	.word	0x00000555

00002a64 <__udivsi3>:
    2a64:	2200      	movs	r2, #0
    2a66:	0843      	lsrs	r3, r0, #1
    2a68:	428b      	cmp	r3, r1
    2a6a:	d374      	bcc.n	2b56 <__udivsi3+0xf2>
    2a6c:	0903      	lsrs	r3, r0, #4
    2a6e:	428b      	cmp	r3, r1
    2a70:	d35f      	bcc.n	2b32 <__udivsi3+0xce>
    2a72:	0a03      	lsrs	r3, r0, #8
    2a74:	428b      	cmp	r3, r1
    2a76:	d344      	bcc.n	2b02 <__udivsi3+0x9e>
    2a78:	0b03      	lsrs	r3, r0, #12
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d328      	bcc.n	2ad0 <__udivsi3+0x6c>
    2a7e:	0c03      	lsrs	r3, r0, #16
    2a80:	428b      	cmp	r3, r1
    2a82:	d30d      	bcc.n	2aa0 <__udivsi3+0x3c>
    2a84:	22ff      	movs	r2, #255	; 0xff
    2a86:	0209      	lsls	r1, r1, #8
    2a88:	ba12      	rev	r2, r2
    2a8a:	0c03      	lsrs	r3, r0, #16
    2a8c:	428b      	cmp	r3, r1
    2a8e:	d302      	bcc.n	2a96 <__udivsi3+0x32>
    2a90:	1212      	asrs	r2, r2, #8
    2a92:	0209      	lsls	r1, r1, #8
    2a94:	d065      	beq.n	2b62 <__udivsi3+0xfe>
    2a96:	0b03      	lsrs	r3, r0, #12
    2a98:	428b      	cmp	r3, r1
    2a9a:	d319      	bcc.n	2ad0 <__udivsi3+0x6c>
    2a9c:	e000      	b.n	2aa0 <__udivsi3+0x3c>
    2a9e:	0a09      	lsrs	r1, r1, #8
    2aa0:	0bc3      	lsrs	r3, r0, #15
    2aa2:	428b      	cmp	r3, r1
    2aa4:	d301      	bcc.n	2aaa <__udivsi3+0x46>
    2aa6:	03cb      	lsls	r3, r1, #15
    2aa8:	1ac0      	subs	r0, r0, r3
    2aaa:	4152      	adcs	r2, r2
    2aac:	0b83      	lsrs	r3, r0, #14
    2aae:	428b      	cmp	r3, r1
    2ab0:	d301      	bcc.n	2ab6 <__udivsi3+0x52>
    2ab2:	038b      	lsls	r3, r1, #14
    2ab4:	1ac0      	subs	r0, r0, r3
    2ab6:	4152      	adcs	r2, r2
    2ab8:	0b43      	lsrs	r3, r0, #13
    2aba:	428b      	cmp	r3, r1
    2abc:	d301      	bcc.n	2ac2 <__udivsi3+0x5e>
    2abe:	034b      	lsls	r3, r1, #13
    2ac0:	1ac0      	subs	r0, r0, r3
    2ac2:	4152      	adcs	r2, r2
    2ac4:	0b03      	lsrs	r3, r0, #12
    2ac6:	428b      	cmp	r3, r1
    2ac8:	d301      	bcc.n	2ace <__udivsi3+0x6a>
    2aca:	030b      	lsls	r3, r1, #12
    2acc:	1ac0      	subs	r0, r0, r3
    2ace:	4152      	adcs	r2, r2
    2ad0:	0ac3      	lsrs	r3, r0, #11
    2ad2:	428b      	cmp	r3, r1
    2ad4:	d301      	bcc.n	2ada <__udivsi3+0x76>
    2ad6:	02cb      	lsls	r3, r1, #11
    2ad8:	1ac0      	subs	r0, r0, r3
    2ada:	4152      	adcs	r2, r2
    2adc:	0a83      	lsrs	r3, r0, #10
    2ade:	428b      	cmp	r3, r1
    2ae0:	d301      	bcc.n	2ae6 <__udivsi3+0x82>
    2ae2:	028b      	lsls	r3, r1, #10
    2ae4:	1ac0      	subs	r0, r0, r3
    2ae6:	4152      	adcs	r2, r2
    2ae8:	0a43      	lsrs	r3, r0, #9
    2aea:	428b      	cmp	r3, r1
    2aec:	d301      	bcc.n	2af2 <__udivsi3+0x8e>
    2aee:	024b      	lsls	r3, r1, #9
    2af0:	1ac0      	subs	r0, r0, r3
    2af2:	4152      	adcs	r2, r2
    2af4:	0a03      	lsrs	r3, r0, #8
    2af6:	428b      	cmp	r3, r1
    2af8:	d301      	bcc.n	2afe <__udivsi3+0x9a>
    2afa:	020b      	lsls	r3, r1, #8
    2afc:	1ac0      	subs	r0, r0, r3
    2afe:	4152      	adcs	r2, r2
    2b00:	d2cd      	bcs.n	2a9e <__udivsi3+0x3a>
    2b02:	09c3      	lsrs	r3, r0, #7
    2b04:	428b      	cmp	r3, r1
    2b06:	d301      	bcc.n	2b0c <__udivsi3+0xa8>
    2b08:	01cb      	lsls	r3, r1, #7
    2b0a:	1ac0      	subs	r0, r0, r3
    2b0c:	4152      	adcs	r2, r2
    2b0e:	0983      	lsrs	r3, r0, #6
    2b10:	428b      	cmp	r3, r1
    2b12:	d301      	bcc.n	2b18 <__udivsi3+0xb4>
    2b14:	018b      	lsls	r3, r1, #6
    2b16:	1ac0      	subs	r0, r0, r3
    2b18:	4152      	adcs	r2, r2
    2b1a:	0943      	lsrs	r3, r0, #5
    2b1c:	428b      	cmp	r3, r1
    2b1e:	d301      	bcc.n	2b24 <__udivsi3+0xc0>
    2b20:	014b      	lsls	r3, r1, #5
    2b22:	1ac0      	subs	r0, r0, r3
    2b24:	4152      	adcs	r2, r2
    2b26:	0903      	lsrs	r3, r0, #4
    2b28:	428b      	cmp	r3, r1
    2b2a:	d301      	bcc.n	2b30 <__udivsi3+0xcc>
    2b2c:	010b      	lsls	r3, r1, #4
    2b2e:	1ac0      	subs	r0, r0, r3
    2b30:	4152      	adcs	r2, r2
    2b32:	08c3      	lsrs	r3, r0, #3
    2b34:	428b      	cmp	r3, r1
    2b36:	d301      	bcc.n	2b3c <__udivsi3+0xd8>
    2b38:	00cb      	lsls	r3, r1, #3
    2b3a:	1ac0      	subs	r0, r0, r3
    2b3c:	4152      	adcs	r2, r2
    2b3e:	0883      	lsrs	r3, r0, #2
    2b40:	428b      	cmp	r3, r1
    2b42:	d301      	bcc.n	2b48 <__udivsi3+0xe4>
    2b44:	008b      	lsls	r3, r1, #2
    2b46:	1ac0      	subs	r0, r0, r3
    2b48:	4152      	adcs	r2, r2
    2b4a:	0843      	lsrs	r3, r0, #1
    2b4c:	428b      	cmp	r3, r1
    2b4e:	d301      	bcc.n	2b54 <__udivsi3+0xf0>
    2b50:	004b      	lsls	r3, r1, #1
    2b52:	1ac0      	subs	r0, r0, r3
    2b54:	4152      	adcs	r2, r2
    2b56:	1a41      	subs	r1, r0, r1
    2b58:	d200      	bcs.n	2b5c <__udivsi3+0xf8>
    2b5a:	4601      	mov	r1, r0
    2b5c:	4152      	adcs	r2, r2
    2b5e:	4610      	mov	r0, r2
    2b60:	4770      	bx	lr
    2b62:	e7ff      	b.n	2b64 <__udivsi3+0x100>
    2b64:	b501      	push	{r0, lr}
    2b66:	2000      	movs	r0, #0
    2b68:	f000 f806 	bl	2b78 <__aeabi_idiv0>
    2b6c:	bd02      	pop	{r1, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)

00002b70 <__aeabi_uidivmod>:
    2b70:	2900      	cmp	r1, #0
    2b72:	d0f7      	beq.n	2b64 <__udivsi3+0x100>
    2b74:	e776      	b.n	2a64 <__udivsi3>
    2b76:	4770      	bx	lr

00002b78 <__aeabi_idiv0>:
    2b78:	4770      	bx	lr
    2b7a:	46c0      	nop			; (mov r8, r8)

00002b7c <__libc_init_array>:
    2b7c:	b570      	push	{r4, r5, r6, lr}
    2b7e:	2600      	movs	r6, #0
    2b80:	4d0c      	ldr	r5, [pc, #48]	; (2bb4 <__libc_init_array+0x38>)
    2b82:	4c0d      	ldr	r4, [pc, #52]	; (2bb8 <__libc_init_array+0x3c>)
    2b84:	1b64      	subs	r4, r4, r5
    2b86:	10a4      	asrs	r4, r4, #2
    2b88:	42a6      	cmp	r6, r4
    2b8a:	d109      	bne.n	2ba0 <__libc_init_array+0x24>
    2b8c:	2600      	movs	r6, #0
    2b8e:	f000 f967 	bl	2e60 <_init>
    2b92:	4d0a      	ldr	r5, [pc, #40]	; (2bbc <__libc_init_array+0x40>)
    2b94:	4c0a      	ldr	r4, [pc, #40]	; (2bc0 <__libc_init_array+0x44>)
    2b96:	1b64      	subs	r4, r4, r5
    2b98:	10a4      	asrs	r4, r4, #2
    2b9a:	42a6      	cmp	r6, r4
    2b9c:	d105      	bne.n	2baa <__libc_init_array+0x2e>
    2b9e:	bd70      	pop	{r4, r5, r6, pc}
    2ba0:	00b3      	lsls	r3, r6, #2
    2ba2:	58eb      	ldr	r3, [r5, r3]
    2ba4:	4798      	blx	r3
    2ba6:	3601      	adds	r6, #1
    2ba8:	e7ee      	b.n	2b88 <__libc_init_array+0xc>
    2baa:	00b3      	lsls	r3, r6, #2
    2bac:	58eb      	ldr	r3, [r5, r3]
    2bae:	4798      	blx	r3
    2bb0:	3601      	adds	r6, #1
    2bb2:	e7f2      	b.n	2b9a <__libc_init_array+0x1e>
    2bb4:	00002e6c 	.word	0x00002e6c
    2bb8:	00002e6c 	.word	0x00002e6c
    2bbc:	00002e6c 	.word	0x00002e6c
    2bc0:	00002e70 	.word	0x00002e70

00002bc4 <malloc>:
    2bc4:	b510      	push	{r4, lr}
    2bc6:	4b03      	ldr	r3, [pc, #12]	; (2bd4 <malloc+0x10>)
    2bc8:	0001      	movs	r1, r0
    2bca:	6818      	ldr	r0, [r3, #0]
    2bcc:	f000 f816 	bl	2bfc <_malloc_r>
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	20000018 	.word	0x20000018

00002bd8 <memcpy>:
    2bd8:	2300      	movs	r3, #0
    2bda:	b510      	push	{r4, lr}
    2bdc:	429a      	cmp	r2, r3
    2bde:	d100      	bne.n	2be2 <memcpy+0xa>
    2be0:	bd10      	pop	{r4, pc}
    2be2:	5ccc      	ldrb	r4, [r1, r3]
    2be4:	54c4      	strb	r4, [r0, r3]
    2be6:	3301      	adds	r3, #1
    2be8:	e7f8      	b.n	2bdc <memcpy+0x4>

00002bea <memset>:
    2bea:	0003      	movs	r3, r0
    2bec:	1882      	adds	r2, r0, r2
    2bee:	4293      	cmp	r3, r2
    2bf0:	d100      	bne.n	2bf4 <memset+0xa>
    2bf2:	4770      	bx	lr
    2bf4:	7019      	strb	r1, [r3, #0]
    2bf6:	3301      	adds	r3, #1
    2bf8:	e7f9      	b.n	2bee <memset+0x4>
	...

00002bfc <_malloc_r>:
    2bfc:	2303      	movs	r3, #3
    2bfe:	b570      	push	{r4, r5, r6, lr}
    2c00:	1ccd      	adds	r5, r1, #3
    2c02:	439d      	bics	r5, r3
    2c04:	3508      	adds	r5, #8
    2c06:	0006      	movs	r6, r0
    2c08:	2d0c      	cmp	r5, #12
    2c0a:	d21e      	bcs.n	2c4a <_malloc_r+0x4e>
    2c0c:	250c      	movs	r5, #12
    2c0e:	42a9      	cmp	r1, r5
    2c10:	d81d      	bhi.n	2c4e <_malloc_r+0x52>
    2c12:	0030      	movs	r0, r6
    2c14:	f000 f862 	bl	2cdc <__malloc_lock>
    2c18:	4a25      	ldr	r2, [pc, #148]	; (2cb0 <_malloc_r+0xb4>)
    2c1a:	6814      	ldr	r4, [r2, #0]
    2c1c:	0021      	movs	r1, r4
    2c1e:	2900      	cmp	r1, #0
    2c20:	d119      	bne.n	2c56 <_malloc_r+0x5a>
    2c22:	4c24      	ldr	r4, [pc, #144]	; (2cb4 <_malloc_r+0xb8>)
    2c24:	6823      	ldr	r3, [r4, #0]
    2c26:	2b00      	cmp	r3, #0
    2c28:	d103      	bne.n	2c32 <_malloc_r+0x36>
    2c2a:	0030      	movs	r0, r6
    2c2c:	f000 f844 	bl	2cb8 <_sbrk_r>
    2c30:	6020      	str	r0, [r4, #0]
    2c32:	0029      	movs	r1, r5
    2c34:	0030      	movs	r0, r6
    2c36:	f000 f83f 	bl	2cb8 <_sbrk_r>
    2c3a:	1c43      	adds	r3, r0, #1
    2c3c:	d12c      	bne.n	2c98 <_malloc_r+0x9c>
    2c3e:	230c      	movs	r3, #12
    2c40:	0030      	movs	r0, r6
    2c42:	6033      	str	r3, [r6, #0]
    2c44:	f000 f84b 	bl	2cde <__malloc_unlock>
    2c48:	e003      	b.n	2c52 <_malloc_r+0x56>
    2c4a:	2d00      	cmp	r5, #0
    2c4c:	dadf      	bge.n	2c0e <_malloc_r+0x12>
    2c4e:	230c      	movs	r3, #12
    2c50:	6033      	str	r3, [r6, #0]
    2c52:	2000      	movs	r0, #0
    2c54:	bd70      	pop	{r4, r5, r6, pc}
    2c56:	680b      	ldr	r3, [r1, #0]
    2c58:	1b5b      	subs	r3, r3, r5
    2c5a:	d41a      	bmi.n	2c92 <_malloc_r+0x96>
    2c5c:	2b0b      	cmp	r3, #11
    2c5e:	d903      	bls.n	2c68 <_malloc_r+0x6c>
    2c60:	600b      	str	r3, [r1, #0]
    2c62:	18cc      	adds	r4, r1, r3
    2c64:	6025      	str	r5, [r4, #0]
    2c66:	e003      	b.n	2c70 <_malloc_r+0x74>
    2c68:	428c      	cmp	r4, r1
    2c6a:	d10e      	bne.n	2c8a <_malloc_r+0x8e>
    2c6c:	6863      	ldr	r3, [r4, #4]
    2c6e:	6013      	str	r3, [r2, #0]
    2c70:	0030      	movs	r0, r6
    2c72:	f000 f834 	bl	2cde <__malloc_unlock>
    2c76:	0020      	movs	r0, r4
    2c78:	2207      	movs	r2, #7
    2c7a:	300b      	adds	r0, #11
    2c7c:	1d23      	adds	r3, r4, #4
    2c7e:	4390      	bics	r0, r2
    2c80:	1ac3      	subs	r3, r0, r3
    2c82:	d0e7      	beq.n	2c54 <_malloc_r+0x58>
    2c84:	425a      	negs	r2, r3
    2c86:	50e2      	str	r2, [r4, r3]
    2c88:	e7e4      	b.n	2c54 <_malloc_r+0x58>
    2c8a:	684b      	ldr	r3, [r1, #4]
    2c8c:	6063      	str	r3, [r4, #4]
    2c8e:	000c      	movs	r4, r1
    2c90:	e7ee      	b.n	2c70 <_malloc_r+0x74>
    2c92:	000c      	movs	r4, r1
    2c94:	6849      	ldr	r1, [r1, #4]
    2c96:	e7c2      	b.n	2c1e <_malloc_r+0x22>
    2c98:	2303      	movs	r3, #3
    2c9a:	1cc4      	adds	r4, r0, #3
    2c9c:	439c      	bics	r4, r3
    2c9e:	42a0      	cmp	r0, r4
    2ca0:	d0e0      	beq.n	2c64 <_malloc_r+0x68>
    2ca2:	1a21      	subs	r1, r4, r0
    2ca4:	0030      	movs	r0, r6
    2ca6:	f000 f807 	bl	2cb8 <_sbrk_r>
    2caa:	1c43      	adds	r3, r0, #1
    2cac:	d1da      	bne.n	2c64 <_malloc_r+0x68>
    2cae:	e7c6      	b.n	2c3e <_malloc_r+0x42>
    2cb0:	20000188 	.word	0x20000188
    2cb4:	2000018c 	.word	0x2000018c

00002cb8 <_sbrk_r>:
    2cb8:	2300      	movs	r3, #0
    2cba:	b570      	push	{r4, r5, r6, lr}
    2cbc:	4c06      	ldr	r4, [pc, #24]	; (2cd8 <_sbrk_r+0x20>)
    2cbe:	0005      	movs	r5, r0
    2cc0:	0008      	movs	r0, r1
    2cc2:	6023      	str	r3, [r4, #0]
    2cc4:	f7ff fe7e 	bl	29c4 <_sbrk>
    2cc8:	1c43      	adds	r3, r0, #1
    2cca:	d103      	bne.n	2cd4 <_sbrk_r+0x1c>
    2ccc:	6823      	ldr	r3, [r4, #0]
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d000      	beq.n	2cd4 <_sbrk_r+0x1c>
    2cd2:	602b      	str	r3, [r5, #0]
    2cd4:	bd70      	pop	{r4, r5, r6, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	20000898 	.word	0x20000898

00002cdc <__malloc_lock>:
    2cdc:	4770      	bx	lr

00002cde <__malloc_unlock>:
    2cde:	4770      	bx	lr

00002ce0 <tc_interrupt_vectors.12390>:
    2ce0:	0e0d 0000 0792 0000 09de 0000 09de 0000     ................
    2cf0:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d00:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d10:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d20:	09de 0000 077a 0000 09de 0000 09de 0000     ....z...........
    2d30:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d40:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d50:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d60:	09de 0000 078a 0000 09de 0000 09de 0000     ................
    2d70:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d80:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2d90:	09de 0000 09de 0000 09de 0000 09de 0000     ................
    2da0:	09de 0000 0782 0000 079a 0000 0762 0000     ............b...
    2db0:	0772 0000 076a 0000 0002 0000 0003 0000     r...j...........
    2dc0:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    2dd0:	000e 0000 000f 0000 000a 0000 000b 0000     ................
    2de0:	ffff 0000 ffff 0000 ffff 0000 ffff 0000     ................
    2df0:	ffff 0000 ffff 0000 ffff 0000 ffff 0000     ................
    2e00:	ffff 0000 ffff 0000 0800 4200 0c00 4200     ...........B...B
    2e10:	1000 4200                                   ...B

00002e14 <SPIDataConertConsArray>:
    2e14:	8e88 eee8 2182 0000 217e 0000 217e 0000     .....!..~!..~!..
    2e24:	21e4 0000 21e4 0000 2196 0000 2188 0000     .!...!...!...!..
    2e34:	219c 0000 21d2 0000 2368 0000 2348 0000     .!...!..h#..H#..
    2e44:	2348 0000 23d4 0000 235a 0000 2376 0000     H#...#..Z#..v#..
    2e54:	234c 0000 2384 0000 23c4 0000               L#...#...#..

00002e60 <_init>:
    2e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e62:	46c0      	nop			; (mov r8, r8)
    2e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e66:	bc08      	pop	{r3}
    2e68:	469e      	mov	lr, r3
    2e6a:	4770      	bx	lr

00002e6c <__init_array_start>:
    2e6c:	000000b5 	.word	0x000000b5

00002e70 <_fini>:
    2e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e76:	bc08      	pop	{r3}
    2e78:	469e      	mov	lr, r3
    2e7a:	4770      	bx	lr

00002e7c <__fini_array_start>:
    2e7c:	0000008d 	.word	0x0000008d
