
PlaceValueBuckets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eb4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  20000000  00002eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000081c  20000080  00002f40  00020080  2**4
                  ALLOC
  3 .stack        00000404  2000089c  0000375c  00020080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ad63  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000064d2  00000000  00000000  0006ae64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009ab9  00000000  00000000  00071336  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000810  00000000  00000000  0007adef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d20  00000000  00000000  0007b5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a208  00000000  00000000  0007c31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015d89  00000000  00000000  00096527  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071b88  00000000  00000000  000ac2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013ec  00000000  00000000  0011de38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 0c 00 20 29 29 00 00 25 29 00 00 25 29 00 00     ... ))..%)..%)..
	...
      2c:	25 29 00 00 00 00 00 00 00 00 00 00 25 29 00 00     %)..........%)..
      3c:	25 29 00 00 25 29 00 00 25 29 00 00 25 29 00 00     %)..%)..%)..%)..
      4c:	25 29 00 00 25 29 00 00 25 29 00 00 e9 0a 00 00     %)..%)..%)......
      5c:	00 00 00 00 25 29 00 00 7d 14 00 00 8d 14 00 00     ....%)..}.......
      6c:	9d 14 00 00 25 29 00 00 85 01 00 00 95 01 00 00     ....%)..........
      7c:	25 0a 00 00 25 29 00 00 25 29 00 00 25 29 00 00     %...%)..%)..%)..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000080 	.word	0x20000080
      ac:	00000000 	.word	0x00000000
      b0:	00002eb4 	.word	0x00002eb4

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000084 	.word	0x20000084
      e0:	00002eb4 	.word	0x00002eb4
      e4:	00002eb4 	.word	0x00002eb4
      e8:	00000000 	.word	0x00000000

000000ec <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
      ec:	1c93      	adds	r3, r2, #2
      ee:	009b      	lsls	r3, r3, #2
      f0:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
      f2:	2a02      	cmp	r2, #2
      f4:	d009      	beq.n	10a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
      f6:	2a03      	cmp	r2, #3
      f8:	d00c      	beq.n	114 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
      fa:	2301      	movs	r3, #1
      fc:	4093      	lsls	r3, r2
      fe:	001a      	movs	r2, r3
     100:	7e03      	ldrb	r3, [r0, #24]
     102:	4313      	orrs	r3, r2
     104:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     106:	2000      	movs	r0, #0
     108:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     10a:	7e03      	ldrb	r3, [r0, #24]
     10c:	2210      	movs	r2, #16
     10e:	4313      	orrs	r3, r2
     110:	7603      	strb	r3, [r0, #24]
     112:	e7f8      	b.n	106 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     114:	7e03      	ldrb	r3, [r0, #24]
     116:	2220      	movs	r2, #32
     118:	4313      	orrs	r3, r2
     11a:	7603      	strb	r3, [r0, #24]
     11c:	e7f3      	b.n	106 <tc_register_callback+0x1a>
	...

00000120 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     120:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     122:	0080      	lsls	r0, r0, #2
     124:	4b16      	ldr	r3, [pc, #88]	; (180 <_tc_interrupt_handler+0x60>)
     126:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     128:	6823      	ldr	r3, [r4, #0]
     12a:	7b9d      	ldrb	r5, [r3, #14]
     12c:	7e22      	ldrb	r2, [r4, #24]
     12e:	7e63      	ldrb	r3, [r4, #25]
     130:	4013      	ands	r3, r2
     132:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     134:	07eb      	lsls	r3, r5, #31
     136:	d406      	bmi.n	146 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     138:	07ab      	lsls	r3, r5, #30
     13a:	d40b      	bmi.n	154 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     13c:	06eb      	lsls	r3, r5, #27
     13e:	d410      	bmi.n	162 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     140:	06ab      	lsls	r3, r5, #26
     142:	d415      	bmi.n	170 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     144:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     146:	0020      	movs	r0, r4
     148:	68a3      	ldr	r3, [r4, #8]
     14a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     14c:	2301      	movs	r3, #1
     14e:	6822      	ldr	r2, [r4, #0]
     150:	7393      	strb	r3, [r2, #14]
     152:	e7f1      	b.n	138 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     154:	0020      	movs	r0, r4
     156:	68e3      	ldr	r3, [r4, #12]
     158:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     15a:	2302      	movs	r3, #2
     15c:	6822      	ldr	r2, [r4, #0]
     15e:	7393      	strb	r3, [r2, #14]
     160:	e7ec      	b.n	13c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     162:	0020      	movs	r0, r4
     164:	6923      	ldr	r3, [r4, #16]
     166:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     168:	2310      	movs	r3, #16
     16a:	6822      	ldr	r2, [r4, #0]
     16c:	7393      	strb	r3, [r2, #14]
     16e:	e7e7      	b.n	140 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     170:	0020      	movs	r0, r4
     172:	6963      	ldr	r3, [r4, #20]
     174:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     176:	6823      	ldr	r3, [r4, #0]
     178:	2220      	movs	r2, #32
     17a:	739a      	strb	r2, [r3, #14]
}
     17c:	e7e2      	b.n	144 <_tc_interrupt_handler+0x24>
     17e:	46c0      	nop			; (mov r8, r8)
     180:	20000190 	.word	0x20000190

00000184 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     184:	b510      	push	{r4, lr}
     186:	2000      	movs	r0, #0
     188:	4b01      	ldr	r3, [pc, #4]	; (190 <TC1_Handler+0xc>)
     18a:	4798      	blx	r3
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	00000121 	.word	0x00000121

00000194 <TC2_Handler>:
     194:	b510      	push	{r4, lr}
     196:	2001      	movs	r0, #1
     198:	4b01      	ldr	r3, [pc, #4]	; (1a0 <TC2_Handler+0xc>)
     19a:	4798      	blx	r3
     19c:	bd10      	pop	{r4, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00000121 	.word	0x00000121

000001a4 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     1a4:	4b06      	ldr	r3, [pc, #24]	; (1c0 <_tc_get_inst_index+0x1c>)
     1a6:	4298      	cmp	r0, r3
     1a8:	d008      	beq.n	1bc <_tc_get_inst_index+0x18>
     1aa:	4a06      	ldr	r2, [pc, #24]	; (1c4 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     1ac:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     1ae:	4290      	cmp	r0, r2
     1b0:	d001      	beq.n	1b6 <_tc_get_inst_index+0x12>
}
     1b2:	0018      	movs	r0, r3
     1b4:	4770      	bx	lr
     1b6:	3301      	adds	r3, #1
			return i;
     1b8:	b2db      	uxtb	r3, r3
     1ba:	e7fa      	b.n	1b2 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     1bc:	2300      	movs	r3, #0
     1be:	e7fb      	b.n	1b8 <_tc_get_inst_index+0x14>
     1c0:	42001800 	.word	0x42001800
     1c4:	42001c00 	.word	0x42001c00

000001c8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ca:	b085      	sub	sp, #20
     1cc:	0004      	movs	r4, r0
     1ce:	000d      	movs	r5, r1
     1d0:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     1d2:	0008      	movs	r0, r1
     1d4:	4b82      	ldr	r3, [pc, #520]	; (3e0 <tc_init+0x218>)
     1d6:	4798      	blx	r3
     1d8:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     1da:	ab03      	add	r3, sp, #12
     1dc:	2212      	movs	r2, #18
     1de:	701a      	strb	r2, [r3, #0]
     1e0:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     1e2:	ab02      	add	r3, sp, #8
     1e4:	322e      	adds	r2, #46	; 0x2e
     1e6:	801a      	strh	r2, [r3, #0]
     1e8:	3240      	adds	r2, #64	; 0x40
     1ea:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60a3      	str	r3, [r4, #8]
     1f0:	60e3      	str	r3, [r4, #12]
     1f2:	6123      	str	r3, [r4, #16]
     1f4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     1f6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     1f8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     1fa:	0082      	lsls	r2, r0, #2
     1fc:	4b79      	ldr	r3, [pc, #484]	; (3e4 <tc_init+0x21c>)
     1fe:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     200:	6025      	str	r5, [r4, #0]
#if SAMD10 || SAMD11
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     202:	78b3      	ldrb	r3, [r6, #2]
     204:	2b08      	cmp	r3, #8
     206:	d006      	beq.n	216 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     208:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     20a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     20c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     20e:	07db      	lsls	r3, r3, #31
     210:	d505      	bpl.n	21e <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     212:	b005      	add	sp, #20
     214:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     216:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     218:	07fa      	lsls	r2, r7, #31
     21a:	d4fa      	bmi.n	212 <tc_init+0x4a>
     21c:	e7f4      	b.n	208 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     21e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     220:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     222:	06db      	lsls	r3, r3, #27
     224:	d4f5      	bmi.n	212 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     226:	882b      	ldrh	r3, [r5, #0]
     228:	079b      	lsls	r3, r3, #30
     22a:	d4f2      	bmi.n	212 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
     22c:	7c33      	ldrb	r3, [r6, #16]
     22e:	2b00      	cmp	r3, #0
     230:	d000      	beq.n	234 <tc_init+0x6c>
     232:	e07a      	b.n	32a <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
     234:	7f33      	ldrb	r3, [r6, #28]
     236:	2b00      	cmp	r3, #0
     238:	d000      	beq.n	23c <tc_init+0x74>
     23a:	e082      	b.n	342 <tc_init+0x17a>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     23c:	496a      	ldr	r1, [pc, #424]	; (3e8 <tc_init+0x220>)
     23e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     240:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     242:	ab02      	add	r3, sp, #8
     244:	5ad3      	ldrh	r3, [r2, r3]
     246:	4303      	orrs	r3, r0
     248:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     24a:	78b3      	ldrb	r3, [r6, #2]
     24c:	2b08      	cmp	r3, #8
     24e:	d100      	bne.n	252 <tc_init+0x8a>
     250:	e087      	b.n	362 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
     252:	7833      	ldrb	r3, [r6, #0]
     254:	466a      	mov	r2, sp
     256:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     258:	ab03      	add	r3, sp, #12
     25a:	5ddf      	ldrb	r7, [r3, r7]
     25c:	4669      	mov	r1, sp
     25e:	0038      	movs	r0, r7
     260:	4b62      	ldr	r3, [pc, #392]	; (3ec <tc_init+0x224>)
     262:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     264:	0038      	movs	r0, r7
     266:	4b62      	ldr	r3, [pc, #392]	; (3f0 <tc_init+0x228>)
     268:	4798      	blx	r3
	ctrla_tmp =
     26a:	8931      	ldrh	r1, [r6, #8]
     26c:	88b3      	ldrh	r3, [r6, #4]
     26e:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     270:	78b1      	ldrb	r1, [r6, #2]
     272:	79b2      	ldrb	r2, [r6, #6]
     274:	4311      	orrs	r1, r2
	ctrla_tmp =
     276:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     278:	7873      	ldrb	r3, [r6, #1]
     27a:	2b00      	cmp	r3, #0
     27c:	d002      	beq.n	284 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     27e:	2380      	movs	r3, #128	; 0x80
     280:	011b      	lsls	r3, r3, #4
     282:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     284:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     286:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     288:	b25b      	sxtb	r3, r3
     28a:	2b00      	cmp	r3, #0
     28c:	dbfb      	blt.n	286 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     28e:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     290:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     292:	1e4b      	subs	r3, r1, #1
     294:	4199      	sbcs	r1, r3
     296:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     298:	7bb3      	ldrb	r3, [r6, #14]
     29a:	2b00      	cmp	r3, #0
     29c:	d001      	beq.n	2a2 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     29e:	2301      	movs	r3, #1
     2a0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2a2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2a4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2a6:	b25b      	sxtb	r3, r3
     2a8:	2b00      	cmp	r3, #0
     2aa:	dbfb      	blt.n	2a4 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     2ac:	23ff      	movs	r3, #255	; 0xff
     2ae:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     2b0:	2900      	cmp	r1, #0
     2b2:	d005      	beq.n	2c0 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2b4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2b6:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     2b8:	b25b      	sxtb	r3, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	dbfb      	blt.n	2b6 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     2be:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     2c0:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     2c2:	7af3      	ldrb	r3, [r6, #11]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d001      	beq.n	2cc <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     2c8:	2310      	movs	r3, #16
     2ca:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     2cc:	7b33      	ldrb	r3, [r6, #12]
     2ce:	2b00      	cmp	r3, #0
     2d0:	d001      	beq.n	2d6 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     2d2:	2320      	movs	r3, #32
     2d4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2d8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2da:	b25b      	sxtb	r3, r3
     2dc:	2b00      	cmp	r3, #0
     2de:	dbfb      	blt.n	2d8 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     2e0:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2e4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     2e6:	b25b      	sxtb	r3, r3
     2e8:	2b00      	cmp	r3, #0
     2ea:	dbfb      	blt.n	2e4 <tc_init+0x11c>
	switch (module_inst->counter_size) {
     2ec:	7923      	ldrb	r3, [r4, #4]
     2ee:	2b04      	cmp	r3, #4
     2f0:	d03f      	beq.n	372 <tc_init+0x1aa>
     2f2:	2b08      	cmp	r3, #8
     2f4:	d05e      	beq.n	3b4 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
     2f6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     2f8:	2b00      	cmp	r3, #0
     2fa:	d000      	beq.n	2fe <tc_init+0x136>
     2fc:	e789      	b.n	212 <tc_init+0x4a>
     2fe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     300:	b25b      	sxtb	r3, r3
     302:	2b00      	cmp	r3, #0
     304:	dbfb      	blt.n	2fe <tc_init+0x136>
				= config->counter_16_bit.value;
     306:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     308:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     30a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     30c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     30e:	b25b      	sxtb	r3, r3
     310:	2b00      	cmp	r3, #0
     312:	dbfb      	blt.n	30c <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
     314:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     316:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     318:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     31a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     31c:	b25b      	sxtb	r3, r3
     31e:	2b00      	cmp	r3, #0
     320:	dbfb      	blt.n	31a <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
     322:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     324:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     326:	2000      	movs	r0, #0
     328:	e773      	b.n	212 <tc_init+0x4a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     32a:	a901      	add	r1, sp, #4
     32c:	2301      	movs	r3, #1
     32e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     330:	2200      	movs	r2, #0
     332:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     334:	7e32      	ldrb	r2, [r6, #24]
     336:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     338:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     33a:	7d30      	ldrb	r0, [r6, #20]
     33c:	4b2d      	ldr	r3, [pc, #180]	; (3f4 <tc_init+0x22c>)
     33e:	4798      	blx	r3
     340:	e778      	b.n	234 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     342:	a901      	add	r1, sp, #4
     344:	2301      	movs	r3, #1
     346:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     348:	2200      	movs	r2, #0
     34a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     34c:	3224      	adds	r2, #36	; 0x24
     34e:	18b2      	adds	r2, r6, r2
     350:	7812      	ldrb	r2, [r2, #0]
     352:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     354:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     356:	331f      	adds	r3, #31
     358:	18f3      	adds	r3, r6, r3
     35a:	7818      	ldrb	r0, [r3, #0]
     35c:	4b25      	ldr	r3, [pc, #148]	; (3f4 <tc_init+0x22c>)
     35e:	4798      	blx	r3
     360:	e76c      	b.n	23c <tc_init+0x74>
     362:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     364:	1c7a      	adds	r2, r7, #1
     366:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     368:	ab02      	add	r3, sp, #8
     36a:	5ad3      	ldrh	r3, [r2, r3]
     36c:	4303      	orrs	r3, r0
     36e:	620b      	str	r3, [r1, #32]
     370:	e76f      	b.n	252 <tc_init+0x8a>
     372:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     374:	b25b      	sxtb	r3, r3
     376:	2b00      	cmp	r3, #0
     378:	dbfb      	blt.n	372 <tc_init+0x1aa>
					config->counter_8_bit.value;
     37a:	2328      	movs	r3, #40	; 0x28
     37c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     37e:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     380:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     382:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     384:	b25b      	sxtb	r3, r3
     386:	2b00      	cmp	r3, #0
     388:	dbfb      	blt.n	382 <tc_init+0x1ba>
					config->counter_8_bit.period;
     38a:	2329      	movs	r3, #41	; 0x29
     38c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     38e:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     390:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     392:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
     39a:	232a      	movs	r3, #42	; 0x2a
     39c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     39e:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3a0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3a4:	b25b      	sxtb	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	dbfb      	blt.n	3a2 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
     3aa:	232b      	movs	r3, #43	; 0x2b
     3ac:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     3ae:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     3b0:	2000      	movs	r0, #0
     3b2:	e72e      	b.n	212 <tc_init+0x4a>
     3b4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3b6:	b25b      	sxtb	r3, r3
     3b8:	2b00      	cmp	r3, #0
     3ba:	dbfb      	blt.n	3b4 <tc_init+0x1ec>
				= config->counter_32_bit.value;
     3bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     3be:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3c2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3c4:	b25b      	sxtb	r3, r3
     3c6:	2b00      	cmp	r3, #0
     3c8:	dbfb      	blt.n	3c2 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
     3ca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     3cc:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     3ce:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     3d0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     3d2:	b25b      	sxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	dbfb      	blt.n	3d0 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
     3d8:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     3da:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     3dc:	2000      	movs	r0, #0
     3de:	e718      	b.n	212 <tc_init+0x4a>
     3e0:	000001a5 	.word	0x000001a5
     3e4:	20000190 	.word	0x20000190
     3e8:	40000400 	.word	0x40000400
     3ec:	000027cd 	.word	0x000027cd
     3f0:	00002741 	.word	0x00002741
     3f4:	000028c5 	.word	0x000028c5

000003f8 <updateLEDMatrix>:
}

void updateLEDMatrix()
{
	
	updateLED = true;
     3f8:	2201      	movs	r2, #1
     3fa:	4b01      	ldr	r3, [pc, #4]	; (400 <STACK_SIZE>)
     3fc:	601a      	str	r2, [r3, #0]
	
	//port_pin_toggle_output_level(NEOPXL);
	//updateSPIValues();
}
     3fe:	4770      	bx	lr
     400:	200000ac 	.word	0x200000ac

00000404 <updaeteADDLED>:
{
     404:	b510      	push	{r4, lr}
	if(updateLED == true)
     406:	4b18      	ldr	r3, [pc, #96]	; (468 <updaeteADDLED+0x64>)
     408:	681b      	ldr	r3, [r3, #0]
     40a:	2b01      	cmp	r3, #1
     40c:	d000      	beq.n	410 <updaeteADDLED+0xc>
}
     40e:	bd10      	pop	{r4, pc}
		updateLED = false;
     410:	2200      	movs	r2, #0
     412:	4b15      	ldr	r3, [pc, #84]	; (468 <updaeteADDLED+0x64>)
     414:	601a      	str	r2, [r3, #0]
		testColor[0].RBrightness =	count;
     416:	4b15      	ldr	r3, [pc, #84]	; (46c <updaeteADDLED+0x68>)
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	4815      	ldr	r0, [pc, #84]	; (470 <updaeteADDLED+0x6c>)
     41c:	7003      	strb	r3, [r0, #0]
		testColor[0].GBrightness =	count;
     41e:	7043      	strb	r3, [r0, #1]
		testColor[0].BBrightness =	count;
     420:	7083      	strb	r3, [r0, #2]
		testColor[1].RBrightness =	count;
     422:	70c3      	strb	r3, [r0, #3]
		testColor[1].GBrightness =	count;
     424:	7103      	strb	r3, [r0, #4]
		testColor[1].BBrightness =  count;
     426:	7143      	strb	r3, [r0, #5]
		testColor[2].RBrightness =	count;
     428:	7183      	strb	r3, [r0, #6]
		testColor[2].GBrightness =	count;
     42a:	71c3      	strb	r3, [r0, #7]
		testColor[2].BBrightness =	count;
     42c:	7203      	strb	r3, [r0, #8]
		RGBPI55SetAllLED(testColor);
     42e:	4b11      	ldr	r3, [pc, #68]	; (474 <updaeteADDLED+0x70>)
     430:	4798      	blx	r3
		if(increment == true)
     432:	4b11      	ldr	r3, [pc, #68]	; (478 <updaeteADDLED+0x74>)
     434:	781b      	ldrb	r3, [r3, #0]
     436:	2b00      	cmp	r3, #0
     438:	d00a      	beq.n	450 <updaeteADDLED+0x4c>
			count++;
     43a:	4a0c      	ldr	r2, [pc, #48]	; (46c <updaeteADDLED+0x68>)
     43c:	7813      	ldrb	r3, [r2, #0]
     43e:	3301      	adds	r3, #1
     440:	b2db      	uxtb	r3, r3
     442:	7013      	strb	r3, [r2, #0]
			if(count > 50 )
     444:	2b32      	cmp	r3, #50	; 0x32
     446:	d9e2      	bls.n	40e <updaeteADDLED+0xa>
				increment = false;
     448:	2200      	movs	r2, #0
     44a:	4b0b      	ldr	r3, [pc, #44]	; (478 <updaeteADDLED+0x74>)
     44c:	701a      	strb	r2, [r3, #0]
     44e:	e7de      	b.n	40e <updaeteADDLED+0xa>
			count --;
     450:	4a06      	ldr	r2, [pc, #24]	; (46c <updaeteADDLED+0x68>)
     452:	7813      	ldrb	r3, [r2, #0]
     454:	3b01      	subs	r3, #1
     456:	b2db      	uxtb	r3, r3
     458:	7013      	strb	r3, [r2, #0]
			if(count < 1)
     45a:	2b00      	cmp	r3, #0
     45c:	d1d7      	bne.n	40e <updaeteADDLED+0xa>
				increment = true;
     45e:	2201      	movs	r2, #1
     460:	4b05      	ldr	r3, [pc, #20]	; (478 <updaeteADDLED+0x74>)
     462:	701a      	strb	r2, [r3, #0]
}
     464:	e7d3      	b.n	40e <updaeteADDLED+0xa>
     466:	46c0      	nop			; (mov r8, r8)
     468:	200000ac 	.word	0x200000ac
     46c:	2000009c 	.word	0x2000009c
     470:	200000a0 	.word	0x200000a0
     474:	000020f1 	.word	0x000020f1
     478:	20000000 	.word	0x20000000

0000047c <initTimerCallbacks>:

void initTimerCallbacks()
{
     47c:	b510      	push	{r4, lr}
	tc_register_callback(&tcTest, updateLEDMatrix,TC_CALLBACK_OVERFLOW);
     47e:	4c0c      	ldr	r4, [pc, #48]	; (4b0 <initTimerCallbacks+0x34>)
     480:	2200      	movs	r2, #0
     482:	490c      	ldr	r1, [pc, #48]	; (4b4 <initTimerCallbacks+0x38>)
     484:	0020      	movs	r0, r4
     486:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <initTimerCallbacks+0x3c>)
     488:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     48a:	6820      	ldr	r0, [r4, #0]
     48c:	4b0b      	ldr	r3, [pc, #44]	; (4bc <initTimerCallbacks+0x40>)
     48e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     490:	4b0b      	ldr	r3, [pc, #44]	; (4c0 <initTimerCallbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     492:	5c1a      	ldrb	r2, [r3, r0]
     494:	231f      	movs	r3, #31
     496:	4013      	ands	r3, r2
     498:	2201      	movs	r2, #1
     49a:	0011      	movs	r1, r2
     49c:	4099      	lsls	r1, r3
     49e:	4b09      	ldr	r3, [pc, #36]	; (4c4 <initTimerCallbacks+0x48>)
     4a0:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     4a2:	7e63      	ldrb	r3, [r4, #25]
     4a4:	2101      	movs	r1, #1
     4a6:	430b      	orrs	r3, r1
     4a8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     4aa:	6823      	ldr	r3, [r4, #0]
     4ac:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tcTest, TC_CALLBACK_OVERFLOW);
}
     4ae:	bd10      	pop	{r4, pc}
     4b0:	20000198 	.word	0x20000198
     4b4:	000003f9 	.word	0x000003f9
     4b8:	000000ed 	.word	0x000000ed
     4bc:	000001a5 	.word	0x000001a5
     4c0:	00002d14 	.word	0x00002d14
     4c4:	e000e100 	.word	0xe000e100

000004c8 <initTimer>:

void initTimer()
{
     4c8:	b510      	push	{r4, lr}
     4ca:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     4cc:	aa01      	add	r2, sp, #4
     4ce:	2300      	movs	r3, #0
     4d0:	2100      	movs	r1, #0
     4d2:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     4d4:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     4d6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     4d8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     4da:	2000      	movs	r0, #0
     4dc:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     4de:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     4e0:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     4e2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     4e4:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     4e6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     4e8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     4ea:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     4ec:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     4ee:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     4f0:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     4f2:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     4f4:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     4f6:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	struct tc_events config_events;
	config_tc.enable_capture_on_channel[0]		=		true;
     4f8:	3301      	adds	r3, #1
     4fa:	72d3      	strb	r3, [r2, #11]
	config_tc.counter_size						=		TC_COUNTER_SIZE_16BIT; //8
	config_tc.clock_source						=		GCLK_GENERATOR_0 ;
	config_tc.clock_prescaler					=		TC_CLOCK_PRESCALER_DIV8; //1024
     4fc:	23c0      	movs	r3, #192	; 0xc0
     4fe:	009b      	lsls	r3, r3, #2
     500:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period				=		0xFF;
     502:	21ff      	movs	r1, #255	; 0xff
     504:	2329      	movs	r3, #41	; 0x29
     506:	54d1      	strb	r1, [r2, r3]
	tc_init(&tcTest, TC1 , &config_tc);
     508:	4c07      	ldr	r4, [pc, #28]	; (528 <initTimer+0x60>)
     50a:	4908      	ldr	r1, [pc, #32]	; (52c <initTimer+0x64>)
     50c:	0020      	movs	r0, r4
     50e:	4b08      	ldr	r3, [pc, #32]	; (530 <initTimer+0x68>)
     510:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     512:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     514:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     516:	b25b      	sxtb	r3, r3
     518:	2b00      	cmp	r3, #0
     51a:	dbfb      	blt.n	514 <initTimer+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     51c:	8813      	ldrh	r3, [r2, #0]
     51e:	2102      	movs	r1, #2
     520:	430b      	orrs	r3, r1
     522:	8013      	strh	r3, [r2, #0]
	tc_enable(&tcTest);
}
     524:	b00e      	add	sp, #56	; 0x38
     526:	bd10      	pop	{r4, pc}
     528:	20000198 	.word	0x20000198
     52c:	42001800 	.word	0x42001800
     530:	000001c9 	.word	0x000001c9

00000534 <testTimer>:
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(NEOPXL, &config_port_pin);
}
void testTimer()
{
     534:	b510      	push	{r4, lr}
	//Set a test pin as output
	//setTestPin();
	//inittimer
	initTimer();
     536:	4b02      	ldr	r3, [pc, #8]	; (540 <testTimer+0xc>)
     538:	4798      	blx	r3
	initTimerCallbacks();
     53a:	4b02      	ldr	r3, [pc, #8]	; (544 <testTimer+0x10>)
     53c:	4798      	blx	r3
	
     53e:	bd10      	pop	{r4, pc}
     540:	000004c9 	.word	0x000004c9
     544:	0000047d 	.word	0x0000047d

00000548 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     548:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     54a:	2000      	movs	r0, #0
     54c:	4b08      	ldr	r3, [pc, #32]	; (570 <delay_init+0x28>)
     54e:	4798      	blx	r3
     550:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     552:	4c08      	ldr	r4, [pc, #32]	; (574 <delay_init+0x2c>)
     554:	21fa      	movs	r1, #250	; 0xfa
     556:	0089      	lsls	r1, r1, #2
     558:	47a0      	blx	r4
     55a:	4b07      	ldr	r3, [pc, #28]	; (578 <delay_init+0x30>)
     55c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     55e:	4907      	ldr	r1, [pc, #28]	; (57c <delay_init+0x34>)
     560:	0028      	movs	r0, r5
     562:	47a0      	blx	r4
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <delay_init+0x38>)
     566:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     568:	2205      	movs	r2, #5
     56a:	4b06      	ldr	r3, [pc, #24]	; (584 <delay_init+0x3c>)
     56c:	601a      	str	r2, [r3, #0]
}
     56e:	bd70      	pop	{r4, r5, r6, pc}
     570:	000026b5 	.word	0x000026b5
     574:	00002a99 	.word	0x00002a99
     578:	20000004 	.word	0x20000004
     57c:	000f4240 	.word	0x000f4240
     580:	20000008 	.word	0x20000008
     584:	e000e010 	.word	0xe000e010

00000588 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     588:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     58a:	4b08      	ldr	r3, [pc, #32]	; (5ac <delay_cycles_ms+0x24>)
     58c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     58e:	4a08      	ldr	r2, [pc, #32]	; (5b0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     590:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     592:	2180      	movs	r1, #128	; 0x80
     594:	0249      	lsls	r1, r1, #9
	while (n--) {
     596:	3801      	subs	r0, #1
     598:	d307      	bcc.n	5aa <delay_cycles_ms+0x22>
	if (n > 0) {
     59a:	2c00      	cmp	r4, #0
     59c:	d0fb      	beq.n	596 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     59e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5a0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5a2:	6813      	ldr	r3, [r2, #0]
     5a4:	420b      	tst	r3, r1
     5a6:	d0fc      	beq.n	5a2 <delay_cycles_ms+0x1a>
     5a8:	e7f5      	b.n	596 <delay_cycles_ms+0xe>
	}
}
     5aa:	bd30      	pop	{r4, r5, pc}
     5ac:	20000004 	.word	0x20000004
     5b0:	e000e010 	.word	0xe000e010

000005b4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     5b4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     5b6:	2200      	movs	r2, #0
     5b8:	2300      	movs	r3, #0
     5ba:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     5bc:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     5be:	2100      	movs	r1, #0
     5c0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     5c2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     5c4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     5c6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     5c8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     5ca:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     5cc:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     5ce:	24c0      	movs	r4, #192	; 0xc0
     5d0:	0164      	lsls	r4, r4, #5
     5d2:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     5d4:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     5d6:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     5d8:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     5da:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     5dc:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     5de:	242a      	movs	r4, #42	; 0x2a
     5e0:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     5e2:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     5e4:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     5e6:	3c06      	subs	r4, #6
     5e8:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     5ea:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     5ec:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     5ee:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     5f0:	232b      	movs	r3, #43	; 0x2b
     5f2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     5f4:	3301      	adds	r3, #1
     5f6:	54c1      	strb	r1, [r0, r3]
}
     5f8:	bd10      	pop	{r4, pc}
	...

000005fc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	46d6      	mov	lr, sl
     600:	464f      	mov	r7, r9
     602:	4646      	mov	r6, r8
     604:	b5c0      	push	{r6, r7, lr}
     606:	b096      	sub	sp, #88	; 0x58
     608:	0007      	movs	r7, r0
     60a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     60c:	6001      	str	r1, [r0, #0]
     60e:	4ac6      	ldr	r2, [pc, #792]	; (928 <adc_init+0x32c>)
     610:	6a10      	ldr	r0, [r2, #32]
     612:	2380      	movs	r3, #128	; 0x80
     614:	005b      	lsls	r3, r3, #1
     616:	4303      	orrs	r3, r0
     618:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     61a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     61c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     61e:	07db      	lsls	r3, r3, #31
     620:	d505      	bpl.n	62e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     622:	b016      	add	sp, #88	; 0x58
     624:	bc1c      	pop	{r2, r3, r4}
     626:	4690      	mov	r8, r2
     628:	4699      	mov	r9, r3
     62a:	46a2      	mov	sl, r4
     62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     62e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     630:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     632:	079b      	lsls	r3, r3, #30
     634:	d4f5      	bmi.n	622 <adc_init+0x26>
	module_inst->reference = config->reference;
     636:	7873      	ldrb	r3, [r6, #1]
     638:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     63a:	2b00      	cmp	r3, #0
     63c:	d104      	bne.n	648 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     63e:	4abb      	ldr	r2, [pc, #748]	; (92c <adc_init+0x330>)
     640:	6c13      	ldr	r3, [r2, #64]	; 0x40
     642:	2104      	movs	r1, #4
     644:	430b      	orrs	r3, r1
     646:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     648:	2300      	movs	r3, #0
     64a:	60bb      	str	r3, [r7, #8]
     64c:	60fb      	str	r3, [r7, #12]
     64e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     650:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     652:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     654:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     656:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     658:	4bb5      	ldr	r3, [pc, #724]	; (930 <adc_init+0x334>)
     65a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     65c:	232a      	movs	r3, #42	; 0x2a
     65e:	5cf3      	ldrb	r3, [r6, r3]
     660:	2b00      	cmp	r3, #0
     662:	d105      	bne.n	670 <adc_init+0x74>
     664:	7d33      	ldrb	r3, [r6, #20]
     666:	2b00      	cmp	r3, #0
     668:	d102      	bne.n	670 <adc_init+0x74>
		module_inst->software_trigger = true;
     66a:	3301      	adds	r3, #1
     66c:	777b      	strb	r3, [r7, #29]
     66e:	e001      	b.n	674 <adc_init+0x78>
		module_inst->software_trigger = false;
     670:	2300      	movs	r3, #0
     672:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     674:	683b      	ldr	r3, [r7, #0]
     676:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     678:	7833      	ldrb	r3, [r6, #0]
     67a:	466a      	mov	r2, sp
     67c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     67e:	4669      	mov	r1, sp
     680:	2013      	movs	r0, #19
     682:	4bac      	ldr	r3, [pc, #688]	; (934 <adc_init+0x338>)
     684:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     686:	2013      	movs	r0, #19
     688:	4bab      	ldr	r3, [pc, #684]	; (938 <adc_init+0x33c>)
     68a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     68c:	232c      	movs	r3, #44	; 0x2c
     68e:	5cf2      	ldrb	r2, [r6, r3]
     690:	2a00      	cmp	r2, #0
     692:	d054      	beq.n	73e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     694:	3b01      	subs	r3, #1
     696:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     698:	7b33      	ldrb	r3, [r6, #12]
     69a:	18eb      	adds	r3, r5, r3
     69c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     69e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     6a0:	b2c9      	uxtb	r1, r1
     6a2:	428b      	cmp	r3, r1
     6a4:	d221      	bcs.n	6ea <adc_init+0xee>
     6a6:	1952      	adds	r2, r2, r5
     6a8:	b2d3      	uxtb	r3, r2
     6aa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     6ac:	4ba3      	ldr	r3, [pc, #652]	; (93c <adc_init+0x340>)
     6ae:	469a      	mov	sl, r3
     6b0:	e003      	b.n	6ba <adc_init+0xbe>
			offset++;
     6b2:	3501      	adds	r5, #1
     6b4:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     6b6:	454d      	cmp	r5, r9
     6b8:	d017      	beq.n	6ea <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     6ba:	240f      	movs	r4, #15
     6bc:	402c      	ands	r4, r5
     6be:	7b33      	ldrb	r3, [r6, #12]
     6c0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     6c2:	2250      	movs	r2, #80	; 0x50
     6c4:	499e      	ldr	r1, [pc, #632]	; (940 <adc_init+0x344>)
     6c6:	a802      	add	r0, sp, #8
     6c8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     6ca:	2c09      	cmp	r4, #9
     6cc:	d8f1      	bhi.n	6b2 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     6ce:	00a4      	lsls	r4, r4, #2
     6d0:	ab02      	add	r3, sp, #8
     6d2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6d4:	a901      	add	r1, sp, #4
     6d6:	2300      	movs	r3, #0
     6d8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6da:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6dc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6de:	3301      	adds	r3, #1
     6e0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6e2:	b2c0      	uxtb	r0, r0
     6e4:	4b97      	ldr	r3, [pc, #604]	; (944 <adc_init+0x348>)
     6e6:	4798      	blx	r3
     6e8:	e7e3      	b.n	6b2 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     6ea:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     6ec:	2250      	movs	r2, #80	; 0x50
     6ee:	4994      	ldr	r1, [pc, #592]	; (940 <adc_init+0x344>)
     6f0:	a802      	add	r0, sp, #8
     6f2:	4b92      	ldr	r3, [pc, #584]	; (93c <adc_init+0x340>)
     6f4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     6f6:	2c09      	cmp	r4, #9
     6f8:	d913      	bls.n	722 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     6fa:	7d73      	ldrb	r3, [r6, #21]
     6fc:	009b      	lsls	r3, r3, #2
     6fe:	b2db      	uxtb	r3, r3
     700:	4642      	mov	r2, r8
     702:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     704:	7db3      	ldrb	r3, [r6, #22]
     706:	01db      	lsls	r3, r3, #7
     708:	7872      	ldrb	r2, [r6, #1]
     70a:	4313      	orrs	r3, r2
     70c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     70e:	4642      	mov	r2, r8
     710:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     712:	7933      	ldrb	r3, [r6, #4]
     714:	2b34      	cmp	r3, #52	; 0x34
     716:	d900      	bls.n	71a <adc_init+0x11e>
     718:	e17b      	b.n	a12 <adc_init+0x416>
     71a:	009b      	lsls	r3, r3, #2
     71c:	4a8a      	ldr	r2, [pc, #552]	; (948 <adc_init+0x34c>)
     71e:	58d3      	ldr	r3, [r2, r3]
     720:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     722:	00a4      	lsls	r4, r4, #2
     724:	ab02      	add	r3, sp, #8
     726:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     728:	a901      	add	r1, sp, #4
     72a:	2300      	movs	r3, #0
     72c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     72e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     730:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     732:	3301      	adds	r3, #1
     734:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     736:	b2c0      	uxtb	r0, r0
     738:	4b82      	ldr	r3, [pc, #520]	; (944 <adc_init+0x348>)
     73a:	4798      	blx	r3
     73c:	e7dd      	b.n	6fa <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     73e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     740:	2250      	movs	r2, #80	; 0x50
     742:	497f      	ldr	r1, [pc, #508]	; (940 <adc_init+0x344>)
     744:	a802      	add	r0, sp, #8
     746:	4b7d      	ldr	r3, [pc, #500]	; (93c <adc_init+0x340>)
     748:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     74a:	2c09      	cmp	r4, #9
     74c:	d915      	bls.n	77a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     74e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     750:	2250      	movs	r2, #80	; 0x50
     752:	497b      	ldr	r1, [pc, #492]	; (940 <adc_init+0x344>)
     754:	a802      	add	r0, sp, #8
     756:	4b79      	ldr	r3, [pc, #484]	; (93c <adc_init+0x340>)
     758:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     75a:	2c09      	cmp	r4, #9
     75c:	d8cd      	bhi.n	6fa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     75e:	00a4      	lsls	r4, r4, #2
     760:	ab02      	add	r3, sp, #8
     762:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     764:	a901      	add	r1, sp, #4
     766:	2300      	movs	r3, #0
     768:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     76a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     76c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     76e:	3301      	adds	r3, #1
     770:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     772:	b2c0      	uxtb	r0, r0
     774:	4b73      	ldr	r3, [pc, #460]	; (944 <adc_init+0x348>)
     776:	4798      	blx	r3
     778:	e7bf      	b.n	6fa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     77a:	00a4      	lsls	r4, r4, #2
     77c:	ab02      	add	r3, sp, #8
     77e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     780:	a901      	add	r1, sp, #4
     782:	2300      	movs	r3, #0
     784:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     786:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     788:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     78a:	3301      	adds	r3, #1
     78c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     78e:	b2c0      	uxtb	r0, r0
     790:	4b6c      	ldr	r3, [pc, #432]	; (944 <adc_init+0x348>)
     792:	4798      	blx	r3
     794:	e7db      	b.n	74e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     796:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     798:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     79a:	2102      	movs	r1, #2
     79c:	e01a      	b.n	7d4 <adc_init+0x1d8>
		adjres = config->divide_result;
     79e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     7a0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     7a2:	2410      	movs	r4, #16
     7a4:	e016      	b.n	7d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     7a6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     7a8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     7aa:	2101      	movs	r1, #1
     7ac:	e012      	b.n	7d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     7ae:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     7b0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     7b2:	2100      	movs	r1, #0
     7b4:	e00e      	b.n	7d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     7b6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     7b8:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     7ba:	2100      	movs	r1, #0
     7bc:	e00a      	b.n	7d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     7be:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     7c0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     7c2:	2100      	movs	r1, #0
     7c4:	e006      	b.n	7d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     7c6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     7c8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     7ca:	2100      	movs	r1, #0
     7cc:	e002      	b.n	7d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     7ce:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     7d0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     7d2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     7d4:	0109      	lsls	r1, r1, #4
     7d6:	2270      	movs	r2, #112	; 0x70
     7d8:	400a      	ands	r2, r1
     7da:	4313      	orrs	r3, r2
     7dc:	4642      	mov	r2, r8
     7de:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     7e0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     7e2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     7e4:	2b3f      	cmp	r3, #63	; 0x3f
     7e6:	d900      	bls.n	7ea <adc_init+0x1ee>
     7e8:	e71b      	b.n	622 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     7ea:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     7ec:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7ee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7f0:	b25b      	sxtb	r3, r3
     7f2:	2b00      	cmp	r3, #0
     7f4:	dbfb      	blt.n	7ee <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     7f6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     7f8:	8872      	ldrh	r2, [r6, #2]
     7fa:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     7fc:	2224      	movs	r2, #36	; 0x24
     7fe:	5cb2      	ldrb	r2, [r6, r2]
     800:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     802:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     804:	7d32      	ldrb	r2, [r6, #20]
     806:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     808:	4313      	orrs	r3, r2
     80a:	7cb2      	ldrb	r2, [r6, #18]
     80c:	0052      	lsls	r2, r2, #1
     80e:	4313      	orrs	r3, r2
     810:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     812:	4642      	mov	r2, r8
     814:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     816:	7e33      	ldrb	r3, [r6, #24]
     818:	2b00      	cmp	r3, #0
     81a:	d020      	beq.n	85e <adc_init+0x262>
		switch (resolution) {
     81c:	2c10      	cmp	r4, #16
     81e:	d100      	bne.n	822 <adc_init+0x226>
     820:	e0d9      	b.n	9d6 <adc_init+0x3da>
     822:	d800      	bhi.n	826 <adc_init+0x22a>
     824:	e098      	b.n	958 <adc_init+0x35c>
     826:	2c20      	cmp	r4, #32
     828:	d100      	bne.n	82c <adc_init+0x230>
     82a:	e0b6      	b.n	99a <adc_init+0x39e>
     82c:	2c30      	cmp	r4, #48	; 0x30
     82e:	d116      	bne.n	85e <adc_init+0x262>
			if (config->differential_mode &&
     830:	7cf2      	ldrb	r2, [r6, #19]
     832:	2a00      	cmp	r2, #0
     834:	d00a      	beq.n	84c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     836:	69f2      	ldr	r2, [r6, #28]
     838:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     83a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     83c:	2aff      	cmp	r2, #255	; 0xff
     83e:	d900      	bls.n	842 <adc_init+0x246>
     840:	e6ef      	b.n	622 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     842:	6a32      	ldr	r2, [r6, #32]
     844:	3280      	adds	r2, #128	; 0x80
     846:	2aff      	cmp	r2, #255	; 0xff
     848:	d900      	bls.n	84c <adc_init+0x250>
     84a:	e6ea      	b.n	622 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     84c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     84e:	69f2      	ldr	r2, [r6, #28]
     850:	2aff      	cmp	r2, #255	; 0xff
     852:	dd00      	ble.n	856 <adc_init+0x25a>
     854:	e6e5      	b.n	622 <adc_init+0x26>
     856:	6a32      	ldr	r2, [r6, #32]
     858:	2aff      	cmp	r2, #255	; 0xff
     85a:	dd00      	ble.n	85e <adc_init+0x262>
     85c:	e6e1      	b.n	622 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     85e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     860:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     862:	b252      	sxtb	r2, r2
     864:	2a00      	cmp	r2, #0
     866:	dbfb      	blt.n	860 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     868:	4642      	mov	r2, r8
     86a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     86c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     86e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     870:	b25b      	sxtb	r3, r3
     872:	2b00      	cmp	r3, #0
     874:	dbfb      	blt.n	86e <adc_init+0x272>
	adc_module->WINLT.reg =
     876:	8bb3      	ldrh	r3, [r6, #28]
     878:	4642      	mov	r2, r8
     87a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     87c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     87e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     880:	b25b      	sxtb	r3, r3
     882:	2b00      	cmp	r3, #0
     884:	dbfb      	blt.n	87e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     886:	8c33      	ldrh	r3, [r6, #32]
     888:	4642      	mov	r2, r8
     88a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     88c:	232c      	movs	r3, #44	; 0x2c
     88e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     890:	2b00      	cmp	r3, #0
     892:	d005      	beq.n	8a0 <adc_init+0x2a4>
		inputs_to_scan--;
     894:	3b01      	subs	r3, #1
     896:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     898:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     89a:	2b0f      	cmp	r3, #15
     89c:	d900      	bls.n	8a0 <adc_init+0x2a4>
     89e:	e6c0      	b.n	622 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     8a0:	222b      	movs	r2, #43	; 0x2b
     8a2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     8a4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     8a6:	290f      	cmp	r1, #15
     8a8:	d900      	bls.n	8ac <adc_init+0x2b0>
     8aa:	e6ba      	b.n	622 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     8ac:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8ae:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     8b0:	b252      	sxtb	r2, r2
     8b2:	2a00      	cmp	r2, #0
     8b4:	dbfb      	blt.n	8ae <adc_init+0x2b2>
			config->negative_input |
     8b6:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     8b8:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     8ba:	4302      	orrs	r2, r0
     8bc:	68b0      	ldr	r0, [r6, #8]
     8be:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     8c0:	0509      	lsls	r1, r1, #20
			config->negative_input |
     8c2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     8c4:	041b      	lsls	r3, r3, #16
			config->negative_input |
     8c6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     8c8:	4642      	mov	r2, r8
     8ca:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     8cc:	232a      	movs	r3, #42	; 0x2a
     8ce:	5cf3      	ldrb	r3, [r6, r3]
     8d0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     8d2:	230f      	movs	r3, #15
     8d4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     8d6:	3315      	adds	r3, #21
     8d8:	5cf3      	ldrb	r3, [r6, r3]
     8da:	2b00      	cmp	r3, #0
     8dc:	d012      	beq.n	904 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     8de:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     8e0:	4a1a      	ldr	r2, [pc, #104]	; (94c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     8e2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     8e4:	4293      	cmp	r3, r2
     8e6:	d900      	bls.n	8ea <adc_init+0x2ee>
     8e8:	e69b      	b.n	622 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     8ea:	4642      	mov	r2, r8
     8ec:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     8ee:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     8f0:	2380      	movs	r3, #128	; 0x80
     8f2:	011b      	lsls	r3, r3, #4
     8f4:	18d3      	adds	r3, r2, r3
     8f6:	4915      	ldr	r1, [pc, #84]	; (94c <adc_init+0x350>)
     8f8:	b29b      	uxth	r3, r3
     8fa:	428b      	cmp	r3, r1
     8fc:	d900      	bls.n	900 <adc_init+0x304>
     8fe:	e690      	b.n	622 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     900:	4643      	mov	r3, r8
     902:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     904:	4b12      	ldr	r3, [pc, #72]	; (950 <adc_init+0x354>)
     906:	681b      	ldr	r3, [r3, #0]
     908:	015b      	lsls	r3, r3, #5
     90a:	22e0      	movs	r2, #224	; 0xe0
     90c:	00d2      	lsls	r2, r2, #3
     90e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     910:	4a10      	ldr	r2, [pc, #64]	; (954 <adc_init+0x358>)
     912:	6851      	ldr	r1, [r2, #4]
     914:	0149      	lsls	r1, r1, #5
     916:	6812      	ldr	r2, [r2, #0]
     918:	0ed2      	lsrs	r2, r2, #27
     91a:	430a      	orrs	r2, r1
     91c:	b2d2      	uxtb	r2, r2
			) |
     91e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     920:	4642      	mov	r2, r8
     922:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     924:	2000      	movs	r0, #0
     926:	e67c      	b.n	622 <adc_init+0x26>
     928:	40000400 	.word	0x40000400
     92c:	40000800 	.word	0x40000800
     930:	200001b4 	.word	0x200001b4
     934:	000027cd 	.word	0x000027cd
     938:	00002741 	.word	0x00002741
     93c:	00002c0d 	.word	0x00002c0d
     940:	00002dec 	.word	0x00002dec
     944:	000028c5 	.word	0x000028c5
     948:	00002d18 	.word	0x00002d18
     94c:	00000fff 	.word	0x00000fff
     950:	00806024 	.word	0x00806024
     954:	00806020 	.word	0x00806020
		switch (resolution) {
     958:	2c00      	cmp	r4, #0
     95a:	d000      	beq.n	95e <adc_init+0x362>
     95c:	e77f      	b.n	85e <adc_init+0x262>
			if (config->differential_mode &&
     95e:	7cf2      	ldrb	r2, [r6, #19]
     960:	2a00      	cmp	r2, #0
     962:	d00f      	beq.n	984 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     964:	69f2      	ldr	r2, [r6, #28]
     966:	2180      	movs	r1, #128	; 0x80
     968:	0109      	lsls	r1, r1, #4
     96a:	468c      	mov	ip, r1
     96c:	4462      	add	r2, ip
			if (config->differential_mode &&
     96e:	492a      	ldr	r1, [pc, #168]	; (a18 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     970:	2017      	movs	r0, #23
			if (config->differential_mode &&
     972:	428a      	cmp	r2, r1
     974:	d900      	bls.n	978 <adc_init+0x37c>
     976:	e654      	b.n	622 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     978:	6a32      	ldr	r2, [r6, #32]
     97a:	4462      	add	r2, ip
     97c:	4926      	ldr	r1, [pc, #152]	; (a18 <adc_init+0x41c>)
     97e:	428a      	cmp	r2, r1
     980:	d900      	bls.n	984 <adc_init+0x388>
     982:	e64e      	b.n	622 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     984:	4a24      	ldr	r2, [pc, #144]	; (a18 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     986:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     988:	69f1      	ldr	r1, [r6, #28]
     98a:	4291      	cmp	r1, r2
     98c:	dd00      	ble.n	990 <adc_init+0x394>
     98e:	e648      	b.n	622 <adc_init+0x26>
     990:	6a31      	ldr	r1, [r6, #32]
     992:	4291      	cmp	r1, r2
     994:	dd00      	ble.n	998 <adc_init+0x39c>
     996:	e644      	b.n	622 <adc_init+0x26>
     998:	e761      	b.n	85e <adc_init+0x262>
			if (config->differential_mode &&
     99a:	7cf2      	ldrb	r2, [r6, #19]
     99c:	2a00      	cmp	r2, #0
     99e:	d00f      	beq.n	9c0 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     9a0:	69f2      	ldr	r2, [r6, #28]
     9a2:	2180      	movs	r1, #128	; 0x80
     9a4:	0089      	lsls	r1, r1, #2
     9a6:	468c      	mov	ip, r1
     9a8:	4462      	add	r2, ip
			if (config->differential_mode &&
     9aa:	491c      	ldr	r1, [pc, #112]	; (a1c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     9ac:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9ae:	428a      	cmp	r2, r1
     9b0:	d900      	bls.n	9b4 <adc_init+0x3b8>
     9b2:	e636      	b.n	622 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     9b4:	6a32      	ldr	r2, [r6, #32]
     9b6:	4462      	add	r2, ip
     9b8:	4918      	ldr	r1, [pc, #96]	; (a1c <adc_init+0x420>)
     9ba:	428a      	cmp	r2, r1
     9bc:	d900      	bls.n	9c0 <adc_init+0x3c4>
     9be:	e630      	b.n	622 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     9c0:	4a16      	ldr	r2, [pc, #88]	; (a1c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     9c2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     9c4:	69f1      	ldr	r1, [r6, #28]
     9c6:	4291      	cmp	r1, r2
     9c8:	dd00      	ble.n	9cc <adc_init+0x3d0>
     9ca:	e62a      	b.n	622 <adc_init+0x26>
     9cc:	6a31      	ldr	r1, [r6, #32]
     9ce:	4291      	cmp	r1, r2
     9d0:	dd00      	ble.n	9d4 <adc_init+0x3d8>
     9d2:	e626      	b.n	622 <adc_init+0x26>
     9d4:	e743      	b.n	85e <adc_init+0x262>
			if (config->differential_mode &&
     9d6:	7cf2      	ldrb	r2, [r6, #19]
     9d8:	2a00      	cmp	r2, #0
     9da:	d00f      	beq.n	9fc <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     9dc:	69f2      	ldr	r2, [r6, #28]
     9de:	2180      	movs	r1, #128	; 0x80
     9e0:	0209      	lsls	r1, r1, #8
     9e2:	468c      	mov	ip, r1
     9e4:	4462      	add	r2, ip
			if (config->differential_mode &&
     9e6:	490e      	ldr	r1, [pc, #56]	; (a20 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     9e8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9ea:	428a      	cmp	r2, r1
     9ec:	d900      	bls.n	9f0 <adc_init+0x3f4>
     9ee:	e618      	b.n	622 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     9f0:	6a32      	ldr	r2, [r6, #32]
     9f2:	4462      	add	r2, ip
     9f4:	490a      	ldr	r1, [pc, #40]	; (a20 <adc_init+0x424>)
     9f6:	428a      	cmp	r2, r1
     9f8:	d900      	bls.n	9fc <adc_init+0x400>
     9fa:	e612      	b.n	622 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     9fc:	4a08      	ldr	r2, [pc, #32]	; (a20 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     9fe:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     a00:	69f1      	ldr	r1, [r6, #28]
     a02:	4291      	cmp	r1, r2
     a04:	dd00      	ble.n	a08 <adc_init+0x40c>
     a06:	e60c      	b.n	622 <adc_init+0x26>
     a08:	6a31      	ldr	r1, [r6, #32]
     a0a:	4291      	cmp	r1, r2
     a0c:	dd00      	ble.n	a10 <adc_init+0x414>
     a0e:	e608      	b.n	622 <adc_init+0x26>
     a10:	e725      	b.n	85e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     a12:	2017      	movs	r0, #23
     a14:	e605      	b.n	622 <adc_init+0x26>
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	00000fff 	.word	0x00000fff
     a1c:	000003ff 	.word	0x000003ff
     a20:	0000ffff 	.word	0x0000ffff

00000a24 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     a24:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     a26:	4b2f      	ldr	r3, [pc, #188]	; (ae4 <ADC_Handler+0xc0>)
     a28:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     a2a:	682b      	ldr	r3, [r5, #0]
     a2c:	7e1a      	ldrb	r2, [r3, #24]
     a2e:	7ddc      	ldrb	r4, [r3, #23]
     a30:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     a32:	07e2      	lsls	r2, r4, #31
     a34:	d416      	bmi.n	a64 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     a36:	0763      	lsls	r3, r4, #29
     a38:	d508      	bpl.n	a4c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     a3a:	2304      	movs	r3, #4
     a3c:	682a      	ldr	r2, [r5, #0]
     a3e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     a40:	7eeb      	ldrb	r3, [r5, #27]
     a42:	079b      	lsls	r3, r3, #30
     a44:	d502      	bpl.n	a4c <ADC_Handler+0x28>
     a46:	7eab      	ldrb	r3, [r5, #26]
     a48:	079b      	lsls	r3, r3, #30
     a4a:	d442      	bmi.n	ad2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     a4c:	07a3      	lsls	r3, r4, #30
     a4e:	d508      	bpl.n	a62 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     a50:	2302      	movs	r3, #2
     a52:	682a      	ldr	r2, [r5, #0]
     a54:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     a56:	7eeb      	ldrb	r3, [r5, #27]
     a58:	075b      	lsls	r3, r3, #29
     a5a:	d502      	bpl.n	a62 <ADC_Handler+0x3e>
     a5c:	7eab      	ldrb	r3, [r5, #26]
     a5e:	075b      	lsls	r3, r3, #29
     a60:	d43b      	bmi.n	ada <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     a62:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     a64:	2201      	movs	r2, #1
     a66:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     a68:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a6a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     a6c:	b25b      	sxtb	r3, r3
     a6e:	2b00      	cmp	r3, #0
     a70:	dbfb      	blt.n	a6a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     a72:	6969      	ldr	r1, [r5, #20]
     a74:	1c8b      	adds	r3, r1, #2
     a76:	616b      	str	r3, [r5, #20]
     a78:	8b53      	ldrh	r3, [r2, #26]
     a7a:	b29b      	uxth	r3, r3
     a7c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     a7e:	8b2b      	ldrh	r3, [r5, #24]
     a80:	3b01      	subs	r3, #1
     a82:	b29b      	uxth	r3, r3
     a84:	832b      	strh	r3, [r5, #24]
     a86:	2b00      	cmp	r3, #0
     a88:	d011      	beq.n	aae <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     a8a:	7f6b      	ldrb	r3, [r5, #29]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d0d2      	beq.n	a36 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     a90:	682a      	ldr	r2, [r5, #0]
     a92:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     a94:	b25b      	sxtb	r3, r3
     a96:	2b00      	cmp	r3, #0
     a98:	dbfb      	blt.n	a92 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     a9a:	7b13      	ldrb	r3, [r2, #12]
     a9c:	2102      	movs	r1, #2
     a9e:	430b      	orrs	r3, r1
     aa0:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     aa2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     aa4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     aa6:	b25b      	sxtb	r3, r3
     aa8:	2b00      	cmp	r3, #0
     aaa:	dbfb      	blt.n	aa4 <ADC_Handler+0x80>
     aac:	e7c3      	b.n	a36 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     aae:	2301      	movs	r3, #1
     ab0:	682a      	ldr	r2, [r5, #0]
     ab2:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     ab4:	7f2b      	ldrb	r3, [r5, #28]
     ab6:	2b05      	cmp	r3, #5
     ab8:	d1bd      	bne.n	a36 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     aba:	2300      	movs	r3, #0
     abc:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     abe:	7eeb      	ldrb	r3, [r5, #27]
     ac0:	07db      	lsls	r3, r3, #31
     ac2:	d5b8      	bpl.n	a36 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     ac4:	7eab      	ldrb	r3, [r5, #26]
     ac6:	07db      	lsls	r3, r3, #31
     ac8:	d5b5      	bpl.n	a36 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     aca:	0028      	movs	r0, r5
     acc:	68ab      	ldr	r3, [r5, #8]
     ace:	4798      	blx	r3
     ad0:	e7b1      	b.n	a36 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     ad2:	0028      	movs	r0, r5
     ad4:	68eb      	ldr	r3, [r5, #12]
     ad6:	4798      	blx	r3
     ad8:	e7b8      	b.n	a4c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     ada:	692b      	ldr	r3, [r5, #16]
     adc:	0028      	movs	r0, r5
     ade:	4798      	blx	r3
}
     ae0:	e7bf      	b.n	a62 <ADC_Handler+0x3e>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	200001b4 	.word	0x200001b4

00000ae8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     ae8:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
     aea:	4b26      	ldr	r3, [pc, #152]	; (b84 <DMAC_Handler+0x9c>)
     aec:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     aee:	4926      	ldr	r1, [pc, #152]	; (b88 <DMAC_Handler+0xa0>)
     af0:	8c0b      	ldrh	r3, [r1, #32]
     af2:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     af4:	4013      	ands	r3, r2
     af6:	009b      	lsls	r3, r3, #2
     af8:	4824      	ldr	r0, [pc, #144]	; (b8c <DMAC_Handler+0xa4>)
     afa:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     afc:	7803      	ldrb	r3, [r0, #0]
     afe:	401a      	ands	r2, r3
     b00:	233f      	movs	r3, #63	; 0x3f
     b02:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     b04:	330f      	adds	r3, #15
     b06:	5cca      	ldrb	r2, [r1, r3]
     b08:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     b0a:	7803      	ldrb	r3, [r0, #0]
     b0c:	011b      	lsls	r3, r3, #4
     b0e:	4920      	ldr	r1, [pc, #128]	; (b90 <DMAC_Handler+0xa8>)
     b10:	18c9      	adds	r1, r1, r3
     b12:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     b14:	4c1f      	ldr	r4, [pc, #124]	; (b94 <DMAC_Handler+0xac>)
     b16:	18e3      	adds	r3, r4, r3
     b18:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     b1a:	1acb      	subs	r3, r1, r3
     b1c:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     b1e:	07d3      	lsls	r3, r2, #31
     b20:	d50f      	bpl.n	b42 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     b22:	2101      	movs	r1, #1
     b24:	234e      	movs	r3, #78	; 0x4e
     b26:	4a18      	ldr	r2, [pc, #96]	; (b88 <DMAC_Handler+0xa0>)
     b28:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     b2a:	3b3e      	subs	r3, #62	; 0x3e
     b2c:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     b2e:	7c03      	ldrb	r3, [r0, #16]
     b30:	07db      	lsls	r3, r3, #31
     b32:	d503      	bpl.n	b3c <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     b34:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     b36:	2b00      	cmp	r3, #0
     b38:	d000      	beq.n	b3c <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     b3a:	4798      	blx	r3
	cpu_irq_leave_critical();
     b3c:	4b16      	ldr	r3, [pc, #88]	; (b98 <DMAC_Handler+0xb0>)
     b3e:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     b40:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     b42:	0793      	lsls	r3, r2, #30
     b44:	d50d      	bpl.n	b62 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     b46:	2102      	movs	r1, #2
     b48:	234e      	movs	r3, #78	; 0x4e
     b4a:	4a0f      	ldr	r2, [pc, #60]	; (b88 <DMAC_Handler+0xa0>)
     b4c:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     b4e:	2300      	movs	r3, #0
     b50:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     b52:	7c03      	ldrb	r3, [r0, #16]
     b54:	079b      	lsls	r3, r3, #30
     b56:	d5f1      	bpl.n	b3c <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     b58:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     b5a:	2b00      	cmp	r3, #0
     b5c:	d0ee      	beq.n	b3c <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     b5e:	4798      	blx	r3
     b60:	e7ec      	b.n	b3c <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     b62:	0753      	lsls	r3, r2, #29
     b64:	d5ea      	bpl.n	b3c <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     b66:	2104      	movs	r1, #4
     b68:	234e      	movs	r3, #78	; 0x4e
     b6a:	4a07      	ldr	r2, [pc, #28]	; (b88 <DMAC_Handler+0xa0>)
     b6c:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     b6e:	3b48      	subs	r3, #72	; 0x48
     b70:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     b72:	7c03      	ldrb	r3, [r0, #16]
     b74:	075b      	lsls	r3, r3, #29
     b76:	d5e1      	bpl.n	b3c <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     b78:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     b7a:	2b00      	cmp	r3, #0
     b7c:	d0de      	beq.n	b3c <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     b7e:	4798      	blx	r3
     b80:	e7dc      	b.n	b3c <DMAC_Handler+0x54>
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	00002135 	.word	0x00002135
     b88:	41004800 	.word	0x41004800
     b8c:	200000b0 	.word	0x200000b0
     b90:	200001c0 	.word	0x200001c0
     b94:	200000d0 	.word	0x200000d0
     b98:	00002175 	.word	0x00002175

00000b9c <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     b9c:	2300      	movs	r3, #0
     b9e:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     ba0:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTON_TRANSACTION;
     ba2:	2203      	movs	r2, #3
     ba4:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     ba6:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     ba8:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     baa:	4770      	bx	lr

00000bac <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bae:	46ce      	mov	lr, r9
     bb0:	4647      	mov	r7, r8
     bb2:	b580      	push	{r7, lr}
     bb4:	0005      	movs	r5, r0
     bb6:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     bb8:	4b45      	ldr	r3, [pc, #276]	; (cd0 <dma_allocate+0x124>)
     bba:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     bbc:	4b45      	ldr	r3, [pc, #276]	; (cd4 <dma_allocate+0x128>)
     bbe:	781b      	ldrb	r3, [r3, #0]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d118      	bne.n	bf6 <dma_allocate+0x4a>
	PM->AHBMASK.reg |= ahb_mask;
     bc4:	4b44      	ldr	r3, [pc, #272]	; (cd8 <dma_allocate+0x12c>)
     bc6:	695a      	ldr	r2, [r3, #20]
     bc8:	2120      	movs	r1, #32
     bca:	430a      	orrs	r2, r1
     bcc:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
     bce:	69da      	ldr	r2, [r3, #28]
     bd0:	3910      	subs	r1, #16
     bd2:	430a      	orrs	r2, r1
     bd4:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     bd6:	4b41      	ldr	r3, [pc, #260]	; (cdc <dma_allocate+0x130>)
     bd8:	881a      	ldrh	r2, [r3, #0]
     bda:	390e      	subs	r1, #14
     bdc:	438a      	bics	r2, r1
     bde:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     be0:	2201      	movs	r2, #1
     be2:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     be4:	4a3e      	ldr	r2, [pc, #248]	; (ce0 <dma_allocate+0x134>)
     be6:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     be8:	4a3e      	ldr	r2, [pc, #248]	; (ce4 <dma_allocate+0x138>)
     bea:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     bec:	4a3e      	ldr	r2, [pc, #248]	; (ce8 <dma_allocate+0x13c>)
     bee:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     bf0:	4b38      	ldr	r3, [pc, #224]	; (cd4 <dma_allocate+0x128>)
     bf2:	2201      	movs	r2, #1
     bf4:	701a      	strb	r2, [r3, #0]
     bf6:	4b36      	ldr	r3, [pc, #216]	; (cd0 <dma_allocate+0x124>)
     bf8:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     bfa:	4b36      	ldr	r3, [pc, #216]	; (cd4 <dma_allocate+0x128>)
     bfc:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     bfe:	07da      	lsls	r2, r3, #31
     c00:	d50f      	bpl.n	c22 <dma_allocate+0x76>
		tmp = tmp >> 1;
     c02:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     c04:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     c06:	2201      	movs	r2, #1
     c08:	421a      	tst	r2, r3
     c0a:	d00b      	beq.n	c24 <dma_allocate+0x78>
		tmp = tmp >> 1;
     c0c:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     c0e:	3401      	adds	r4, #1
     c10:	b2e4      	uxtb	r4, r4
     c12:	2c05      	cmp	r4, #5
     c14:	d1f8      	bne.n	c08 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     c16:	4b35      	ldr	r3, [pc, #212]	; (cec <dma_allocate+0x140>)
     c18:	4798      	blx	r3
     c1a:	4b34      	ldr	r3, [pc, #208]	; (cec <dma_allocate+0x140>)
     c1c:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     c1e:	2014      	movs	r0, #20
     c20:	e051      	b.n	cc6 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     c22:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     c24:	4a2b      	ldr	r2, [pc, #172]	; (cd4 <dma_allocate+0x128>)
     c26:	6851      	ldr	r1, [r2, #4]
     c28:	2301      	movs	r3, #1
     c2a:	40a3      	lsls	r3, r4
     c2c:	430b      	orrs	r3, r1
     c2e:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     c30:	7a13      	ldrb	r3, [r2, #8]
     c32:	3b01      	subs	r3, #1
     c34:	7213      	strb	r3, [r2, #8]
     c36:	4b2d      	ldr	r3, [pc, #180]	; (cec <dma_allocate+0x140>)
     c38:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     c3a:	2cff      	cmp	r4, #255	; 0xff
     c3c:	d0ed      	beq.n	c1a <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     c3e:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     c40:	2307      	movs	r3, #7
     c42:	4698      	mov	r8, r3
     c44:	401c      	ands	r4, r3
     c46:	4f25      	ldr	r7, [pc, #148]	; (cdc <dma_allocate+0x130>)
     c48:	3338      	adds	r3, #56	; 0x38
     c4a:	4699      	mov	r9, r3
     c4c:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     c4e:	3301      	adds	r3, #1
     c50:	5cfa      	ldrb	r2, [r7, r3]
     c52:	2102      	movs	r1, #2
     c54:	438a      	bics	r2, r1
     c56:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     c58:	2401      	movs	r4, #1
     c5a:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     c5c:	4b1c      	ldr	r3, [pc, #112]	; (cd0 <dma_allocate+0x124>)
     c5e:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     c60:	782b      	ldrb	r3, [r5, #0]
     c62:	4642      	mov	r2, r8
     c64:	4013      	ands	r3, r2
     c66:	464a      	mov	r2, r9
     c68:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     c6a:	693b      	ldr	r3, [r7, #16]
     c6c:	782a      	ldrb	r2, [r5, #0]
     c6e:	4094      	lsls	r4, r2
     c70:	43a3      	bics	r3, r4
     c72:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c74:	7832      	ldrb	r2, [r6, #0]
     c76:	0152      	lsls	r2, r2, #5
     c78:	2360      	movs	r3, #96	; 0x60
     c7a:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     c7c:	7872      	ldrb	r2, [r6, #1]
     c7e:	0212      	lsls	r2, r2, #8
     c80:	21f8      	movs	r1, #248	; 0xf8
     c82:	0149      	lsls	r1, r1, #5
     c84:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c86:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     c88:	78b2      	ldrb	r2, [r6, #2]
     c8a:	0592      	lsls	r2, r2, #22
     c8c:	21c0      	movs	r1, #192	; 0xc0
     c8e:	0409      	lsls	r1, r1, #16
     c90:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     c92:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     c94:	78f1      	ldrb	r1, [r6, #3]
     c96:	2900      	cmp	r1, #0
     c98:	d004      	beq.n	ca4 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     c9a:	2207      	movs	r2, #7
     c9c:	400a      	ands	r2, r1
     c9e:	2108      	movs	r1, #8
     ca0:	430a      	orrs	r2, r1
     ca2:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     ca4:	7932      	ldrb	r2, [r6, #4]
     ca6:	2a00      	cmp	r2, #0
     ca8:	d001      	beq.n	cae <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     caa:	2210      	movs	r2, #16
     cac:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     cae:	4a0b      	ldr	r2, [pc, #44]	; (cdc <dma_allocate+0x130>)
     cb0:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     cb2:	4c0e      	ldr	r4, [pc, #56]	; (cec <dma_allocate+0x140>)
     cb4:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     cb6:	2300      	movs	r3, #0
     cb8:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     cba:	782b      	ldrb	r3, [r5, #0]
     cbc:	009b      	lsls	r3, r3, #2
     cbe:	4a0c      	ldr	r2, [pc, #48]	; (cf0 <dma_allocate+0x144>)
     cc0:	509d      	str	r5, [r3, r2]
     cc2:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     cc4:	2000      	movs	r0, #0
}
     cc6:	bc0c      	pop	{r2, r3}
     cc8:	4690      	mov	r8, r2
     cca:	4699      	mov	r9, r3
     ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cce:	46c0      	nop			; (mov r8, r8)
     cd0:	00002135 	.word	0x00002135
     cd4:	2000000c 	.word	0x2000000c
     cd8:	40000400 	.word	0x40000400
     cdc:	41004800 	.word	0x41004800
     ce0:	200001c0 	.word	0x200001c0
     ce4:	200000d0 	.word	0x200000d0
     ce8:	00000f02 	.word	0x00000f02
     cec:	00002175 	.word	0x00002175
     cf0:	200000b0 	.word	0x200000b0

00000cf4 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     cf4:	b570      	push	{r4, r5, r6, lr}
     cf6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     cf8:	4b19      	ldr	r3, [pc, #100]	; (d60 <dma_start_transfer_job+0x6c>)
     cfa:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     cfc:	7c63      	ldrb	r3, [r4, #17]
     cfe:	2b05      	cmp	r3, #5
     d00:	d008      	beq.n	d14 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     d02:	69a3      	ldr	r3, [r4, #24]
     d04:	885b      	ldrh	r3, [r3, #2]
     d06:	b29b      	uxth	r3, r3
     d08:	2b00      	cmp	r3, #0
     d0a:	d107      	bne.n	d1c <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     d0c:	4b15      	ldr	r3, [pc, #84]	; (d64 <dma_start_transfer_job+0x70>)
     d0e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     d10:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     d12:	bd70      	pop	{r4, r5, r6, pc}
     d14:	4b13      	ldr	r3, [pc, #76]	; (d64 <dma_start_transfer_job+0x70>)
     d16:	4798      	blx	r3
		return STATUS_BUSY;
     d18:	2005      	movs	r0, #5
     d1a:	e7fa      	b.n	d12 <dma_start_transfer_job+0x1e>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d1c:	2640      	movs	r6, #64	; 0x40
     d1e:	4b12      	ldr	r3, [pc, #72]	; (d68 <dma_start_transfer_job+0x74>)
     d20:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     d22:	7822      	ldrb	r2, [r4, #0]
     d24:	2307      	movs	r3, #7
     d26:	401a      	ands	r2, r3
     d28:	4d10      	ldr	r5, [pc, #64]	; (d6c <dma_start_transfer_job+0x78>)
     d2a:	213f      	movs	r1, #63	; 0x3f
     d2c:	546a      	strb	r2, [r5, r1]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     d2e:	7822      	ldrb	r2, [r4, #0]
     d30:	490f      	ldr	r1, [pc, #60]	; (d70 <dma_start_transfer_job+0x7c>)
     d32:	5c8a      	ldrb	r2, [r1, r2]
     d34:	4013      	ands	r3, r2
     d36:	224d      	movs	r2, #77	; 0x4d
     d38:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     d3a:	2305      	movs	r3, #5
     d3c:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     d3e:	7820      	ldrb	r0, [r4, #0]
     d40:	0100      	lsls	r0, r0, #4
     d42:	4b0c      	ldr	r3, [pc, #48]	; (d74 <dma_start_transfer_job+0x80>)
     d44:	18c0      	adds	r0, r0, r3
     d46:	69a1      	ldr	r1, [r4, #24]
     d48:	3a3d      	subs	r2, #61	; 0x3d
     d4a:	4b0b      	ldr	r3, [pc, #44]	; (d78 <dma_start_transfer_job+0x84>)
     d4c:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     d4e:	5dab      	ldrb	r3, [r5, r6]
     d50:	2202      	movs	r2, #2
     d52:	4313      	orrs	r3, r2
     d54:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     d56:	4b03      	ldr	r3, [pc, #12]	; (d64 <dma_start_transfer_job+0x70>)
     d58:	4798      	blx	r3
	return STATUS_OK;
     d5a:	2000      	movs	r0, #0
     d5c:	e7d9      	b.n	d12 <dma_start_transfer_job+0x1e>
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	00002135 	.word	0x00002135
     d64:	00002175 	.word	0x00002175
     d68:	e000e100 	.word	0xe000e100
     d6c:	41004800 	.word	0x41004800
     d70:	20000120 	.word	0x20000120
     d74:	200001c0 	.word	0x200001c0
     d78:	00002c0d 	.word	0x00002c0d

00000d7c <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     d7e:	780a      	ldrb	r2, [r1, #0]
     d80:	8803      	ldrh	r3, [r0, #0]
     d82:	2601      	movs	r6, #1
     d84:	4032      	ands	r2, r6
     d86:	2401      	movs	r4, #1
     d88:	43a3      	bics	r3, r4
     d8a:	4313      	orrs	r3, r2
     d8c:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     d8e:	784b      	ldrb	r3, [r1, #1]
     d90:	8804      	ldrh	r4, [r0, #0]
     d92:	2703      	movs	r7, #3
     d94:	403b      	ands	r3, r7
     d96:	005b      	lsls	r3, r3, #1
     d98:	2206      	movs	r2, #6
     d9a:	4394      	bics	r4, r2
     d9c:	431c      	orrs	r4, r3
     d9e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     da0:	788d      	ldrb	r5, [r1, #2]
     da2:	8804      	ldrh	r4, [r0, #0]
     da4:	403d      	ands	r5, r7
     da6:	00ed      	lsls	r5, r5, #3
     da8:	2318      	movs	r3, #24
     daa:	439c      	bics	r4, r3
     dac:	432c      	orrs	r4, r5
     dae:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     db0:	78ca      	ldrb	r2, [r1, #3]
     db2:	8803      	ldrh	r3, [r0, #0]
     db4:	403a      	ands	r2, r7
     db6:	0212      	lsls	r2, r2, #8
     db8:	4c16      	ldr	r4, [pc, #88]	; (e14 <dma_descriptor_create+0x98>)
     dba:	4023      	ands	r3, r4
     dbc:	4313      	orrs	r3, r2
     dbe:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     dc0:	790b      	ldrb	r3, [r1, #4]
     dc2:	8804      	ldrh	r4, [r0, #0]
     dc4:	4033      	ands	r3, r6
     dc6:	029b      	lsls	r3, r3, #10
     dc8:	4a13      	ldr	r2, [pc, #76]	; (e18 <dma_descriptor_create+0x9c>)
     dca:	4014      	ands	r4, r2
     dcc:	431c      	orrs	r4, r3
     dce:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     dd0:	794d      	ldrb	r5, [r1, #5]
     dd2:	8804      	ldrh	r4, [r0, #0]
     dd4:	4035      	ands	r5, r6
     dd6:	02ed      	lsls	r5, r5, #11
     dd8:	4b10      	ldr	r3, [pc, #64]	; (e1c <dma_descriptor_create+0xa0>)
     dda:	401c      	ands	r4, r3
     ddc:	432c      	orrs	r4, r5
     dde:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     de0:	798a      	ldrb	r2, [r1, #6]
     de2:	8803      	ldrh	r3, [r0, #0]
     de4:	4032      	ands	r2, r6
     de6:	0312      	lsls	r2, r2, #12
     de8:	4c0d      	ldr	r4, [pc, #52]	; (e20 <dma_descriptor_create+0xa4>)
     dea:	4023      	ands	r3, r4
     dec:	4313      	orrs	r3, r2
     dee:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     df0:	79cb      	ldrb	r3, [r1, #7]
     df2:	2207      	movs	r2, #7
     df4:	401a      	ands	r2, r3
     df6:	8803      	ldrh	r3, [r0, #0]
     df8:	0352      	lsls	r2, r2, #13
     dfa:	04db      	lsls	r3, r3, #19
     dfc:	0cdb      	lsrs	r3, r3, #19
     dfe:	4313      	orrs	r3, r2
     e00:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     e02:	890b      	ldrh	r3, [r1, #8]
     e04:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     e06:	68cb      	ldr	r3, [r1, #12]
     e08:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     e0a:	690b      	ldr	r3, [r1, #16]
     e0c:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     e0e:	694b      	ldr	r3, [r1, #20]
     e10:	60c3      	str	r3, [r0, #12]
}
     e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e14:	fffffcff 	.word	0xfffffcff
     e18:	fffffbff 	.word	0xfffffbff
     e1c:	fffff7ff 	.word	0xfffff7ff
     e20:	ffffefff 	.word	0xffffefff

00000e24 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     e24:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     e26:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     e28:	2a05      	cmp	r2, #5
     e2a:	d00b      	beq.n	e44 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     e2c:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     e2e:	2b00      	cmp	r3, #0
     e30:	d00a      	beq.n	e48 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     e32:	68da      	ldr	r2, [r3, #12]
     e34:	2a00      	cmp	r2, #0
     e36:	d003      	beq.n	e40 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     e38:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     e3a:	68da      	ldr	r2, [r3, #12]
     e3c:	2a00      	cmp	r2, #0
     e3e:	d1fb      	bne.n	e38 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     e40:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     e42:	2300      	movs	r3, #0
}
     e44:	0018      	movs	r0, r3
     e46:	4770      	bx	lr
		resource->descriptor = descriptor;
     e48:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     e4a:	2300      	movs	r3, #0
     e4c:	e7fa      	b.n	e44 <dma_add_descriptor+0x20>
	...

00000e50 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e50:	b500      	push	{lr}
     e52:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e54:	ab01      	add	r3, sp, #4
     e56:	2280      	movs	r2, #128	; 0x80
     e58:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e5a:	780a      	ldrb	r2, [r1, #0]
     e5c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e5e:	784a      	ldrb	r2, [r1, #1]
     e60:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e62:	788a      	ldrb	r2, [r1, #2]
     e64:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e66:	0019      	movs	r1, r3
     e68:	4b01      	ldr	r3, [pc, #4]	; (e70 <port_pin_set_config+0x20>)
     e6a:	4798      	blx	r3
}
     e6c:	b003      	add	sp, #12
     e6e:	bd00      	pop	{pc}
     e70:	000028c5 	.word	0x000028c5

00000e74 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
     e76:	46ce      	mov	lr, r9
     e78:	4647      	mov	r7, r8
     e7a:	b580      	push	{r7, lr}
     e7c:	b083      	sub	sp, #12
     e7e:	0005      	movs	r5, r0
     e80:	000c      	movs	r4, r1
     e82:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     e84:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     e86:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     e88:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     e8a:	079b      	lsls	r3, r3, #30
     e8c:	d504      	bpl.n	e98 <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     e8e:	b003      	add	sp, #12
     e90:	bc0c      	pop	{r2, r3}
     e92:	4690      	mov	r8, r2
     e94:	4699      	mov	r9, r3
     e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     e98:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     e9a:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     e9c:	07db      	lsls	r3, r3, #31
     e9e:	d4f6      	bmi.n	e8e <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ea0:	0008      	movs	r0, r1
     ea2:	4b4d      	ldr	r3, [pc, #308]	; (fd8 <i2c_slave_init+0x164>)
     ea4:	4699      	mov	r9, r3
     ea6:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     ea8:	4a4c      	ldr	r2, [pc, #304]	; (fdc <i2c_slave_init+0x168>)
     eaa:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     eac:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     eae:	2701      	movs	r7, #1
     eb0:	46b8      	mov	r8, r7
     eb2:	409f      	lsls	r7, r3
     eb4:	003b      	movs	r3, r7
     eb6:	430b      	orrs	r3, r1
     eb8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     eba:	a901      	add	r1, sp, #4
     ebc:	7e73      	ldrb	r3, [r6, #25]
     ebe:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ec0:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ec2:	b2c3      	uxtb	r3, r0
     ec4:	001f      	movs	r7, r3
     ec6:	0018      	movs	r0, r3
     ec8:	4b45      	ldr	r3, [pc, #276]	; (fe0 <i2c_slave_init+0x16c>)
     eca:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ecc:	0038      	movs	r0, r7
     ece:	4b45      	ldr	r3, [pc, #276]	; (fe4 <i2c_slave_init+0x170>)
     ed0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ed2:	7e70      	ldrb	r0, [r6, #25]
     ed4:	2100      	movs	r1, #0
     ed6:	4b44      	ldr	r3, [pc, #272]	; (fe8 <i2c_slave_init+0x174>)
     ed8:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     eda:	6828      	ldr	r0, [r5, #0]
     edc:	47c8      	blx	r9
     ede:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     ee0:	4942      	ldr	r1, [pc, #264]	; (fec <i2c_slave_init+0x178>)
     ee2:	4b43      	ldr	r3, [pc, #268]	; (ff0 <i2c_slave_init+0x17c>)
     ee4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ee6:	00bf      	lsls	r7, r7, #2
     ee8:	4b42      	ldr	r3, [pc, #264]	; (ff4 <i2c_slave_init+0x180>)
     eea:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     eec:	2300      	movs	r3, #0
     eee:	2224      	movs	r2, #36	; 0x24
     ef0:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     ef2:	3201      	adds	r2, #1
     ef4:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     ef6:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     ef8:	7e33      	ldrb	r3, [r6, #24]
     efa:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     efc:	2310      	movs	r3, #16
     efe:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     f00:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     f02:	8933      	ldrh	r3, [r6, #8]
     f04:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     f06:	7c33      	ldrb	r3, [r6, #16]
     f08:	722b      	strb	r3, [r5, #8]
     f0a:	2380      	movs	r3, #128	; 0x80
     f0c:	466a      	mov	r2, sp
     f0e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f10:	2300      	movs	r3, #0
     f12:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f14:	466b      	mov	r3, sp
     f16:	4642      	mov	r2, r8
     f18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     f1a:	2300      	movs	r3, #0
     f1c:	466a      	mov	r2, sp
     f1e:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     f20:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     f22:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     f24:	2800      	cmp	r0, #0
     f26:	d04b      	beq.n	fc0 <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     f28:	466b      	mov	r3, sp
     f2a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f2c:	2302      	movs	r3, #2
     f2e:	466a      	mov	r2, sp
     f30:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     f32:	0c00      	lsrs	r0, r0, #16
     f34:	b2c0      	uxtb	r0, r0
     f36:	4669      	mov	r1, sp
     f38:	4b2f      	ldr	r3, [pc, #188]	; (ff8 <i2c_slave_init+0x184>)
     f3a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     f3c:	2d00      	cmp	r5, #0
     f3e:	d044      	beq.n	fca <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     f40:	466b      	mov	r3, sp
     f42:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     f44:	2302      	movs	r3, #2
     f46:	466a      	mov	r2, sp
     f48:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     f4a:	0c2d      	lsrs	r5, r5, #16
     f4c:	b2e8      	uxtb	r0, r5
     f4e:	4669      	mov	r1, sp
     f50:	4b29      	ldr	r3, [pc, #164]	; (ff8 <i2c_slave_init+0x184>)
     f52:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     f54:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     f56:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     f58:	2b00      	cmp	r3, #0
     f5a:	d104      	bne.n	f66 <i2c_slave_init+0xf2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     f5c:	4b27      	ldr	r3, [pc, #156]	; (ffc <i2c_slave_init+0x188>)
     f5e:	789b      	ldrb	r3, [r3, #2]
     f60:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     f62:	0fdb      	lsrs	r3, r3, #31
     f64:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     f66:	2325      	movs	r3, #37	; 0x25
     f68:	5cf3      	ldrb	r3, [r6, r3]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d104      	bne.n	f78 <i2c_slave_init+0x104>
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	049b      	lsls	r3, r3, #18
     f72:	6971      	ldr	r1, [r6, #20]
     f74:	4299      	cmp	r1, r3
     f76:	d102      	bne.n	f7e <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     f78:	2380      	movs	r3, #128	; 0x80
     f7a:	051b      	lsls	r3, r3, #20
     f7c:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     f7e:	6820      	ldr	r0, [r4, #0]
     f80:	6873      	ldr	r3, [r6, #4]
     f82:	6971      	ldr	r1, [r6, #20]
     f84:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     f86:	2124      	movs	r1, #36	; 0x24
     f88:	5c71      	ldrb	r1, [r6, r1]
     f8a:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     f8c:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     f8e:	2126      	movs	r1, #38	; 0x26
     f90:	5c71      	ldrb	r1, [r6, r1]
     f92:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     f94:	430b      	orrs	r3, r1
     f96:	4303      	orrs	r3, r0
     f98:	4313      	orrs	r3, r2
     f9a:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     f9c:	8972      	ldrh	r2, [r6, #10]
     f9e:	2380      	movs	r3, #128	; 0x80
     fa0:	005b      	lsls	r3, r3, #1
     fa2:	4313      	orrs	r3, r2
     fa4:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     fa6:	89b3      	ldrh	r3, [r6, #12]
     fa8:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     faa:	89f2      	ldrh	r2, [r6, #14]
     fac:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     fae:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     fb0:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     fb2:	4313      	orrs	r3, r2
     fb4:	7c32      	ldrb	r2, [r6, #16]
     fb6:	03d2      	lsls	r2, r2, #15
     fb8:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     fba:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     fbc:	2000      	movs	r0, #0
     fbe:	e766      	b.n	e8e <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     fc0:	2100      	movs	r1, #0
     fc2:	0020      	movs	r0, r4
     fc4:	4b0e      	ldr	r3, [pc, #56]	; (1000 <i2c_slave_init+0x18c>)
     fc6:	4798      	blx	r3
     fc8:	e7ae      	b.n	f28 <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     fca:	2101      	movs	r1, #1
     fcc:	0020      	movs	r0, r4
     fce:	4b0c      	ldr	r3, [pc, #48]	; (1000 <i2c_slave_init+0x18c>)
     fd0:	4798      	blx	r3
     fd2:	0005      	movs	r5, r0
     fd4:	e7b4      	b.n	f40 <i2c_slave_init+0xcc>
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	000013e5 	.word	0x000013e5
     fdc:	40000400 	.word	0x40000400
     fe0:	000027cd 	.word	0x000027cd
     fe4:	00002741 	.word	0x00002741
     fe8:	000012d9 	.word	0x000012d9
     fec:	00001049 	.word	0x00001049
     ff0:	00001421 	.word	0x00001421
     ff4:	20000210 	.word	0x20000210
     ff8:	000028c5 	.word	0x000028c5
     ffc:	41002000 	.word	0x41002000
    1000:	00001325 	.word	0x00001325

00001004 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
    1004:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
    1006:	1c93      	adds	r3, r2, #2
    1008:	009b      	lsls	r3, r3, #2
    100a:	18c3      	adds	r3, r0, r3
    100c:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
    100e:	2424      	movs	r4, #36	; 0x24
    1010:	5d03      	ldrb	r3, [r0, r4]
    1012:	2101      	movs	r1, #1
    1014:	4091      	lsls	r1, r2
    1016:	430b      	orrs	r3, r1
    1018:	b2db      	uxtb	r3, r3
    101a:	5503      	strb	r3, [r0, r4]
}
    101c:	bd10      	pop	{r4, pc}

0000101e <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
    101e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
    1020:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
    1022:	2a00      	cmp	r2, #0
    1024:	d001      	beq.n	102a <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
    1026:	0018      	movs	r0, r3
    1028:	4770      	bx	lr
	module->buffer           = packet->data;
    102a:	684b      	ldr	r3, [r1, #4]
    102c:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
    102e:	880b      	ldrh	r3, [r1, #0]
    1030:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
    1032:	880b      	ldrh	r3, [r1, #0]
    1034:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
    1036:	3205      	adds	r2, #5
    1038:	2331      	movs	r3, #49	; 0x31
    103a:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    103c:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
    103e:	3202      	adds	r2, #2
    1040:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
    1042:	2300      	movs	r3, #0
    1044:	e7ef      	b.n	1026 <i2c_slave_write_packet_job+0x8>
	...

00001048 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
    1048:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
    104a:	0080      	lsls	r0, r0, #2
    104c:	4b95      	ldr	r3, [pc, #596]	; (12a4 <_i2c_slave_interrupt_handler+0x25c>)
    104e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1050:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
    1052:	2325      	movs	r3, #37	; 0x25
    1054:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
    1056:	2224      	movs	r2, #36	; 0x24
    1058:	5ca6      	ldrb	r6, [r4, r2]
    105a:	401e      	ands	r6, r3

	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
    105c:	7e2b      	ldrb	r3, [r5, #24]
    105e:	079b      	lsls	r3, r3, #30
    1060:	d400      	bmi.n	1064 <_i2c_slave_interrupt_handler+0x1c>
    1062:	e08a      	b.n	117a <_i2c_slave_interrupt_handler+0x132>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
    1064:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1066:	b29b      	uxth	r3, r3
    1068:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    106a:	4293      	cmp	r3, r2
    106c:	d00d      	beq.n	108a <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
    106e:	2330      	movs	r3, #48	; 0x30
    1070:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
    1072:	2b00      	cmp	r3, #0
    1074:	d109      	bne.n	108a <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
    1076:	2231      	movs	r2, #49	; 0x31
    1078:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
    107a:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
    107c:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
    107e:	07b3      	lsls	r3, r6, #30
    1080:	d50b      	bpl.n	109a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    1082:	6923      	ldr	r3, [r4, #16]
    1084:	0020      	movs	r0, r4
    1086:	4798      	blx	r3
    1088:	e007      	b.n	109a <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
    108a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    108c:	b29b      	uxth	r3, r3
    108e:	429a      	cmp	r2, r3
    1090:	d003      	beq.n	109a <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
    1092:	2330      	movs	r3, #48	; 0x30
    1094:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
    1096:	2b01      	cmp	r3, #1
    1098:	d020      	beq.n	10dc <_i2c_slave_interrupt_handler+0x94>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
    109a:	8b6a      	ldrh	r2, [r5, #26]
    109c:	2343      	movs	r3, #67	; 0x43
    109e:	421a      	tst	r2, r3
    10a0:	d004      	beq.n	10ac <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
    10a2:	2210      	movs	r2, #16
    10a4:	3b12      	subs	r3, #18
    10a6:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
    10a8:	06b3      	lsls	r3, r6, #26
    10aa:	d422      	bmi.n	10f2 <_i2c_slave_interrupt_handler+0xaa>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
    10ac:	7a63      	ldrb	r3, [r4, #9]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d123      	bne.n	10fa <_i2c_slave_interrupt_handler+0xb2>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
    10b2:	8b6b      	ldrh	r3, [r5, #26]
    10b4:	071b      	lsls	r3, r3, #28
    10b6:	d53f      	bpl.n	1138 <_i2c_slave_interrupt_handler+0xf0>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
    10b8:	2201      	movs	r2, #1
    10ba:	2330      	movs	r3, #48	; 0x30
    10bc:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
    10be:	0773      	lsls	r3, r6, #29
    10c0:	d436      	bmi.n	1130 <_i2c_slave_interrupt_handler+0xe8>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
    10c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    10c4:	b29b      	uxth	r3, r3
    10c6:	2b00      	cmp	r3, #0
    10c8:	d021      	beq.n	110e <_i2c_slave_interrupt_handler+0xc6>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    10ca:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    10cc:	4b76      	ldr	r3, [pc, #472]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    10ce:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
    10d0:	2300      	movs	r3, #0
    10d2:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
    10d4:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    10d6:	4b75      	ldr	r3, [pc, #468]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    10d8:	4798      	blx	r3
    10da:	e018      	b.n	110e <_i2c_slave_interrupt_handler+0xc6>
			module->status = STATUS_OK;
    10dc:	2300      	movs	r3, #0
    10de:	2231      	movs	r2, #49	; 0x31
    10e0:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
    10e2:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
    10e4:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
    10e6:	07f3      	lsls	r3, r6, #31
    10e8:	d5d7      	bpl.n	109a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    10ea:	68e3      	ldr	r3, [r4, #12]
    10ec:	0020      	movs	r0, r4
    10ee:	4798      	blx	r3
    10f0:	e7d3      	b.n	109a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
    10f2:	6a23      	ldr	r3, [r4, #32]
    10f4:	0020      	movs	r0, r4
    10f6:	4798      	blx	r3
    10f8:	e7d8      	b.n	10ac <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    10fa:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    10fc:	4b6a      	ldr	r3, [pc, #424]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    10fe:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1100:	2300      	movs	r3, #0
    1102:	836b      	strh	r3, [r5, #26]
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    1104:	2380      	movs	r3, #128	; 0x80
    1106:	02db      	lsls	r3, r3, #11
    1108:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    110a:	4b68      	ldr	r3, [pc, #416]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    110c:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    110e:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
    1110:	7e1a      	ldrb	r2, [r3, #24]
    1112:	07d2      	lsls	r2, r2, #31
    1114:	d501      	bpl.n	111a <_i2c_slave_interrupt_handler+0xd2>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    1116:	2201      	movs	r2, #1
    1118:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    111a:	2202      	movs	r2, #2
    111c:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    111e:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
    1120:	4b61      	ldr	r3, [pc, #388]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    1122:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1124:	2300      	movs	r3, #0
    1126:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
    1128:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
    112a:	4b60      	ldr	r3, [pc, #384]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    112c:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
    112e:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
    1130:	6963      	ldr	r3, [r4, #20]
    1132:	0020      	movs	r0, r4
    1134:	4798      	blx	r3
    1136:	e7c4      	b.n	10c2 <_i2c_slave_interrupt_handler+0x7a>
			module->transfer_direction = I2C_TRANSFER_WRITE;
    1138:	2200      	movs	r2, #0
    113a:	2330      	movs	r3, #48	; 0x30
    113c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
    113e:	0733      	lsls	r3, r6, #28
    1140:	d40e      	bmi.n	1160 <_i2c_slave_interrupt_handler+0x118>
			if (module->buffer_length == 0) {
    1142:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    1144:	b29b      	uxth	r3, r3
    1146:	2b00      	cmp	r3, #0
    1148:	d10e      	bne.n	1168 <_i2c_slave_interrupt_handler+0x120>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    114a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    114c:	4b56      	ldr	r3, [pc, #344]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    114e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1150:	2300      	movs	r3, #0
    1152:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    1154:	2380      	movs	r3, #128	; 0x80
    1156:	02db      	lsls	r3, r3, #11
    1158:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    115a:	4b54      	ldr	r3, [pc, #336]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    115c:	4798      	blx	r3
    115e:	e7d6      	b.n	110e <_i2c_slave_interrupt_handler+0xc6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
    1160:	69a3      	ldr	r3, [r4, #24]
    1162:	0020      	movs	r0, r4
    1164:	4798      	blx	r3
    1166:	e7ec      	b.n	1142 <_i2c_slave_interrupt_handler+0xfa>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1168:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    116a:	4b4f      	ldr	r3, [pc, #316]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    116c:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    116e:	2300      	movs	r3, #0
    1170:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
    1172:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    1174:	4b4d      	ldr	r3, [pc, #308]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    1176:	4798      	blx	r3
    1178:	e7c9      	b.n	110e <_i2c_slave_interrupt_handler+0xc6>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
    117a:	7e2b      	ldrb	r3, [r5, #24]
    117c:	07db      	lsls	r3, r3, #31
    117e:	d52e      	bpl.n	11de <_i2c_slave_interrupt_handler+0x196>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
    1180:	2301      	movs	r3, #1
    1182:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
    1184:	3304      	adds	r3, #4
    1186:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    1188:	3320      	adds	r3, #32
    118a:	5ce3      	ldrb	r3, [r4, r3]
    118c:	075b      	lsls	r3, r3, #29
    118e:	d405      	bmi.n	119c <_i2c_slave_interrupt_handler+0x154>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
    1190:	2325      	movs	r3, #37	; 0x25
    1192:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
    1194:	2b08      	cmp	r3, #8
    1196:	d001      	beq.n	119c <_i2c_slave_interrupt_handler+0x154>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    1198:	2302      	movs	r3, #2
    119a:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
    119c:	2331      	movs	r3, #49	; 0x31
    119e:	5ce3      	ldrb	r3, [r4, r3]
    11a0:	2b1e      	cmp	r3, #30
    11a2:	d0c4      	beq.n	112e <_i2c_slave_interrupt_handler+0xe6>
    11a4:	2331      	movs	r3, #49	; 0x31
    11a6:	5ce3      	ldrb	r3, [r4, r3]
    11a8:	2b10      	cmp	r3, #16
    11aa:	d0c0      	beq.n	112e <_i2c_slave_interrupt_handler+0xe6>
			module->status = STATUS_OK;
    11ac:	2300      	movs	r3, #0
    11ae:	2231      	movs	r2, #49	; 0x31
    11b0:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
    11b2:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
    11b4:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
    11b6:	07b3      	lsls	r3, r6, #30
    11b8:	d503      	bpl.n	11c2 <_i2c_slave_interrupt_handler+0x17a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    11ba:	2330      	movs	r3, #48	; 0x30
    11bc:	5ce3      	ldrb	r3, [r4, r3]
    11be:	2b00      	cmp	r3, #0
    11c0:	d009      	beq.n	11d6 <_i2c_slave_interrupt_handler+0x18e>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
    11c2:	07f3      	lsls	r3, r6, #31
    11c4:	d5b3      	bpl.n	112e <_i2c_slave_interrupt_handler+0xe6>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    11c6:	2330      	movs	r3, #48	; 0x30
    11c8:	5ce3      	ldrb	r3, [r4, r3]
    11ca:	2b01      	cmp	r3, #1
    11cc:	d1af      	bne.n	112e <_i2c_slave_interrupt_handler+0xe6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
    11ce:	68e3      	ldr	r3, [r4, #12]
    11d0:	0020      	movs	r0, r4
    11d2:	4798      	blx	r3
    11d4:	e7ab      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
    11d6:	6923      	ldr	r3, [r4, #16]
    11d8:	0020      	movs	r0, r4
    11da:	4798      	blx	r3
    11dc:	e7a7      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
    11de:	7e2b      	ldrb	r3, [r5, #24]
    11e0:	075b      	lsls	r3, r3, #29
    11e2:	d5a4      	bpl.n	112e <_i2c_slave_interrupt_handler+0xe6>
		if (module->buffer_remaining <= 0 ||
    11e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    11e6:	2b00      	cmp	r3, #0
    11e8:	d01d      	beq.n	1226 <_i2c_slave_interrupt_handler+0x1de>
				(module->transfer_direction == I2C_TRANSFER_READ &&
    11ea:	2230      	movs	r2, #48	; 0x30
    11ec:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
    11ee:	2a01      	cmp	r2, #1
    11f0:	d012      	beq.n	1218 <_i2c_slave_interrupt_handler+0x1d0>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
    11f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    11f4:	b29b      	uxth	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d099      	beq.n	112e <_i2c_slave_interrupt_handler+0xe6>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    11fa:	2330      	movs	r3, #48	; 0x30
    11fc:	5ce3      	ldrb	r3, [r4, r3]
    11fe:	2b00      	cmp	r3, #0
    1200:	d044      	beq.n	128c <_i2c_slave_interrupt_handler+0x244>
	i2c_hw->DATA.reg = *(module->buffer++);
    1202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1204:	1c5a      	adds	r2, r3, #1
    1206:	62e2      	str	r2, [r4, #44]	; 0x2c
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	b2db      	uxtb	r3, r3
    120c:	2228      	movs	r2, #40	; 0x28
    120e:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
    1210:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1212:	3b01      	subs	r3, #1
    1214:	8523      	strh	r3, [r4, #40]	; 0x28
}
    1216:	e78a      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
				(module->buffer_length > module->buffer_remaining) &&
    1218:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    121a:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
    121c:	4293      	cmp	r3, r2
    121e:	d2e8      	bcs.n	11f2 <_i2c_slave_interrupt_handler+0x1aa>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
    1220:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
    1222:	075b      	lsls	r3, r3, #29
    1224:	d5e5      	bpl.n	11f2 <_i2c_slave_interrupt_handler+0x1aa>
			module->buffer_remaining = 0;
    1226:	2300      	movs	r3, #0
    1228:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
    122a:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    122c:	3330      	adds	r3, #48	; 0x30
    122e:	5ce3      	ldrb	r3, [r4, r3]
    1230:	2b00      	cmp	r3, #0
    1232:	d117      	bne.n	1264 <_i2c_slave_interrupt_handler+0x21c>
	cpu_irq_enter_critical();
    1234:	4b1c      	ldr	r3, [pc, #112]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    1236:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1238:	2300      	movs	r3, #0
    123a:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    123c:	2380      	movs	r3, #128	; 0x80
    123e:	02db      	lsls	r3, r3, #11
    1240:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    1242:	4b1a      	ldr	r3, [pc, #104]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    1244:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    1246:	686a      	ldr	r2, [r5, #4]
    1248:	2380      	movs	r3, #128	; 0x80
    124a:	029b      	lsls	r3, r3, #10
    124c:	4313      	orrs	r3, r2
    124e:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
    1250:	221e      	movs	r2, #30
    1252:	2331      	movs	r3, #49	; 0x31
    1254:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
    1256:	06f3      	lsls	r3, r6, #27
    1258:	d400      	bmi.n	125c <_i2c_slave_interrupt_handler+0x214>
    125a:	e768      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
    125c:	69e3      	ldr	r3, [r4, #28]
    125e:	0020      	movs	r0, r4
    1260:	4798      	blx	r3
    1262:	e764      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
	cpu_irq_enter_critical();
    1264:	4b10      	ldr	r3, [pc, #64]	; (12a8 <_i2c_slave_interrupt_handler+0x260>)
    1266:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
    1268:	2300      	movs	r3, #0
    126a:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
    126c:	2380      	movs	r3, #128	; 0x80
    126e:	02db      	lsls	r3, r3, #11
    1270:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
    1272:	4b0e      	ldr	r3, [pc, #56]	; (12ac <_i2c_slave_interrupt_handler+0x264>)
    1274:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
    1276:	686a      	ldr	r2, [r5, #4]
    1278:	2380      	movs	r3, #128	; 0x80
    127a:	029b      	lsls	r3, r3, #10
    127c:	4313      	orrs	r3, r2
    127e:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
    1280:	2331      	movs	r3, #49	; 0x31
    1282:	2200      	movs	r2, #0
    1284:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1286:	3b2d      	subs	r3, #45	; 0x2d
    1288:	752b      	strb	r3, [r5, #20]
    128a:	e750      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
	*(module->buffer++) = i2c_hw->DATA.reg;
    128c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    128e:	1c53      	adds	r3, r2, #1
    1290:	62e3      	str	r3, [r4, #44]	; 0x2c
    1292:	2328      	movs	r3, #40	; 0x28
    1294:	5ceb      	ldrb	r3, [r5, r3]
    1296:	b2db      	uxtb	r3, r3
    1298:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
    129a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    129c:	3b01      	subs	r3, #1
    129e:	8523      	strh	r3, [r4, #40]	; 0x28
    12a0:	e745      	b.n	112e <_i2c_slave_interrupt_handler+0xe6>
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	20000210 	.word	0x20000210
    12a8:	00002135 	.word	0x00002135
    12ac:	00002175 	.word	0x00002175

000012b0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    12b0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    12b2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12b4:	2340      	movs	r3, #64	; 0x40
    12b6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    12b8:	4281      	cmp	r1, r0
    12ba:	d202      	bcs.n	12c2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    12bc:	0018      	movs	r0, r3
    12be:	bd10      	pop	{r4, pc}
		baud_calculated++;
    12c0:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    12c2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    12c4:	1c63      	adds	r3, r4, #1
    12c6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    12c8:	4288      	cmp	r0, r1
    12ca:	d9f9      	bls.n	12c0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12cc:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    12ce:	2cff      	cmp	r4, #255	; 0xff
    12d0:	d8f4      	bhi.n	12bc <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    12d2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    12d4:	2300      	movs	r3, #0
    12d6:	e7f1      	b.n	12bc <_sercom_get_sync_baud_val+0xc>

000012d8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    12d8:	b510      	push	{r4, lr}
    12da:	b082      	sub	sp, #8
    12dc:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    12de:	4b0e      	ldr	r3, [pc, #56]	; (1318 <sercom_set_gclk_generator+0x40>)
    12e0:	781b      	ldrb	r3, [r3, #0]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d007      	beq.n	12f6 <sercom_set_gclk_generator+0x1e>
    12e6:	2900      	cmp	r1, #0
    12e8:	d105      	bne.n	12f6 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    12ea:	4b0b      	ldr	r3, [pc, #44]	; (1318 <sercom_set_gclk_generator+0x40>)
    12ec:	785b      	ldrb	r3, [r3, #1]
    12ee:	4283      	cmp	r3, r0
    12f0:	d010      	beq.n	1314 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    12f2:	201d      	movs	r0, #29
    12f4:	e00c      	b.n	1310 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    12f6:	a901      	add	r1, sp, #4
    12f8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    12fa:	200d      	movs	r0, #13
    12fc:	4b07      	ldr	r3, [pc, #28]	; (131c <sercom_set_gclk_generator+0x44>)
    12fe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1300:	200d      	movs	r0, #13
    1302:	4b07      	ldr	r3, [pc, #28]	; (1320 <sercom_set_gclk_generator+0x48>)
    1304:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1306:	4b04      	ldr	r3, [pc, #16]	; (1318 <sercom_set_gclk_generator+0x40>)
    1308:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    130a:	2201      	movs	r2, #1
    130c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    130e:	2000      	movs	r0, #0
}
    1310:	b002      	add	sp, #8
    1312:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1314:	2000      	movs	r0, #0
    1316:	e7fb      	b.n	1310 <sercom_set_gclk_generator+0x38>
    1318:	20000128 	.word	0x20000128
    131c:	000027cd 	.word	0x000027cd
    1320:	00002741 	.word	0x00002741

00001324 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1324:	4b20      	ldr	r3, [pc, #128]	; (13a8 <_sercom_get_default_pad+0x84>)
    1326:	4298      	cmp	r0, r3
    1328:	d017      	beq.n	135a <_sercom_get_default_pad+0x36>
    132a:	4b20      	ldr	r3, [pc, #128]	; (13ac <_sercom_get_default_pad+0x88>)
    132c:	4298      	cmp	r0, r3
    132e:	d024      	beq.n	137a <_sercom_get_default_pad+0x56>
    1330:	4b1f      	ldr	r3, [pc, #124]	; (13b0 <_sercom_get_default_pad+0x8c>)
    1332:	4298      	cmp	r0, r3
    1334:	d001      	beq.n	133a <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1336:	2000      	movs	r0, #0
}
    1338:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    133a:	2901      	cmp	r1, #1
    133c:	d007      	beq.n	134e <_sercom_get_default_pad+0x2a>
    133e:	2900      	cmp	r1, #0
    1340:	d02b      	beq.n	139a <_sercom_get_default_pad+0x76>
    1342:	2902      	cmp	r1, #2
    1344:	d005      	beq.n	1352 <_sercom_get_default_pad+0x2e>
    1346:	2903      	cmp	r1, #3
    1348:	d005      	beq.n	1356 <_sercom_get_default_pad+0x32>
	return 0;
    134a:	2000      	movs	r0, #0
    134c:	e7f4      	b.n	1338 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    134e:	4819      	ldr	r0, [pc, #100]	; (13b4 <_sercom_get_default_pad+0x90>)
    1350:	e7f2      	b.n	1338 <_sercom_get_default_pad+0x14>
    1352:	4819      	ldr	r0, [pc, #100]	; (13b8 <_sercom_get_default_pad+0x94>)
    1354:	e7f0      	b.n	1338 <_sercom_get_default_pad+0x14>
    1356:	4819      	ldr	r0, [pc, #100]	; (13bc <_sercom_get_default_pad+0x98>)
    1358:	e7ee      	b.n	1338 <_sercom_get_default_pad+0x14>
    135a:	2901      	cmp	r1, #1
    135c:	d007      	beq.n	136e <_sercom_get_default_pad+0x4a>
    135e:	2900      	cmp	r1, #0
    1360:	d01d      	beq.n	139e <_sercom_get_default_pad+0x7a>
    1362:	2902      	cmp	r1, #2
    1364:	d005      	beq.n	1372 <_sercom_get_default_pad+0x4e>
    1366:	2903      	cmp	r1, #3
    1368:	d005      	beq.n	1376 <_sercom_get_default_pad+0x52>
	return 0;
    136a:	2000      	movs	r0, #0
    136c:	e7e4      	b.n	1338 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    136e:	4814      	ldr	r0, [pc, #80]	; (13c0 <_sercom_get_default_pad+0x9c>)
    1370:	e7e2      	b.n	1338 <_sercom_get_default_pad+0x14>
    1372:	4814      	ldr	r0, [pc, #80]	; (13c4 <_sercom_get_default_pad+0xa0>)
    1374:	e7e0      	b.n	1338 <_sercom_get_default_pad+0x14>
    1376:	4814      	ldr	r0, [pc, #80]	; (13c8 <_sercom_get_default_pad+0xa4>)
    1378:	e7de      	b.n	1338 <_sercom_get_default_pad+0x14>
    137a:	2901      	cmp	r1, #1
    137c:	d007      	beq.n	138e <_sercom_get_default_pad+0x6a>
    137e:	2900      	cmp	r1, #0
    1380:	d00f      	beq.n	13a2 <_sercom_get_default_pad+0x7e>
    1382:	2902      	cmp	r1, #2
    1384:	d005      	beq.n	1392 <_sercom_get_default_pad+0x6e>
    1386:	2903      	cmp	r1, #3
    1388:	d005      	beq.n	1396 <_sercom_get_default_pad+0x72>
	return 0;
    138a:	2000      	movs	r0, #0
    138c:	e7d4      	b.n	1338 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    138e:	480f      	ldr	r0, [pc, #60]	; (13cc <_sercom_get_default_pad+0xa8>)
    1390:	e7d2      	b.n	1338 <_sercom_get_default_pad+0x14>
    1392:	480f      	ldr	r0, [pc, #60]	; (13d0 <_sercom_get_default_pad+0xac>)
    1394:	e7d0      	b.n	1338 <_sercom_get_default_pad+0x14>
    1396:	480f      	ldr	r0, [pc, #60]	; (13d4 <_sercom_get_default_pad+0xb0>)
    1398:	e7ce      	b.n	1338 <_sercom_get_default_pad+0x14>
    139a:	480f      	ldr	r0, [pc, #60]	; (13d8 <_sercom_get_default_pad+0xb4>)
    139c:	e7cc      	b.n	1338 <_sercom_get_default_pad+0x14>
    139e:	480f      	ldr	r0, [pc, #60]	; (13dc <_sercom_get_default_pad+0xb8>)
    13a0:	e7ca      	b.n	1338 <_sercom_get_default_pad+0x14>
    13a2:	480f      	ldr	r0, [pc, #60]	; (13e0 <_sercom_get_default_pad+0xbc>)
    13a4:	e7c8      	b.n	1338 <_sercom_get_default_pad+0x14>
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	42000c00 	.word	0x42000c00
    13ac:	42001000 	.word	0x42001000
    13b0:	42000800 	.word	0x42000800
    13b4:	00050003 	.word	0x00050003
    13b8:	00060003 	.word	0x00060003
    13bc:	00070003 	.word	0x00070003
    13c0:	00170002 	.word	0x00170002
    13c4:	001e0003 	.word	0x001e0003
    13c8:	001f0003 	.word	0x001f0003
    13cc:	00170003 	.word	0x00170003
    13d0:	00100003 	.word	0x00100003
    13d4:	00190003 	.word	0x00190003
    13d8:	00040003 	.word	0x00040003
    13dc:	00160002 	.word	0x00160002
    13e0:	00160003 	.word	0x00160003

000013e4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    13e4:	b530      	push	{r4, r5, lr}
    13e6:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    13e8:	aa01      	add	r2, sp, #4
    13ea:	4b0b      	ldr	r3, [pc, #44]	; (1418 <_sercom_get_sercom_inst_index+0x34>)
    13ec:	cb32      	ldmia	r3!, {r1, r4, r5}
    13ee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13f0:	0003      	movs	r3, r0
    13f2:	9a01      	ldr	r2, [sp, #4]
    13f4:	4282      	cmp	r2, r0
    13f6:	d00c      	beq.n	1412 <_sercom_get_sercom_inst_index+0x2e>
    13f8:	9a02      	ldr	r2, [sp, #8]
    13fa:	4282      	cmp	r2, r0
    13fc:	d007      	beq.n	140e <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    13fe:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1400:	9a03      	ldr	r2, [sp, #12]
    1402:	429a      	cmp	r2, r3
    1404:	d001      	beq.n	140a <_sercom_get_sercom_inst_index+0x26>
}
    1406:	b005      	add	sp, #20
    1408:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    140a:	3002      	adds	r0, #2
    140c:	e002      	b.n	1414 <_sercom_get_sercom_inst_index+0x30>
    140e:	2001      	movs	r0, #1
    1410:	e000      	b.n	1414 <_sercom_get_sercom_inst_index+0x30>
    1412:	2000      	movs	r0, #0
			return i;
    1414:	b2c0      	uxtb	r0, r0
    1416:	e7f6      	b.n	1406 <_sercom_get_sercom_inst_index+0x22>
    1418:	00002e3c 	.word	0x00002e3c

0000141c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    141c:	4770      	bx	lr
	...

00001420 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1420:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1422:	4b0a      	ldr	r3, [pc, #40]	; (144c <_sercom_set_handler+0x2c>)
    1424:	781b      	ldrb	r3, [r3, #0]
    1426:	2b00      	cmp	r3, #0
    1428:	d10c      	bne.n	1444 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    142a:	4c09      	ldr	r4, [pc, #36]	; (1450 <_sercom_set_handler+0x30>)
    142c:	4d09      	ldr	r5, [pc, #36]	; (1454 <_sercom_set_handler+0x34>)
    142e:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1430:	4b09      	ldr	r3, [pc, #36]	; (1458 <_sercom_set_handler+0x38>)
    1432:	2200      	movs	r2, #0
    1434:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1436:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1438:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    143a:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    143c:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    143e:	3201      	adds	r2, #1
    1440:	4b02      	ldr	r3, [pc, #8]	; (144c <_sercom_set_handler+0x2c>)
    1442:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1444:	0080      	lsls	r0, r0, #2
    1446:	4b02      	ldr	r3, [pc, #8]	; (1450 <_sercom_set_handler+0x30>)
    1448:	50c1      	str	r1, [r0, r3]
}
    144a:	bd30      	pop	{r4, r5, pc}
    144c:	2000012a 	.word	0x2000012a
    1450:	2000012c 	.word	0x2000012c
    1454:	0000141d 	.word	0x0000141d
    1458:	20000210 	.word	0x20000210

0000145c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    145c:	b510      	push	{r4, lr}
    145e:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1460:	ac01      	add	r4, sp, #4
    1462:	2309      	movs	r3, #9
    1464:	7023      	strb	r3, [r4, #0]
    1466:	3301      	adds	r3, #1
    1468:	7063      	strb	r3, [r4, #1]
    146a:	3301      	adds	r3, #1
    146c:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    146e:	4b02      	ldr	r3, [pc, #8]	; (1478 <_sercom_get_interrupt_vector+0x1c>)
    1470:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1472:	5620      	ldrsb	r0, [r4, r0]
}
    1474:	b002      	add	sp, #8
    1476:	bd10      	pop	{r4, pc}
    1478:	000013e5 	.word	0x000013e5

0000147c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    147c:	b510      	push	{r4, lr}
    147e:	4b02      	ldr	r3, [pc, #8]	; (1488 <SERCOM0_Handler+0xc>)
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	2000      	movs	r0, #0
    1484:	4798      	blx	r3
    1486:	bd10      	pop	{r4, pc}
    1488:	2000012c 	.word	0x2000012c

0000148c <SERCOM1_Handler>:
    148c:	b510      	push	{r4, lr}
    148e:	4b02      	ldr	r3, [pc, #8]	; (1498 <SERCOM1_Handler+0xc>)
    1490:	685b      	ldr	r3, [r3, #4]
    1492:	2001      	movs	r0, #1
    1494:	4798      	blx	r3
    1496:	bd10      	pop	{r4, pc}
    1498:	2000012c 	.word	0x2000012c

0000149c <SERCOM2_Handler>:
    149c:	b510      	push	{r4, lr}
    149e:	4b02      	ldr	r3, [pc, #8]	; (14a8 <SERCOM2_Handler+0xc>)
    14a0:	689b      	ldr	r3, [r3, #8]
    14a2:	2002      	movs	r0, #2
    14a4:	4798      	blx	r3
    14a6:	bd10      	pop	{r4, pc}
    14a8:	2000012c 	.word	0x2000012c

000014ac <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    14ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ae:	b08b      	sub	sp, #44	; 0x2c
    14b0:	0005      	movs	r5, r0
    14b2:	000c      	movs	r4, r1
    14b4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    14b6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    14b8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    14ba:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    14bc:	079b      	lsls	r3, r3, #30
    14be:	d501      	bpl.n	14c4 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    14c0:	b00b      	add	sp, #44	; 0x2c
    14c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    14c4:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    14c6:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    14c8:	07db      	lsls	r3, r3, #31
    14ca:	d4f9      	bmi.n	14c0 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14cc:	0008      	movs	r0, r1
    14ce:	4b6f      	ldr	r3, [pc, #444]	; (168c <spi_init+0x1e0>)
    14d0:	4798      	blx	r3
    14d2:	4a6f      	ldr	r2, [pc, #444]	; (1690 <spi_init+0x1e4>)
    14d4:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14d6:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14d8:	2301      	movs	r3, #1
    14da:	40bb      	lsls	r3, r7
    14dc:	430b      	orrs	r3, r1
    14de:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    14e0:	a909      	add	r1, sp, #36	; 0x24
    14e2:	2724      	movs	r7, #36	; 0x24
    14e4:	5df3      	ldrb	r3, [r6, r7]
    14e6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14e8:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14ea:	b2c3      	uxtb	r3, r0
    14ec:	9301      	str	r3, [sp, #4]
    14ee:	0018      	movs	r0, r3
    14f0:	4b68      	ldr	r3, [pc, #416]	; (1694 <spi_init+0x1e8>)
    14f2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14f4:	9801      	ldr	r0, [sp, #4]
    14f6:	4b68      	ldr	r3, [pc, #416]	; (1698 <spi_init+0x1ec>)
    14f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14fa:	5df0      	ldrb	r0, [r6, r7]
    14fc:	2100      	movs	r1, #0
    14fe:	4b67      	ldr	r3, [pc, #412]	; (169c <spi_init+0x1f0>)
    1500:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1502:	7833      	ldrb	r3, [r6, #0]
    1504:	2b01      	cmp	r3, #1
    1506:	d03f      	beq.n	1588 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    1508:	7833      	ldrb	r3, [r6, #0]
    150a:	2b00      	cmp	r3, #0
    150c:	d103      	bne.n	1516 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    150e:	6823      	ldr	r3, [r4, #0]
    1510:	2208      	movs	r2, #8
    1512:	4313      	orrs	r3, r2
    1514:	6023      	str	r3, [r4, #0]
    1516:	002b      	movs	r3, r5
    1518:	330c      	adds	r3, #12
    151a:	0029      	movs	r1, r5
    151c:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    151e:	2200      	movs	r2, #0
    1520:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1522:	428b      	cmp	r3, r1
    1524:	d1fc      	bne.n	1520 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    1526:	2300      	movs	r3, #0
    1528:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    152a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    152c:	2400      	movs	r4, #0
    152e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1530:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1532:	3336      	adds	r3, #54	; 0x36
    1534:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1536:	3301      	adds	r3, #1
    1538:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    153a:	3301      	adds	r3, #1
    153c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    153e:	3b35      	subs	r3, #53	; 0x35
    1540:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1542:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1544:	6828      	ldr	r0, [r5, #0]
    1546:	4b51      	ldr	r3, [pc, #324]	; (168c <spi_init+0x1e0>)
    1548:	4798      	blx	r3
    154a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    154c:	4954      	ldr	r1, [pc, #336]	; (16a0 <spi_init+0x1f4>)
    154e:	4b55      	ldr	r3, [pc, #340]	; (16a4 <spi_init+0x1f8>)
    1550:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1552:	00bf      	lsls	r7, r7, #2
    1554:	4b54      	ldr	r3, [pc, #336]	; (16a8 <spi_init+0x1fc>)
    1556:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1558:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    155a:	ab04      	add	r3, sp, #16
    155c:	2280      	movs	r2, #128	; 0x80
    155e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1560:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1562:	3a7f      	subs	r2, #127	; 0x7f
    1564:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1566:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1568:	7833      	ldrb	r3, [r6, #0]
    156a:	2b00      	cmp	r3, #0
    156c:	d102      	bne.n	1574 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    156e:	2200      	movs	r2, #0
    1570:	ab04      	add	r3, sp, #16
    1572:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1574:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1576:	9305      	str	r3, [sp, #20]
    1578:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    157a:	9306      	str	r3, [sp, #24]
    157c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    157e:	9307      	str	r3, [sp, #28]
    1580:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1582:	9308      	str	r3, [sp, #32]
    1584:	2400      	movs	r4, #0
    1586:	e00b      	b.n	15a0 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1588:	6823      	ldr	r3, [r4, #0]
    158a:	220c      	movs	r2, #12
    158c:	4313      	orrs	r3, r2
    158e:	6023      	str	r3, [r4, #0]
    1590:	e7ba      	b.n	1508 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1592:	0038      	movs	r0, r7
    1594:	4b45      	ldr	r3, [pc, #276]	; (16ac <spi_init+0x200>)
    1596:	4798      	blx	r3
    1598:	e00a      	b.n	15b0 <spi_init+0x104>
    159a:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    159c:	2c04      	cmp	r4, #4
    159e:	d010      	beq.n	15c2 <spi_init+0x116>
    15a0:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15a2:	00a3      	lsls	r3, r4, #2
    15a4:	aa02      	add	r2, sp, #8
    15a6:	200c      	movs	r0, #12
    15a8:	1812      	adds	r2, r2, r0
    15aa:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    15ac:	2800      	cmp	r0, #0
    15ae:	d0f0      	beq.n	1592 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    15b0:	1c43      	adds	r3, r0, #1
    15b2:	d0f2      	beq.n	159a <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15b4:	a904      	add	r1, sp, #16
    15b6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15b8:	0c00      	lsrs	r0, r0, #16
    15ba:	b2c0      	uxtb	r0, r0
    15bc:	4b3c      	ldr	r3, [pc, #240]	; (16b0 <spi_init+0x204>)
    15be:	4798      	blx	r3
    15c0:	e7eb      	b.n	159a <spi_init+0xee>
	module->mode             = config->mode;
    15c2:	7833      	ldrb	r3, [r6, #0]
    15c4:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    15c6:	7c33      	ldrb	r3, [r6, #16]
    15c8:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    15ca:	7cb3      	ldrb	r3, [r6, #18]
    15cc:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    15ce:	7d33      	ldrb	r3, [r6, #20]
    15d0:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    15d2:	2200      	movs	r2, #0
    15d4:	ab02      	add	r3, sp, #8
    15d6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    15d8:	7833      	ldrb	r3, [r6, #0]
    15da:	2b01      	cmp	r3, #1
    15dc:	d012      	beq.n	1604 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    15de:	7833      	ldrb	r3, [r6, #0]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d126      	bne.n	1632 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    15e4:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    15e6:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    15e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    15ea:	7ff1      	ldrb	r1, [r6, #31]
    15ec:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    15ee:	7fb4      	ldrb	r4, [r6, #30]
    15f0:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    15f2:	4319      	orrs	r1, r3
    15f4:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    15f6:	2320      	movs	r3, #32
    15f8:	5cf3      	ldrb	r3, [r6, r3]
    15fa:	2b00      	cmp	r3, #0
    15fc:	d01b      	beq.n	1636 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    15fe:	2340      	movs	r3, #64	; 0x40
    1600:	431a      	orrs	r2, r3
    1602:	e018      	b.n	1636 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1604:	6828      	ldr	r0, [r5, #0]
    1606:	4b21      	ldr	r3, [pc, #132]	; (168c <spi_init+0x1e0>)
    1608:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    160a:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    160c:	b2c0      	uxtb	r0, r0
    160e:	4b29      	ldr	r3, [pc, #164]	; (16b4 <spi_init+0x208>)
    1610:	4798      	blx	r3
    1612:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    1614:	ab02      	add	r3, sp, #8
    1616:	1d9a      	adds	r2, r3, #6
    1618:	69b0      	ldr	r0, [r6, #24]
    161a:	4b27      	ldr	r3, [pc, #156]	; (16b8 <spi_init+0x20c>)
    161c:	4798      	blx	r3
    161e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    1620:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    1622:	2b00      	cmp	r3, #0
    1624:	d000      	beq.n	1628 <spi_init+0x17c>
    1626:	e74b      	b.n	14c0 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    1628:	ab02      	add	r3, sp, #8
    162a:	3306      	adds	r3, #6
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	733b      	strb	r3, [r7, #12]
    1630:	e7d5      	b.n	15de <spi_init+0x132>
	uint32_t ctrlb = 0;
    1632:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    1634:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    1636:	6873      	ldr	r3, [r6, #4]
    1638:	68b1      	ldr	r1, [r6, #8]
    163a:	430b      	orrs	r3, r1
    163c:	68f1      	ldr	r1, [r6, #12]
    163e:	430b      	orrs	r3, r1
    1640:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    1642:	7c31      	ldrb	r1, [r6, #16]
    1644:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    1646:	7c71      	ldrb	r1, [r6, #17]
    1648:	2900      	cmp	r1, #0
    164a:	d103      	bne.n	1654 <spi_init+0x1a8>
    164c:	491b      	ldr	r1, [pc, #108]	; (16bc <spi_init+0x210>)
    164e:	7889      	ldrb	r1, [r1, #2]
    1650:	0789      	lsls	r1, r1, #30
    1652:	d501      	bpl.n	1658 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1654:	2180      	movs	r1, #128	; 0x80
    1656:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1658:	7cb1      	ldrb	r1, [r6, #18]
    165a:	2900      	cmp	r1, #0
    165c:	d002      	beq.n	1664 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    165e:	2180      	movs	r1, #128	; 0x80
    1660:	0289      	lsls	r1, r1, #10
    1662:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    1664:	7cf1      	ldrb	r1, [r6, #19]
    1666:	2900      	cmp	r1, #0
    1668:	d002      	beq.n	1670 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    166a:	2180      	movs	r1, #128	; 0x80
    166c:	0089      	lsls	r1, r1, #2
    166e:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1670:	7d31      	ldrb	r1, [r6, #20]
    1672:	2900      	cmp	r1, #0
    1674:	d002      	beq.n	167c <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1676:	2180      	movs	r1, #128	; 0x80
    1678:	0189      	lsls	r1, r1, #6
    167a:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    167c:	6839      	ldr	r1, [r7, #0]
    167e:	430b      	orrs	r3, r1
    1680:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1682:	687b      	ldr	r3, [r7, #4]
    1684:	431a      	orrs	r2, r3
    1686:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1688:	2000      	movs	r0, #0
    168a:	e719      	b.n	14c0 <spi_init+0x14>
    168c:	000013e5 	.word	0x000013e5
    1690:	40000400 	.word	0x40000400
    1694:	000027cd 	.word	0x000027cd
    1698:	00002741 	.word	0x00002741
    169c:	000012d9 	.word	0x000012d9
    16a0:	000016c1 	.word	0x000016c1
    16a4:	00001421 	.word	0x00001421
    16a8:	20000210 	.word	0x20000210
    16ac:	00001325 	.word	0x00001325
    16b0:	000028c5 	.word	0x000028c5
    16b4:	000027e9 	.word	0x000027e9
    16b8:	000012b1 	.word	0x000012b1
    16bc:	41002000 	.word	0x41002000

000016c0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    16c2:	0080      	lsls	r0, r0, #2
    16c4:	4b86      	ldr	r3, [pc, #536]	; (18e0 <_spi_interrupt_handler+0x220>)
    16c6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    16c8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    16ca:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    16cc:	5ce3      	ldrb	r3, [r4, r3]
    16ce:	2236      	movs	r2, #54	; 0x36
    16d0:	5ca7      	ldrb	r7, [r4, r2]
    16d2:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    16d4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    16d6:	7db5      	ldrb	r5, [r6, #22]
    16d8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    16da:	07eb      	lsls	r3, r5, #31
    16dc:	d52e      	bpl.n	173c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    16de:	7963      	ldrb	r3, [r4, #5]
    16e0:	2b01      	cmp	r3, #1
    16e2:	d025      	beq.n	1730 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    16e4:	2b00      	cmp	r3, #0
    16e6:	d129      	bne.n	173c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    16e8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    16ea:	2b00      	cmp	r3, #0
    16ec:	d026      	beq.n	173c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    16ee:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    16f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    16f2:	7813      	ldrb	r3, [r2, #0]
    16f4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    16f6:	1c50      	adds	r0, r2, #1
    16f8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16fa:	79a0      	ldrb	r0, [r4, #6]
    16fc:	2801      	cmp	r0, #1
    16fe:	d100      	bne.n	1702 <_spi_interrupt_handler+0x42>
    1700:	e06b      	b.n	17da <_spi_interrupt_handler+0x11a>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1702:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1704:	05db      	lsls	r3, r3, #23
    1706:	0ddb      	lsrs	r3, r3, #23
    1708:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    170a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    170c:	3b01      	subs	r3, #1
    170e:	b29b      	uxth	r3, r3
    1710:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    1712:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1714:	b29b      	uxth	r3, r3
    1716:	2b00      	cmp	r3, #0
    1718:	d110      	bne.n	173c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    171a:	3301      	adds	r3, #1
    171c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    171e:	7a63      	ldrb	r3, [r4, #9]
    1720:	2b01      	cmp	r3, #1
    1722:	d10b      	bne.n	173c <_spi_interrupt_handler+0x7c>
    1724:	79e3      	ldrb	r3, [r4, #7]
    1726:	2b00      	cmp	r3, #0
    1728:	d108      	bne.n	173c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    172a:	3302      	adds	r3, #2
    172c:	75b3      	strb	r3, [r6, #22]
    172e:	e005      	b.n	173c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    1730:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1732:	2b00      	cmp	r3, #0
    1734:	d040      	beq.n	17b8 <_spi_interrupt_handler+0xf8>
			(module->dir != SPI_DIRECTION_READ))
    1736:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1738:	2b00      	cmp	r3, #0
    173a:	d1d8      	bne.n	16ee <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    173c:	076b      	lsls	r3, r5, #29
    173e:	d513      	bpl.n	1768 <_spi_interrupt_handler+0xa8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1740:	8b73      	ldrh	r3, [r6, #26]
    1742:	075b      	lsls	r3, r3, #29
    1744:	d553      	bpl.n	17ee <_spi_interrupt_handler+0x12e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1746:	7a63      	ldrb	r3, [r4, #9]
    1748:	2b01      	cmp	r3, #1
    174a:	d008      	beq.n	175e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    174c:	221e      	movs	r2, #30
    174e:	2338      	movs	r3, #56	; 0x38
    1750:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1752:	3b35      	subs	r3, #53	; 0x35
    1754:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1756:	3302      	adds	r3, #2
    1758:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    175a:	073b      	lsls	r3, r7, #28
    175c:	d443      	bmi.n	17e6 <_spi_interrupt_handler+0x126>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    175e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1760:	8b73      	ldrh	r3, [r6, #26]
    1762:	2204      	movs	r2, #4
    1764:	4313      	orrs	r3, r2
    1766:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1768:	07ab      	lsls	r3, r5, #30
    176a:	d515      	bpl.n	1798 <_spi_interrupt_handler+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    176c:	7963      	ldrb	r3, [r4, #5]
    176e:	2b00      	cmp	r3, #0
    1770:	d10e      	bne.n	1790 <_spi_interrupt_handler+0xd0>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1772:	3307      	adds	r3, #7
    1774:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1776:	3b05      	subs	r3, #5
    1778:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    177a:	3301      	adds	r3, #1
    177c:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    177e:	2300      	movs	r3, #0
    1780:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1782:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1784:	3338      	adds	r3, #56	; 0x38
    1786:	2200      	movs	r2, #0
    1788:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    178a:	06fb      	lsls	r3, r7, #27
    178c:	d500      	bpl.n	1790 <_spi_interrupt_handler+0xd0>
    178e:	e07f      	b.n	1890 <_spi_interrupt_handler+0x1d0>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1790:	7963      	ldrb	r3, [r4, #5]
    1792:	2b01      	cmp	r3, #1
    1794:	d100      	bne.n	1798 <_spi_interrupt_handler+0xd8>
    1796:	e07f      	b.n	1898 <_spi_interrupt_handler+0x1d8>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1798:	072b      	lsls	r3, r5, #28
    179a:	d508      	bpl.n	17ae <_spi_interrupt_handler+0xee>
			if (module->mode == SPI_MODE_SLAVE) {
    179c:	7963      	ldrb	r3, [r4, #5]
    179e:	2b00      	cmp	r3, #0
    17a0:	d105      	bne.n	17ae <_spi_interrupt_handler+0xee>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    17a2:	3308      	adds	r3, #8
    17a4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    17a6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    17a8:	06bb      	lsls	r3, r7, #26
    17aa:	d500      	bpl.n	17ae <_spi_interrupt_handler+0xee>
    17ac:	e08a      	b.n	18c4 <_spi_interrupt_handler+0x204>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    17ae:	b26d      	sxtb	r5, r5
    17b0:	2d00      	cmp	r5, #0
    17b2:	da00      	bge.n	17b6 <_spi_interrupt_handler+0xf6>
    17b4:	e08a      	b.n	18cc <_spi_interrupt_handler+0x20c>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    17b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    17b8:	4b4a      	ldr	r3, [pc, #296]	; (18e4 <_spi_interrupt_handler+0x224>)
    17ba:	881b      	ldrh	r3, [r3, #0]
    17bc:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    17be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    17c0:	3b01      	subs	r3, #1
    17c2:	b29b      	uxth	r3, r3
    17c4:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    17c6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    17c8:	b29b      	uxth	r3, r3
    17ca:	2b00      	cmp	r3, #0
    17cc:	d101      	bne.n	17d2 <_spi_interrupt_handler+0x112>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    17ce:	3301      	adds	r3, #1
    17d0:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    17d2:	7963      	ldrb	r3, [r4, #5]
		if (0
    17d4:	2b01      	cmp	r3, #1
    17d6:	d0ae      	beq.n	1736 <_spi_interrupt_handler+0x76>
    17d8:	e784      	b.n	16e4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    17da:	7850      	ldrb	r0, [r2, #1]
    17dc:	0200      	lsls	r0, r0, #8
    17de:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    17e0:	3202      	adds	r2, #2
    17e2:	62e2      	str	r2, [r4, #44]	; 0x2c
    17e4:	e78e      	b.n	1704 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    17e6:	0020      	movs	r0, r4
    17e8:	69a3      	ldr	r3, [r4, #24]
    17ea:	4798      	blx	r3
    17ec:	e7b7      	b.n	175e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    17ee:	7a63      	ldrb	r3, [r4, #9]
    17f0:	2b01      	cmp	r3, #1
    17f2:	d027      	beq.n	1844 <_spi_interrupt_handler+0x184>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    17f4:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    17f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17f8:	05db      	lsls	r3, r3, #23
    17fa:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    17fc:	b2da      	uxtb	r2, r3
    17fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1800:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1802:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1804:	1c51      	adds	r1, r2, #1
    1806:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1808:	79a1      	ldrb	r1, [r4, #6]
    180a:	2901      	cmp	r1, #1
    180c:	d033      	beq.n	1876 <_spi_interrupt_handler+0x1b6>
	module->remaining_rx_buffer_length--;
    180e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1810:	3b01      	subs	r3, #1
    1812:	b29b      	uxth	r3, r3
    1814:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1816:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1818:	b29b      	uxth	r3, r3
    181a:	2b00      	cmp	r3, #0
    181c:	d1a4      	bne.n	1768 <_spi_interrupt_handler+0xa8>
					module->status = STATUS_OK;
    181e:	2200      	movs	r2, #0
    1820:	3338      	adds	r3, #56	; 0x38
    1822:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1824:	3b34      	subs	r3, #52	; 0x34
    1826:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1828:	7a63      	ldrb	r3, [r4, #9]
    182a:	2b02      	cmp	r3, #2
    182c:	d029      	beq.n	1882 <_spi_interrupt_handler+0x1c2>
					} else if (module->dir == SPI_DIRECTION_READ) {
    182e:	7a63      	ldrb	r3, [r4, #9]
    1830:	2b00      	cmp	r3, #0
    1832:	d000      	beq.n	1836 <_spi_interrupt_handler+0x176>
    1834:	e798      	b.n	1768 <_spi_interrupt_handler+0xa8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1836:	07bb      	lsls	r3, r7, #30
    1838:	d400      	bmi.n	183c <_spi_interrupt_handler+0x17c>
    183a:	e795      	b.n	1768 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    183c:	0020      	movs	r0, r4
    183e:	6923      	ldr	r3, [r4, #16]
    1840:	4798      	blx	r3
    1842:	e791      	b.n	1768 <_spi_interrupt_handler+0xa8>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1844:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1848:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    184a:	3b01      	subs	r3, #1
    184c:	b29b      	uxth	r3, r3
    184e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1850:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1852:	b29b      	uxth	r3, r3
    1854:	2b00      	cmp	r3, #0
    1856:	d000      	beq.n	185a <_spi_interrupt_handler+0x19a>
    1858:	e786      	b.n	1768 <_spi_interrupt_handler+0xa8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    185a:	3304      	adds	r3, #4
    185c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    185e:	2200      	movs	r2, #0
    1860:	3334      	adds	r3, #52	; 0x34
    1862:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1864:	3b35      	subs	r3, #53	; 0x35
    1866:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1868:	07fb      	lsls	r3, r7, #31
    186a:	d400      	bmi.n	186e <_spi_interrupt_handler+0x1ae>
    186c:	e77c      	b.n	1768 <_spi_interrupt_handler+0xa8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    186e:	0020      	movs	r0, r4
    1870:	68e3      	ldr	r3, [r4, #12]
    1872:	4798      	blx	r3
    1874:	e778      	b.n	1768 <_spi_interrupt_handler+0xa8>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1876:	0a1b      	lsrs	r3, r3, #8
    1878:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    187a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    187c:	3301      	adds	r3, #1
    187e:	62a3      	str	r3, [r4, #40]	; 0x28
    1880:	e7c5      	b.n	180e <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1882:	077b      	lsls	r3, r7, #29
    1884:	d400      	bmi.n	1888 <_spi_interrupt_handler+0x1c8>
    1886:	e76f      	b.n	1768 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1888:	0020      	movs	r0, r4
    188a:	6963      	ldr	r3, [r4, #20]
    188c:	4798      	blx	r3
    188e:	e76b      	b.n	1768 <_spi_interrupt_handler+0xa8>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1890:	0020      	movs	r0, r4
    1892:	69e3      	ldr	r3, [r4, #28]
    1894:	4798      	blx	r3
    1896:	e77b      	b.n	1790 <_spi_interrupt_handler+0xd0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1898:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    189a:	2b01      	cmp	r3, #1
    189c:	d000      	beq.n	18a0 <_spi_interrupt_handler+0x1e0>
    189e:	e786      	b.n	17ae <_spi_interrupt_handler+0xee>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    18a0:	79e3      	ldrb	r3, [r4, #7]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d000      	beq.n	18a8 <_spi_interrupt_handler+0x1e8>
    18a6:	e782      	b.n	17ae <_spi_interrupt_handler+0xee>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    18a8:	3302      	adds	r3, #2
    18aa:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    18ac:	3301      	adds	r3, #1
    18ae:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    18b0:	2200      	movs	r2, #0
    18b2:	3335      	adds	r3, #53	; 0x35
    18b4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    18b6:	07fb      	lsls	r3, r7, #31
    18b8:	d400      	bmi.n	18bc <_spi_interrupt_handler+0x1fc>
    18ba:	e76d      	b.n	1798 <_spi_interrupt_handler+0xd8>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    18bc:	0020      	movs	r0, r4
    18be:	68e3      	ldr	r3, [r4, #12]
    18c0:	4798      	blx	r3
    18c2:	e769      	b.n	1798 <_spi_interrupt_handler+0xd8>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    18c4:	0020      	movs	r0, r4
    18c6:	6a23      	ldr	r3, [r4, #32]
    18c8:	4798      	blx	r3
    18ca:	e770      	b.n	17ae <_spi_interrupt_handler+0xee>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    18cc:	2380      	movs	r3, #128	; 0x80
    18ce:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    18d0:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    18d2:	067b      	lsls	r3, r7, #25
    18d4:	d400      	bmi.n	18d8 <_spi_interrupt_handler+0x218>
    18d6:	e76e      	b.n	17b6 <_spi_interrupt_handler+0xf6>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    18d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    18da:	0020      	movs	r0, r4
    18dc:	4798      	blx	r3
}
    18de:	e76a      	b.n	17b6 <_spi_interrupt_handler+0xf6>
    18e0:	20000210 	.word	0x20000210
    18e4:	2000021c 	.word	0x2000021c

000018e8 <detect_cube>:
extern volatile bool sensorsUpdate;

#define CUBE_MATCH_THRESHOLD 25


bool detect_cube(bool S0, bool S1, bool S2, uint8_t place) {
    18e8:	b510      	push	{r4, lr}
    18ea:	001c      	movs	r4, r3
	uint16_t value = 0;
	
	select_mux(S0, S1, S2);
    18ec:	4b0f      	ldr	r3, [pc, #60]	; (192c <detect_cube+0x44>)
    18ee:	4798      	blx	r3
	switch (place)
    18f0:	2c01      	cmp	r4, #1
    18f2:	d00f      	beq.n	1914 <detect_cube+0x2c>
    18f4:	2c00      	cmp	r4, #0
    18f6:	d005      	beq.n	1904 <detect_cube+0x1c>
    18f8:	2c02      	cmp	r4, #2
    18fa:	d00f      	beq.n	191c <detect_cube+0x34>
    18fc:	2c03      	cmp	r4, #3
    18fe:	d011      	beq.n	1924 <detect_cube+0x3c>
	uint16_t value = 0;
    1900:	2300      	movs	r3, #0
    1902:	e002      	b.n	190a <detect_cube+0x22>
	{
		case 0:
			value = read_ones();
    1904:	4b0a      	ldr	r3, [pc, #40]	; (1930 <detect_cube+0x48>)
    1906:	4798      	blx	r3
    1908:	0003      	movs	r3, r0
    190a:	2032      	movs	r0, #50	; 0x32
    190c:	4298      	cmp	r0, r3
    190e:	4180      	sbcs	r0, r0
    1910:	4240      	negs	r0, r0
	if (value > CUBE_DETECT_THRESHOLD) {
		return true;
	} else {
		return false;
	}
}
    1912:	bd10      	pop	{r4, pc}
			value = read_tens();
    1914:	4b07      	ldr	r3, [pc, #28]	; (1934 <detect_cube+0x4c>)
    1916:	4798      	blx	r3
    1918:	0003      	movs	r3, r0
			break;
    191a:	e7f6      	b.n	190a <detect_cube+0x22>
			value = read_hndrds();
    191c:	4b06      	ldr	r3, [pc, #24]	; (1938 <detect_cube+0x50>)
    191e:	4798      	blx	r3
    1920:	0003      	movs	r3, r0
			break;
    1922:	e7f2      	b.n	190a <detect_cube+0x22>
			value = read_misc();
    1924:	4b05      	ldr	r3, [pc, #20]	; (193c <detect_cube+0x54>)
    1926:	4798      	blx	r3
    1928:	0003      	movs	r3, r0
			break;
    192a:	e7ee      	b.n	190a <detect_cube+0x22>
    192c:	00001d7d 	.word	0x00001d7d
    1930:	00001dc5 	.word	0x00001dc5
    1934:	00001dd5 	.word	0x00001dd5
    1938:	00001de5 	.word	0x00001de5
    193c:	00001df5 	.word	0x00001df5

00001940 <formatData>:
void formatData(uint32_t cubes_detected)
{
	uint8_t i = 0;
	uint32_t temp = 0;
	
	sensorsUpdate = true;
    1940:	4908      	ldr	r1, [pc, #32]	; (1964 <formatData+0x24>)
    1942:	2301      	movs	r3, #1
    1944:	700b      	strb	r3, [r1, #0]
	for(i=0;i<4;i++)
	{
		cubeOutputs[i] = (uint8_t)((cubes_detected >> (24 - 8*i)) & 0xFF) ;
    1946:	0e02      	lsrs	r2, r0, #24
    1948:	4b07      	ldr	r3, [pc, #28]	; (1968 <formatData+0x28>)
    194a:	701a      	strb	r2, [r3, #0]
    194c:	0c02      	lsrs	r2, r0, #16
    194e:	b2d2      	uxtb	r2, r2
    1950:	705a      	strb	r2, [r3, #1]
    1952:	0a02      	lsrs	r2, r0, #8
    1954:	b2d2      	uxtb	r2, r2
    1956:	709a      	strb	r2, [r3, #2]
    1958:	b2c0      	uxtb	r0, r0
    195a:	70d8      	strb	r0, [r3, #3]
	}
	sensorsUpdate = false;
    195c:	2300      	movs	r3, #0
    195e:	700b      	strb	r3, [r1, #0]
	
}
    1960:	4770      	bx	lr
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	20000184 	.word	0x20000184
    1968:	200002f8 	.word	0x200002f8

0000196c <filterData>:
{
	static uint32_t prevCubesDetected = 0;
	static uint16_t cubeMatchCount = 0;
	static uint32_t filteredValue = 0;
	
	if(cubes_detected == prevCubesDetected)
    196c:	4b0d      	ldr	r3, [pc, #52]	; (19a4 <filterData+0x38>)
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	4283      	cmp	r3, r0
    1972:	d007      	beq.n	1984 <filterData+0x18>
			filteredValue = cubes_detected;
		}
	}
	else
	{
		cubeMatchCount = 0;
    1974:	2200      	movs	r2, #0
    1976:	4b0c      	ldr	r3, [pc, #48]	; (19a8 <filterData+0x3c>)
    1978:	801a      	strh	r2, [r3, #0]
	}
	prevCubesDetected = cubes_detected;
    197a:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <filterData+0x38>)
    197c:	6018      	str	r0, [r3, #0]
	return filteredValue;
    197e:	4b0b      	ldr	r3, [pc, #44]	; (19ac <filterData+0x40>)
    1980:	6818      	ldr	r0, [r3, #0]
}
    1982:	4770      	bx	lr
		cubeMatchCount ++;
    1984:	4b08      	ldr	r3, [pc, #32]	; (19a8 <filterData+0x3c>)
    1986:	881b      	ldrh	r3, [r3, #0]
    1988:	3301      	adds	r3, #1
    198a:	b29b      	uxth	r3, r3
		if(cubeMatchCount > CUBE_MATCH_THRESHOLD)
    198c:	2b19      	cmp	r3, #25
    198e:	d802      	bhi.n	1996 <filterData+0x2a>
		cubeMatchCount ++;
    1990:	4a05      	ldr	r2, [pc, #20]	; (19a8 <filterData+0x3c>)
    1992:	8013      	strh	r3, [r2, #0]
    1994:	e7f1      	b.n	197a <filterData+0xe>
			cubeMatchCount =0;
    1996:	2200      	movs	r2, #0
    1998:	4b03      	ldr	r3, [pc, #12]	; (19a8 <filterData+0x3c>)
    199a:	801a      	strh	r2, [r3, #0]
			filteredValue = cubes_detected;
    199c:	4b03      	ldr	r3, [pc, #12]	; (19ac <filterData+0x40>)
    199e:	6018      	str	r0, [r3, #0]
    19a0:	e7eb      	b.n	197a <filterData+0xe>
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	20000144 	.word	0x20000144
    19a8:	2000013c 	.word	0x2000013c
    19ac:	20000140 	.word	0x20000140

000019b0 <read_all_values>:

/*
 * Reads through all different values, detects the cube, 
 * creates an number in the form of the values
 */
void read_all_values(){
    19b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b2:	46de      	mov	lr, fp
    19b4:	4657      	mov	r7, sl
    19b6:	464e      	mov	r6, r9
    19b8:	4645      	mov	r5, r8
    19ba:	b5e0      	push	{r5, r6, r7, lr}
    19bc:	b085      	sub	sp, #20
	uint8_t i, place;
	uint8_t ind;
	static bool S0;
	static bool S1;
	static bool S2;
    volatile bool cube = false;
    19be:	2200      	movs	r2, #0
    19c0:	ab02      	add	r3, sp, #8
    19c2:	71da      	strb	r2, [r3, #7]
	uint32_t cubes_detected = 0;
    19c4:	2300      	movs	r3, #0
    19c6:	4698      	mov	r8, r3
	uint32_t cubes_detected_filtered= 0;
	static uint32_t prev_cubes_detected_filtered = 0;
	
	for (i = 0; i < 8; i++)
    19c8:	2600      	movs	r6, #0
    19ca:	e023      	b.n	1a14 <read_all_values+0x64>
	{
		S0 = (bool) (i & 0x1);
		S1 = (bool) ((i >> 1) & 0x1);
		S2 = (bool) ((i >> 2) & 0x1);
		for (place = 0; place < 3; place++)
    19cc:	3401      	adds	r4, #1
    19ce:	b2e4      	uxtb	r4, r4
    19d0:	350a      	adds	r5, #10
    19d2:	b2ed      	uxtb	r5, r5
    19d4:	2c03      	cmp	r4, #3
    19d6:	d018      	beq.n	1a0a <read_all_values+0x5a>
		{
			ind = 2 + i + place*10;
			// Put boolean value from detect cube at place indicated by ind
			//delay_ms(10);
			cube = detect_cube(S0, S1, S2, place);
    19d8:	4653      	mov	r3, sl
    19da:	781a      	ldrb	r2, [r3, #0]
    19dc:	464b      	mov	r3, r9
    19de:	7819      	ldrb	r1, [r3, #0]
    19e0:	7838      	ldrb	r0, [r7, #0]
    19e2:	0023      	movs	r3, r4
    19e4:	4e33      	ldr	r6, [pc, #204]	; (1ab4 <read_all_values+0x104>)
    19e6:	47b0      	blx	r6
    19e8:	ab02      	add	r3, sp, #8
    19ea:	71d8      	strb	r0, [r3, #7]
    19ec:	3307      	adds	r3, #7
			//delay_ms(10);
			if(cube == true)
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	2b00      	cmp	r3, #0
    19f2:	d0eb      	beq.n	19cc <read_all_values+0x1c>
			{
				cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    19f4:	ab02      	add	r3, sp, #8
    19f6:	1dda      	adds	r2, r3, #7
    19f8:	79db      	ldrb	r3, [r3, #7]
    19fa:	b2db      	uxtb	r3, r3
    19fc:	40ab      	lsls	r3, r5
    19fe:	4641      	mov	r1, r8
    1a00:	4319      	orrs	r1, r3
    1a02:	4688      	mov	r8, r1
				cube = false;
    1a04:	2300      	movs	r3, #0
    1a06:	7013      	strb	r3, [r2, #0]
    1a08:	e7e0      	b.n	19cc <read_all_values+0x1c>
    1a0a:	9e01      	ldr	r6, [sp, #4]
	for (i = 0; i < 8; i++)
    1a0c:	3601      	adds	r6, #1
    1a0e:	b2f6      	uxtb	r6, r6
    1a10:	2e08      	cmp	r6, #8
    1a12:	d014      	beq.n	1a3e <read_all_values+0x8e>
		S0 = (bool) (i & 0x1);
    1a14:	2301      	movs	r3, #1
    1a16:	001a      	movs	r2, r3
    1a18:	4032      	ands	r2, r6
    1a1a:	4927      	ldr	r1, [pc, #156]	; (1ab8 <read_all_values+0x108>)
    1a1c:	700a      	strb	r2, [r1, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    1a1e:	0872      	lsrs	r2, r6, #1
    1a20:	401a      	ands	r2, r3
    1a22:	4926      	ldr	r1, [pc, #152]	; (1abc <read_all_values+0x10c>)
    1a24:	700a      	strb	r2, [r1, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    1a26:	08b2      	lsrs	r2, r6, #2
    1a28:	4013      	ands	r3, r2
    1a2a:	4a25      	ldr	r2, [pc, #148]	; (1ac0 <read_all_values+0x110>)
    1a2c:	7013      	strb	r3, [r2, #0]
    1a2e:	1cb5      	adds	r5, r6, #2
    1a30:	b2ed      	uxtb	r5, r5
		for (place = 0; place < 3; place++)
    1a32:	2400      	movs	r4, #0
			cube = detect_cube(S0, S1, S2, place);
    1a34:	4692      	mov	sl, r2
    1a36:	4689      	mov	r9, r1
    1a38:	4f1f      	ldr	r7, [pc, #124]	; (1ab8 <read_all_values+0x108>)
    1a3a:	9601      	str	r6, [sp, #4]
    1a3c:	e7cc      	b.n	19d8 <read_all_values+0x28>
    1a3e:	2400      	movs	r4, #0
		}
	}
	
	for (i = 0; i < 6; i++)
	{
		S0 = (bool) (i & 0x1);
    1a40:	4b1d      	ldr	r3, [pc, #116]	; (1ab8 <read_all_values+0x108>)
    1a42:	4699      	mov	r9, r3
		S1 = (bool) ((i >> 1) & 0x1);
    1a44:	4f1d      	ldr	r7, [pc, #116]	; (1abc <read_all_values+0x10c>)
		S2 = (bool) ((i >> 2) & 0x1);
    1a46:	4b1e      	ldr	r3, [pc, #120]	; (1ac0 <read_all_values+0x110>)
    1a48:	469b      	mov	fp, r3
    1a4a:	4645      	mov	r5, r8
		S0 = (bool) (i & 0x1);
    1a4c:	2201      	movs	r2, #1
    1a4e:	0010      	movs	r0, r2
    1a50:	4020      	ands	r0, r4
    1a52:	464b      	mov	r3, r9
    1a54:	7018      	strb	r0, [r3, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    1a56:	0863      	lsrs	r3, r4, #1
    1a58:	0011      	movs	r1, r2
    1a5a:	4019      	ands	r1, r3
    1a5c:	7039      	strb	r1, [r7, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    1a5e:	08a6      	lsrs	r6, r4, #2
    1a60:	4032      	ands	r2, r6
    1a62:	465e      	mov	r6, fp
    1a64:	7032      	strb	r2, [r6, #0]
		place = 3;
		ind = i + ((i/2)*8);
    1a66:	00db      	lsls	r3, r3, #3
    1a68:	18e3      	adds	r3, r4, r3
    1a6a:	b2db      	uxtb	r3, r3
    1a6c:	4698      	mov	r8, r3
		// Put boolean value from detect cube at place indicated by ind
		cube = detect_cube(S0, S1, S2, place);
    1a6e:	2303      	movs	r3, #3
    1a70:	4e10      	ldr	r6, [pc, #64]	; (1ab4 <read_all_values+0x104>)
    1a72:	47b0      	blx	r6
    1a74:	ab02      	add	r3, sp, #8
    1a76:	71d8      	strb	r0, [r3, #7]
    1a78:	3307      	adds	r3, #7
		cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    1a7a:	781b      	ldrb	r3, [r3, #0]
    1a7c:	b2db      	uxtb	r3, r3
    1a7e:	4642      	mov	r2, r8
    1a80:	4093      	lsls	r3, r2
    1a82:	431d      	orrs	r5, r3
	for (i = 0; i < 6; i++)
    1a84:	3401      	adds	r4, #1
    1a86:	b2e4      	uxtb	r4, r4
    1a88:	2c06      	cmp	r4, #6
    1a8a:	d1df      	bne.n	1a4c <read_all_values+0x9c>
	}
	
	cubes_detected_filtered = filterData(cubes_detected); // If the cube is placed there for 200 msec than assume that we have a cube there
    1a8c:	0028      	movs	r0, r5
    1a8e:	4b0d      	ldr	r3, [pc, #52]	; (1ac4 <read_all_values+0x114>)
    1a90:	4798      	blx	r3
    1a92:	0004      	movs	r4, r0
	 
	if(cubes_detected_filtered != prev_cubes_detected_filtered)
    1a94:	4b0c      	ldr	r3, [pc, #48]	; (1ac8 <read_all_values+0x118>)
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	4298      	cmp	r0, r3
    1a9a:	d001      	beq.n	1aa0 <read_all_values+0xf0>
	{
		formatData(cubes_detected_filtered);
    1a9c:	4b0b      	ldr	r3, [pc, #44]	; (1acc <read_all_values+0x11c>)
    1a9e:	4798      	blx	r3
	}
	prev_cubes_detected_filtered = cubes_detected_filtered;
    1aa0:	4b09      	ldr	r3, [pc, #36]	; (1ac8 <read_all_values+0x118>)
    1aa2:	601c      	str	r4, [r3, #0]
}
    1aa4:	b005      	add	sp, #20
    1aa6:	bc3c      	pop	{r2, r3, r4, r5}
    1aa8:	4690      	mov	r8, r2
    1aaa:	4699      	mov	r9, r3
    1aac:	46a2      	mov	sl, r4
    1aae:	46ab      	mov	fp, r5
    1ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	000018e9 	.word	0x000018e9
    1ab8:	20000138 	.word	0x20000138
    1abc:	20000139 	.word	0x20000139
    1ac0:	2000013a 	.word	0x2000013a
    1ac4:	0000196d 	.word	0x0000196d
    1ac8:	20000148 	.word	0x20000148
    1acc:	00001941 	.word	0x00001941

00001ad0 <i2c_read_request_callback>:
	state = port_pin_get_input_level(DETECT_PIN);
	return state;
}

void i2c_read_request_callback(struct i2c_slave_module *const module)
{
    1ad0:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1ad2:	4b10      	ldr	r3, [pc, #64]	; (1b14 <i2c_read_request_callback+0x44>)
    1ad4:	6a1b      	ldr	r3, [r3, #32]
	static uint8_t count = 0;
	static uint8_t tempCubeOutputs[4];
	if( port_pin_get_input_level(DETECT_PIN) == false)
    1ad6:	01db      	lsls	r3, r3, #7
    1ad8:	d415      	bmi.n	1b06 <i2c_read_request_callback+0x36>
	{
		
		//delay_cycles_us(2);
		if(sensorsUpdate == false)
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <i2c_read_request_callback+0x48>)
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d109      	bne.n	1af6 <i2c_read_request_callback+0x26>
		{
			tempCubeOutputs[0]	   = cubeOutputs[0];
    1ae2:	4a0e      	ldr	r2, [pc, #56]	; (1b1c <i2c_read_request_callback+0x4c>)
    1ae4:	7811      	ldrb	r1, [r2, #0]
    1ae6:	4b0e      	ldr	r3, [pc, #56]	; (1b20 <i2c_read_request_callback+0x50>)
    1ae8:	7019      	strb	r1, [r3, #0]
			tempCubeOutputs[1]	   = cubeOutputs[1];
    1aea:	7851      	ldrb	r1, [r2, #1]
    1aec:	7059      	strb	r1, [r3, #1]
			tempCubeOutputs[2]	   = cubeOutputs[2];
    1aee:	7891      	ldrb	r1, [r2, #2]
    1af0:	7099      	strb	r1, [r3, #2]
			tempCubeOutputs[3]	   = cubeOutputs[3];
    1af2:	78d2      	ldrb	r2, [r2, #3]
    1af4:	70da      	strb	r2, [r3, #3]
			//tempCubeOutputs[2]	   = 0x77;
			//tempCubeOutputs[3]	   = 0x11;
		}
		
		//rd_packet.data_length = DATA_LENGTH_SENSORS;
		rd_packet.data_length = DATA_LENGTH_SENSORS;
    1af6:	490b      	ldr	r1, [pc, #44]	; (1b24 <i2c_read_request_callback+0x54>)
    1af8:	2304      	movs	r3, #4
    1afa:	800b      	strh	r3, [r1, #0]
		rd_packet.data        = tempCubeOutputs;
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <i2c_read_request_callback+0x50>)
    1afe:	604b      	str	r3, [r1, #4]
		i2c_slave_write_packet_job(module, &rd_packet);
    1b00:	4b09      	ldr	r3, [pc, #36]	; (1b28 <i2c_read_request_callback+0x58>)
    1b02:	4798      	blx	r3
		rd_packet.data        = tempCubeOutputs;
		//i2c_slave_write_packet_job(module, &rd_packet);
	}
	
	
}
    1b04:	bd10      	pop	{r4, pc}
		rd_packet.data_length = 0;
    1b06:	4b07      	ldr	r3, [pc, #28]	; (1b24 <i2c_read_request_callback+0x54>)
    1b08:	2200      	movs	r2, #0
    1b0a:	801a      	strh	r2, [r3, #0]
		rd_packet.data        = tempCubeOutputs;
    1b0c:	4a04      	ldr	r2, [pc, #16]	; (1b20 <i2c_read_request_callback+0x50>)
    1b0e:	605a      	str	r2, [r3, #4]
}
    1b10:	e7f8      	b.n	1b04 <i2c_read_request_callback+0x34>
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	41004400 	.word	0x41004400
    1b18:	20000184 	.word	0x20000184
    1b1c:	200002f8 	.word	0x200002f8
    1b20:	2000014c 	.word	0x2000014c
    1b24:	20000228 	.word	0x20000228
    1b28:	0000101f 	.word	0x0000101f

00001b2c <configure_i2c_slave>:
	
}

//! [initialize_i2c]
void configure_i2c_slave(void)
{
    1b2c:	b530      	push	{r4, r5, lr}
    1b2e:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    1b30:	2200      	movs	r2, #0
    1b32:	466b      	mov	r3, sp
    1b34:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    1b36:	2380      	movs	r3, #128	; 0x80
    1b38:	039b      	lsls	r3, r3, #14
    1b3a:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
    1b3c:	2301      	movs	r3, #1
    1b3e:	425b      	negs	r3, r3
    1b40:	4669      	mov	r1, sp
    1b42:	810b      	strh	r3, [r1, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    1b44:	2300      	movs	r3, #0
    1b46:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
    1b48:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    1b4a:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
    1b4c:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    1b4e:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    1b50:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby = false;
    1b52:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1b54:	2224      	movs	r2, #36	; 0x24
    1b56:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1b58:	3201      	adds	r2, #1
    1b5a:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1b5c:	3201      	adds	r2, #1
    1b5e:	548b      	strb	r3, [r1, r2]
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
    
	config_i2c_slave.generator_source = GCLK_GENERATOR_3;
    1b60:	2303      	movs	r3, #3
    1b62:	466a      	mov	r2, sp
    1b64:	764b      	strb	r3, [r1, #25]
	config_i2c_slave.address      = SLAVE_ADDRESS;
    1b66:	330f      	adds	r3, #15
    1b68:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
	
	config_i2c_slave.pinmux_pad0 =  PINMUX_PA22D_SERCOM2_PAD0;
    1b6a:	4b0f      	ldr	r3, [pc, #60]	; (1ba8 <configure_i2c_slave+0x7c>)
    1b6c:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 =  PINMUX_PA23D_SERCOM2_PAD1;
    1b6e:	4b0f      	ldr	r3, [pc, #60]	; (1bac <configure_i2c_slave+0x80>)
    1b70:	9308      	str	r3, [sp, #32]
	
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE , &config_i2c_slave);
    1b72:	4d0f      	ldr	r5, [pc, #60]	; (1bb0 <configure_i2c_slave+0x84>)
    1b74:	490f      	ldr	r1, [pc, #60]	; (1bb4 <configure_i2c_slave+0x88>)
    1b76:	0028      	movs	r0, r5
    1b78:	4b0f      	ldr	r3, [pc, #60]	; (1bb8 <configure_i2c_slave+0x8c>)
    1b7a:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1b7c:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b7e:	0020      	movs	r0, r4
    1b80:	4b0e      	ldr	r3, [pc, #56]	; (1bbc <configure_i2c_slave+0x90>)
    1b82:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b84:	231f      	movs	r3, #31
    1b86:	4018      	ands	r0, r3
    1b88:	3b1e      	subs	r3, #30
    1b8a:	4083      	lsls	r3, r0
    1b8c:	4a0c      	ldr	r2, [pc, #48]	; (1bc0 <configure_i2c_slave+0x94>)
    1b8e:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1b90:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    1b92:	2203      	movs	r2, #3
    1b94:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    1b96:	421a      	tst	r2, r3
    1b98:	d1fc      	bne.n	1b94 <configure_i2c_slave+0x68>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1b9a:	6823      	ldr	r3, [r4, #0]
    1b9c:	2202      	movs	r2, #2
    1b9e:	4313      	orrs	r3, r2
    1ba0:	6023      	str	r3, [r4, #0]
	i2c_slave_enable(&i2c_slave_instance);
	
}
    1ba2:	b00b      	add	sp, #44	; 0x2c
    1ba4:	bd30      	pop	{r4, r5, pc}
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	00160003 	.word	0x00160003
    1bac:	00170003 	.word	0x00170003
    1bb0:	20000230 	.word	0x20000230
    1bb4:	42001000 	.word	0x42001000
    1bb8:	00000e75 	.word	0x00000e75
    1bbc:	0000145d 	.word	0x0000145d
    1bc0:	e000e100 	.word	0xe000e100

00001bc4 <configure_i2c_slave_callbacks>:

void configure_i2c_slave_callbacks(void)
{
    1bc4:	b510      	push	{r4, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,I2C_SLAVE_CALLBACK_READ_REQUEST);
    1bc6:	4c07      	ldr	r4, [pc, #28]	; (1be4 <configure_i2c_slave_callbacks+0x20>)
    1bc8:	2202      	movs	r2, #2
    1bca:	4907      	ldr	r1, [pc, #28]	; (1be8 <configure_i2c_slave_callbacks+0x24>)
    1bcc:	0020      	movs	r0, r4
    1bce:	4b07      	ldr	r3, [pc, #28]	; (1bec <configure_i2c_slave_callbacks+0x28>)
    1bd0:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1bd2:	2225      	movs	r2, #37	; 0x25
    1bd4:	5ca3      	ldrb	r3, [r4, r2]
    1bd6:	2104      	movs	r1, #4
    1bd8:	430b      	orrs	r3, r1
    1bda:	54a3      	strb	r3, [r4, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1bdc:	6823      	ldr	r3, [r4, #0]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    1bde:	3a23      	subs	r2, #35	; 0x23
    1be0:	759a      	strb	r2, [r3, #22]
	i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_READ_REQUEST);
}
    1be2:	bd10      	pop	{r4, pc}
    1be4:	20000230 	.word	0x20000230
    1be8:	00001ad1 	.word	0x00001ad1
    1bec:	00001005 	.word	0x00001005

00001bf0 <configure_adc>:

struct adc_module adc_instance;
uint16_t* adc_result = NULL;

void configure_adc()
{
    1bf0:	b510      	push	{r4, lr}
    1bf2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1bf4:	4668      	mov	r0, sp
    1bf6:	4b1a      	ldr	r3, [pc, #104]	; (1c60 <configure_adc+0x70>)
    1bf8:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    1bfa:	2002      	movs	r0, #2
    1bfc:	4b19      	ldr	r3, [pc, #100]	; (1c64 <configure_adc+0x74>)
    1bfe:	4798      	blx	r3
    1c00:	4b19      	ldr	r3, [pc, #100]	; (1c68 <configure_adc+0x78>)
    1c02:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1c04:	2301      	movs	r3, #1
    1c06:	466a      	mov	r2, sp
    1c08:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CTRLB_PRESCALER_DIV256;
    1c0a:	22c0      	movs	r2, #192	; 0xc0
    1c0c:	00d2      	lsls	r2, r2, #3
    1c0e:	4669      	mov	r1, sp
    1c10:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    1c12:	2206      	movs	r2, #6
    1c14:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1c16:	22c0      	movs	r2, #192	; 0xc0
    1c18:	0152      	lsls	r2, r2, #5
    1c1a:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    1c1c:	2230      	movs	r2, #48	; 0x30
    1c1e:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    1c20:	466a      	mov	r2, sp
    1c22:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
    1c24:	4c11      	ldr	r4, [pc, #68]	; (1c6c <configure_adc+0x7c>)
    1c26:	4912      	ldr	r1, [pc, #72]	; (1c70 <configure_adc+0x80>)
    1c28:	0020      	movs	r0, r4
    1c2a:	4b12      	ldr	r3, [pc, #72]	; (1c74 <configure_adc+0x84>)
    1c2c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1c2e:	6822      	ldr	r2, [r4, #0]
    1c30:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1c32:	b25b      	sxtb	r3, r3
    1c34:	2b00      	cmp	r3, #0
    1c36:	dbfb      	blt.n	1c30 <configure_adc+0x40>
    1c38:	2180      	movs	r1, #128	; 0x80
    1c3a:	0209      	lsls	r1, r1, #8
    1c3c:	4b0e      	ldr	r3, [pc, #56]	; (1c78 <configure_adc+0x88>)
    1c3e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1c40:	230f      	movs	r3, #15
    1c42:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1c44:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1c46:	7813      	ldrb	r3, [r2, #0]
    1c48:	2102      	movs	r1, #2
    1c4a:	430b      	orrs	r3, r1
    1c4c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1c4e:	4b07      	ldr	r3, [pc, #28]	; (1c6c <configure_adc+0x7c>)
    1c50:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c52:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1c54:	b25b      	sxtb	r3, r3
    1c56:	2b00      	cmp	r3, #0
    1c58:	dbfb      	blt.n	1c52 <configure_adc+0x62>
	adc_enable(&adc_instance);
}
    1c5a:	b00c      	add	sp, #48	; 0x30
    1c5c:	bd10      	pop	{r4, pc}
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	000005b5 	.word	0x000005b5
    1c64:	00002bf9 	.word	0x00002bf9
    1c68:	20000150 	.word	0x20000150
    1c6c:	20000264 	.word	0x20000264
    1c70:	42002000 	.word	0x42002000
    1c74:	000005fd 	.word	0x000005fd
    1c78:	e000e100 	.word	0xe000e100

00001c7c <configure_mux_select>:

void configure_mux_select() {
    1c7c:	b530      	push	{r4, r5, lr}
    1c7e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1c80:	ac01      	add	r4, sp, #4
    1c82:	2301      	movs	r3, #1
    1c84:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1c86:	2200      	movs	r2, #0
    1c88:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c8a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MUX_S0, &config_port_pin);
    1c8c:	0021      	movs	r1, r4
    1c8e:	200f      	movs	r0, #15
    1c90:	4d04      	ldr	r5, [pc, #16]	; (1ca4 <configure_mux_select+0x28>)
    1c92:	47a8      	blx	r5
	port_pin_set_config(MUX_S1, &config_port_pin);
    1c94:	0021      	movs	r1, r4
    1c96:	2010      	movs	r0, #16
    1c98:	47a8      	blx	r5
	port_pin_set_config(MUX_S2, &config_port_pin);
    1c9a:	0021      	movs	r1, r4
    1c9c:	2011      	movs	r0, #17
    1c9e:	47a8      	blx	r5
}
    1ca0:	b003      	add	sp, #12
    1ca2:	bd30      	pop	{r4, r5, pc}
    1ca4:	00000e51 	.word	0x00000e51

00001ca8 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    1ca8:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    1caa:	4b2d      	ldr	r3, [pc, #180]	; (1d60 <adc_start_read_result+0xb8>)
    1cac:	6819      	ldr	r1, [r3, #0]
    1cae:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1cb0:	b25b      	sxtb	r3, r3
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	dbfb      	blt.n	1cae <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1cb6:	690b      	ldr	r3, [r1, #16]
    1cb8:	221f      	movs	r2, #31
    1cba:	4393      	bics	r3, r2
    1cbc:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    1cbe:	6108      	str	r0, [r1, #16]
    1cc0:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1cc2:	b25b      	sxtb	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	dbfb      	blt.n	1cc0 <adc_start_read_result+0x18>
    1cc8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1cca:	b25b      	sxtb	r3, r3
    1ccc:	2b00      	cmp	r3, #0
    1cce:	dbfb      	blt.n	1cc8 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1cd0:	7b0b      	ldrb	r3, [r1, #12]
    1cd2:	2202      	movs	r2, #2
    1cd4:	4313      	orrs	r3, r2
    1cd6:	730b      	strb	r3, [r1, #12]
    1cd8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1cda:	b25b      	sxtb	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	dbfb      	blt.n	1cd8 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1ce0:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1ce2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1ce4:	2402      	movs	r4, #2
    1ce6:	e001      	b.n	1cec <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    1ce8:	4210      	tst	r0, r2
    1cea:	d10a      	bne.n	1d02 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1cec:	7e0b      	ldrb	r3, [r1, #24]
    1cee:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1cf0:	0002      	movs	r2, r0
    1cf2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1cf4:	421d      	tst	r5, r3
    1cf6:	d000      	beq.n	1cfa <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    1cf8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1cfa:	421c      	tst	r4, r3
    1cfc:	d0f4      	beq.n	1ce8 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    1cfe:	432a      	orrs	r2, r5
    1d00:	e7f2      	b.n	1ce8 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1d02:	7e0a      	ldrb	r2, [r1, #24]
    1d04:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1d06:	2301      	movs	r3, #1
    1d08:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1d0a:	0750      	lsls	r0, r2, #29
    1d0c:	d501      	bpl.n	1d12 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    1d0e:	2002      	movs	r0, #2
    1d10:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1d12:	0792      	lsls	r2, r2, #30
    1d14:	d501      	bpl.n	1d1a <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    1d16:	2204      	movs	r2, #4
    1d18:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1d1a:	07db      	lsls	r3, r3, #31
    1d1c:	d403      	bmi.n	1d26 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    1d1e:	4b11      	ldr	r3, [pc, #68]	; (1d64 <adc_start_read_result+0xbc>)
    1d20:	681b      	ldr	r3, [r3, #0]
	return temp;
    1d22:	8818      	ldrh	r0, [r3, #0]
}
    1d24:	bd30      	pop	{r4, r5, pc}
    1d26:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1d28:	b25b      	sxtb	r3, r3
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	dbfb      	blt.n	1d26 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    1d2e:	4b0d      	ldr	r3, [pc, #52]	; (1d64 <adc_start_read_result+0xbc>)
    1d30:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1d32:	8b4a      	ldrh	r2, [r1, #26]
    1d34:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    1d36:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <adc_start_read_result+0xb8>)
    1d38:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    1d3a:	2301      	movs	r3, #1
    1d3c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1d3e:	7e0a      	ldrb	r2, [r1, #24]
    1d40:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1d42:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1d44:	0750      	lsls	r0, r2, #29
    1d46:	d501      	bpl.n	1d4c <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    1d48:	2002      	movs	r0, #2
    1d4a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1d4c:	0792      	lsls	r2, r2, #30
    1d4e:	d501      	bpl.n	1d54 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    1d50:	2204      	movs	r2, #4
    1d52:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1d54:	075b      	lsls	r3, r3, #29
    1d56:	d5e2      	bpl.n	1d1e <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    1d58:	2302      	movs	r3, #2
    1d5a:	760b      	strb	r3, [r1, #24]
    1d5c:	e7df      	b.n	1d1e <adc_start_read_result+0x76>
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	20000264 	.word	0x20000264
    1d64:	20000150 	.word	0x20000150

00001d68 <ir_sensor_init>:

void ir_sensor_init()
{
    1d68:	b510      	push	{r4, lr}
	configure_adc();
    1d6a:	4b02      	ldr	r3, [pc, #8]	; (1d74 <ir_sensor_init+0xc>)
    1d6c:	4798      	blx	r3
	configure_mux_select();
    1d6e:	4b02      	ldr	r3, [pc, #8]	; (1d78 <ir_sensor_init+0x10>)
    1d70:	4798      	blx	r3
}
    1d72:	bd10      	pop	{r4, pc}
    1d74:	00001bf1 	.word	0x00001bf1
    1d78:	00001c7d 	.word	0x00001c7d

00001d7c <select_mux>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d010      	beq.n	1da2 <select_mux+0x26>
		port_base->OUTSET.reg = pin_mask;
    1d80:	2080      	movs	r0, #128	; 0x80
    1d82:	0200      	lsls	r0, r0, #8
    1d84:	4b0e      	ldr	r3, [pc, #56]	; (1dc0 <select_mux+0x44>)
    1d86:	6198      	str	r0, [r3, #24]
	if (level) {
    1d88:	2900      	cmp	r1, #0
    1d8a:	d00f      	beq.n	1dac <select_mux+0x30>
		port_base->OUTSET.reg = pin_mask;
    1d8c:	2180      	movs	r1, #128	; 0x80
    1d8e:	0249      	lsls	r1, r1, #9
    1d90:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <select_mux+0x44>)
    1d92:	6199      	str	r1, [r3, #24]
	if (level) {
    1d94:	2a00      	cmp	r2, #0
    1d96:	d10e      	bne.n	1db6 <select_mux+0x3a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d98:	2280      	movs	r2, #128	; 0x80
    1d9a:	0292      	lsls	r2, r2, #10
    1d9c:	4b08      	ldr	r3, [pc, #32]	; (1dc0 <select_mux+0x44>)
    1d9e:	615a      	str	r2, [r3, #20]

void select_mux(const bool S0, const bool S1, const bool S2) {
	port_pin_set_output_level(MUX_S0, S0);
	port_pin_set_output_level(MUX_S1, S1);
	port_pin_set_output_level(MUX_S2, S2);
}
    1da0:	4770      	bx	lr
    1da2:	2080      	movs	r0, #128	; 0x80
    1da4:	0200      	lsls	r0, r0, #8
    1da6:	4b06      	ldr	r3, [pc, #24]	; (1dc0 <select_mux+0x44>)
    1da8:	6158      	str	r0, [r3, #20]
    1daa:	e7ed      	b.n	1d88 <select_mux+0xc>
    1dac:	2180      	movs	r1, #128	; 0x80
    1dae:	0249      	lsls	r1, r1, #9
    1db0:	4b03      	ldr	r3, [pc, #12]	; (1dc0 <select_mux+0x44>)
    1db2:	6159      	str	r1, [r3, #20]
    1db4:	e7ee      	b.n	1d94 <select_mux+0x18>
		port_base->OUTSET.reg = pin_mask;
    1db6:	2280      	movs	r2, #128	; 0x80
    1db8:	0292      	lsls	r2, r2, #10
    1dba:	4b01      	ldr	r3, [pc, #4]	; (1dc0 <select_mux+0x44>)
    1dbc:	619a      	str	r2, [r3, #24]
    1dbe:	e7ef      	b.n	1da0 <select_mux+0x24>
    1dc0:	41004400 	.word	0x41004400

00001dc4 <read_ones>:

uint16_t read_ones() {
    1dc4:	b510      	push	{r4, lr}
	return adc_start_read_result(ONES_CHANNEL);
    1dc6:	2000      	movs	r0, #0
    1dc8:	4b01      	ldr	r3, [pc, #4]	; (1dd0 <read_ones+0xc>)
    1dca:	4798      	blx	r3
}
    1dcc:	bd10      	pop	{r4, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	00001ca9 	.word	0x00001ca9

00001dd4 <read_tens>:

uint16_t read_tens() {
    1dd4:	b510      	push	{r4, lr}
	return adc_start_read_result(TENS_CHANNEL);
    1dd6:	2004      	movs	r0, #4
    1dd8:	4b01      	ldr	r3, [pc, #4]	; (1de0 <read_tens+0xc>)
    1dda:	4798      	blx	r3
}
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	00001ca9 	.word	0x00001ca9

00001de4 <read_hndrds>:

uint16_t read_hndrds() {
    1de4:	b510      	push	{r4, lr}
	return adc_start_read_result(HNDRDS_CHANNEL);
    1de6:	2003      	movs	r0, #3
    1de8:	4b01      	ldr	r3, [pc, #4]	; (1df0 <read_hndrds+0xc>)
    1dea:	4798      	blx	r3
}
    1dec:	bd10      	pop	{r4, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	00001ca9 	.word	0x00001ca9

00001df4 <read_misc>:

uint16_t read_misc() {
    1df4:	b510      	push	{r4, lr}
	return adc_start_read_result(MISC_CHANNEL);
    1df6:	2002      	movs	r0, #2
    1df8:	4b01      	ldr	r3, [pc, #4]	; (1e00 <read_misc+0xc>)
    1dfa:	4798      	blx	r3
    1dfc:	bd10      	pop	{r4, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00001ca9 	.word	0x00001ca9

00001e04 <transfer_done>:
	
}

static void transfer_done(struct dma_resource* const resource )
{
	transferDone = true;
    1e04:	2201      	movs	r2, #1
    1e06:	4b01      	ldr	r3, [pc, #4]	; (1e0c <transfer_done+0x8>)
    1e08:	701a      	strb	r2, [r3, #0]
}
    1e0a:	4770      	bx	lr
    1e0c:	20000185 	.word	0x20000185

00001e10 <sourceRegisterInit>:
{
    1e10:	2300      	movs	r3, #0
		DMASourceRegister[i]	=	0x00;
    1e12:	490a      	ldr	r1, [pc, #40]	; (1e3c <sourceRegisterInit+0x2c>)
    1e14:	2200      	movs	r2, #0
    1e16:	54ca      	strb	r2, [r1, r3]
    1e18:	3301      	adds	r3, #1
	for(i=0;i<STARTZEROS;i++)
    1e1a:	2b60      	cmp	r3, #96	; 0x60
    1e1c:	d1fb      	bne.n	1e16 <sourceRegisterInit+0x6>
		DMASourceRegister[i]	=	0x88;
    1e1e:	4907      	ldr	r1, [pc, #28]	; (1e3c <sourceRegisterInit+0x2c>)
    1e20:	2288      	movs	r2, #136	; 0x88
    1e22:	54ca      	strb	r2, [r1, r3]
    1e24:	3301      	adds	r3, #1
	for(i=STARTZEROS;i<STARTZEROS + NOLEDS*NoBytesLED ;i++)
    1e26:	2b84      	cmp	r3, #132	; 0x84
    1e28:	d1fb      	bne.n	1e22 <sourceRegisterInit+0x12>
    1e2a:	3b60      	subs	r3, #96	; 0x60
		DMASourceRegister[i]    =   0x00;
    1e2c:	4903      	ldr	r1, [pc, #12]	; (1e3c <sourceRegisterInit+0x2c>)
    1e2e:	2200      	movs	r2, #0
    1e30:	54ca      	strb	r2, [r1, r3]
    1e32:	3301      	adds	r3, #1
	for(i=NOLEDS*NoBytesLED;i<STARTZEROS;i++)
    1e34:	2b60      	cmp	r3, #96	; 0x60
    1e36:	d1fb      	bne.n	1e30 <sourceRegisterInit+0x20>
}
    1e38:	4770      	bx	lr
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	200002fc 	.word	0x200002fc

00001e40 <setup_DMA>:
	dma_descriptor_create(descriptor, &descriptor_config);

}

void setup_DMA()
{
    1e40:	b570      	push	{r4, r5, r6, lr}
    1e42:	b086      	sub	sp, #24
	dma_get_config_defaults(&config);
    1e44:	4668      	mov	r0, sp
    1e46:	4b1d      	ldr	r3, [pc, #116]	; (1ebc <setup_DMA+0x7c>)
    1e48:	4798      	blx	r3
	config.peripheral_trigger = SERCOM0_DMAC_ID_TX;
    1e4a:	2302      	movs	r3, #2
    1e4c:	2602      	movs	r6, #2
    1e4e:	466a      	mov	r2, sp
    1e50:	7053      	strb	r3, [r2, #1]
	config.trigger_action     = DMA_TRIGGER_ACTON_BEAT;
    1e52:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    1e54:	4c1a      	ldr	r4, [pc, #104]	; (1ec0 <setup_DMA+0x80>)
    1e56:	4669      	mov	r1, sp
    1e58:	0020      	movs	r0, r4
    1e5a:	4b1a      	ldr	r3, [pc, #104]	; (1ec4 <setup_DMA+0x84>)
    1e5c:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    1e5e:	2201      	movs	r2, #1
    1e60:	466b      	mov	r3, sp
    1e62:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1e64:	2300      	movs	r3, #0
    1e66:	4669      	mov	r1, sp
    1e68:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1e6a:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1e6c:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    1e6e:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    1e70:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1e72:	71cb      	strb	r3, [r1, #7]
	descriptor_config.dst_increment_enable = false;
    1e74:	714b      	strb	r3, [r1, #5]
	descriptor_config.block_transfer_count = blockTransferCount;
    1e76:	33e4      	adds	r3, #228	; 0xe4
    1e78:	810b      	strh	r3, [r1, #8]
	descriptor_config.source_address = (uint32_t)DMASourceRegister+blockTransferCount;
    1e7a:	4b13      	ldr	r3, [pc, #76]	; (1ec8 <setup_DMA+0x88>)
    1e7c:	33e4      	adds	r3, #228	; 0xe4
    1e7e:	9303      	str	r3, [sp, #12]
	descriptor_config.destination_address = 0x42000828; //sercom0
    1e80:	4b12      	ldr	r3, [pc, #72]	; (1ecc <setup_DMA+0x8c>)
    1e82:	9304      	str	r3, [sp, #16]
	descriptor_config.next_descriptor_address = (uint32_t)descriptor;
    1e84:	4d12      	ldr	r5, [pc, #72]	; (1ed0 <setup_DMA+0x90>)
    1e86:	9505      	str	r5, [sp, #20]
	dma_descriptor_create(descriptor, &descriptor_config);
    1e88:	0028      	movs	r0, r5
    1e8a:	4b12      	ldr	r3, [pc, #72]	; (1ed4 <setup_DMA+0x94>)
    1e8c:	4798      	blx	r3
	configure_dma_resource(&example_resource);
	setup_transfer_descriptor(&example_descriptor);
	dma_add_descriptor(&example_resource, &example_descriptor);
    1e8e:	0029      	movs	r1, r5
    1e90:	0020      	movs	r0, r4
    1e92:	4b11      	ldr	r3, [pc, #68]	; (1ed8 <setup_DMA+0x98>)
    1e94:	4798      	blx	r3
	resource->callback[type] = callback;
    1e96:	4b11      	ldr	r3, [pc, #68]	; (1edc <setup_DMA+0x9c>)
    1e98:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    1e9a:	7c23      	ldrb	r3, [r4, #16]
    1e9c:	4333      	orrs	r3, r6
    1e9e:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1ea0:	7822      	ldrb	r2, [r4, #0]
    1ea2:	490f      	ldr	r1, [pc, #60]	; (1ee0 <setup_DMA+0xa0>)
    1ea4:	5c8b      	ldrb	r3, [r1, r2]
    1ea6:	4333      	orrs	r3, r6
    1ea8:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&example_resource, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&example_resource, DMA_CALLBACK_TRANSFER_DONE);
	while(dma_start_transfer_job(&example_resource) == STATUS_OK);
    1eaa:	4d05      	ldr	r5, [pc, #20]	; (1ec0 <setup_DMA+0x80>)
    1eac:	4c0d      	ldr	r4, [pc, #52]	; (1ee4 <setup_DMA+0xa4>)
    1eae:	0028      	movs	r0, r5
    1eb0:	47a0      	blx	r4
    1eb2:	2800      	cmp	r0, #0
    1eb4:	d0fb      	beq.n	1eae <setup_DMA+0x6e>
}
    1eb6:	b006      	add	sp, #24
    1eb8:	bd70      	pop	{r4, r5, r6, pc}
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	00000b9d 	.word	0x00000b9d
    1ec0:	200002a0 	.word	0x200002a0
    1ec4:	00000bad 	.word	0x00000bad
    1ec8:	200002fc 	.word	0x200002fc
    1ecc:	42000828 	.word	0x42000828
    1ed0:	20000290 	.word	0x20000290
    1ed4:	00000d7d 	.word	0x00000d7d
    1ed8:	00000e25 	.word	0x00000e25
    1edc:	00001e05 	.word	0x00001e05
    1ee0:	20000120 	.word	0x20000120
    1ee4:	00000cf5 	.word	0x00000cf5

00001ee8 <configureSPIMaster>:

void configureSPIMaster(void)
{
    1ee8:	b570      	push	{r4, r5, r6, lr}
    1eea:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1eec:	2401      	movs	r4, #1
    1eee:	466b      	mov	r3, sp
    1ef0:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1ef2:	2500      	movs	r5, #0
    1ef4:	9501      	str	r5, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1ef6:	23c0      	movs	r3, #192	; 0xc0
    1ef8:	039b      	lsls	r3, r3, #14
    1efa:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1efc:	466b      	mov	r3, sp
    1efe:	741d      	strb	r5, [r3, #16]
	config->run_in_standby   = false;
    1f00:	745d      	strb	r5, [r3, #17]
	config->receiver_enable  = true;
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1f02:	74dc      	strb	r4, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1f04:	751d      	strb	r5, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1f06:	220c      	movs	r2, #12
    1f08:	2100      	movs	r1, #0
    1f0a:	a806      	add	r0, sp, #24
    1f0c:	4b16      	ldr	r3, [pc, #88]	; (1f68 <configureSPIMaster+0x80>)
    1f0e:	4798      	blx	r3
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    1f10:	2380      	movs	r3, #128	; 0x80
    1f12:	055b      	lsls	r3, r3, #21
    1f14:	9302      	str	r3, [sp, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    1f16:	4b15      	ldr	r3, [pc, #84]	; (1f6c <configureSPIMaster+0x84>)
    1f18:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    1f1a:	2301      	movs	r3, #1
    1f1c:	425b      	negs	r3, r3
    1f1e:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    1f20:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    1f22:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.receiver_enable  = false;
    1f24:	466b      	mov	r3, sp
    1f26:	749d      	strb	r5, [r3, #18]
	config_spi_master.mode_specific.master.baudrate =  SPIBAUDRATE; //2.5MHz  = 400ns per signal
    1f28:	4b11      	ldr	r3, [pc, #68]	; (1f70 <configureSPIMaster+0x88>)
    1f2a:	9306      	str	r3, [sp, #24]
	config_spi_master.generator_source = GCLK_GENERATOR_3;
    1f2c:	2203      	movs	r2, #3
    1f2e:	2324      	movs	r3, #36	; 0x24
    1f30:	4669      	mov	r1, sp
    1f32:	54ca      	strb	r2, [r1, r3]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    1f34:	4e0f      	ldr	r6, [pc, #60]	; (1f74 <configureSPIMaster+0x8c>)
    1f36:	466a      	mov	r2, sp
    1f38:	490f      	ldr	r1, [pc, #60]	; (1f78 <configureSPIMaster+0x90>)
    1f3a:	0030      	movs	r0, r6
    1f3c:	4b0f      	ldr	r3, [pc, #60]	; (1f7c <configureSPIMaster+0x94>)
    1f3e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f40:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f42:	0028      	movs	r0, r5
    1f44:	4b0e      	ldr	r3, [pc, #56]	; (1f80 <configureSPIMaster+0x98>)
    1f46:	4798      	blx	r3
    1f48:	231f      	movs	r3, #31
    1f4a:	4018      	ands	r0, r3
    1f4c:	4084      	lsls	r4, r0
    1f4e:	4b0d      	ldr	r3, [pc, #52]	; (1f84 <configureSPIMaster+0x9c>)
    1f50:	601c      	str	r4, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f52:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1f54:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1f56:	2b00      	cmp	r3, #0
    1f58:	d1fc      	bne.n	1f54 <configureSPIMaster+0x6c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f5a:	682b      	ldr	r3, [r5, #0]
    1f5c:	2202      	movs	r2, #2
    1f5e:	4313      	orrs	r3, r2
    1f60:	602b      	str	r3, [r5, #0]
	spi_enable(&spi_master_instance);
}
    1f62:	b00e      	add	sp, #56	; 0x38
    1f64:	bd70      	pop	{r4, r5, r6, pc}
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	00002c1f 	.word	0x00002c1f
    1f6c:	000e0002 	.word	0x000e0002
    1f70:	002625a0 	.word	0x002625a0
    1f74:	200002bc 	.word	0x200002bc
    1f78:	42000800 	.word	0x42000800
    1f7c:	000014ad 	.word	0x000014ad
    1f80:	0000145d 	.word	0x0000145d
    1f84:	e000e100 	.word	0xe000e100

00001f88 <RGBPI55Init>:
	configureSPIMaster();
	
}

void RGBPI55Init()
{
    1f88:	b510      	push	{r4, lr}
	sourceRegisterInit();
    1f8a:	4b03      	ldr	r3, [pc, #12]	; (1f98 <RGBPI55Init+0x10>)
    1f8c:	4798      	blx	r3
	configureSPIMaster();
    1f8e:	4b03      	ldr	r3, [pc, #12]	; (1f9c <RGBPI55Init+0x14>)
    1f90:	4798      	blx	r3
	SPIMasterInit();
	setup_DMA();
    1f92:	4b03      	ldr	r3, [pc, #12]	; (1fa0 <RGBPI55Init+0x18>)
    1f94:	4798      	blx	r3
}
    1f96:	bd10      	pop	{r4, pc}
    1f98:	00001e11 	.word	0x00001e11
    1f9c:	00001ee9 	.word	0x00001ee9
    1fa0:	00001e41 	.word	0x00001e41

00001fa4 <convertColorSPIData>:
#define TWOBITSPIVALUES {0x88,0x8E,0xE8,0xEE}
const	uint8_t SPIDataConertConsArray[] = TWOBITSPIVALUES;


static uint8_t* convertColorSPIData(colorInfo* colorData )
{
    1fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fa6:	46d6      	mov	lr, sl
    1fa8:	464f      	mov	r7, r9
    1faa:	4646      	mov	r6, r8
    1fac:	b5c0      	push	{r6, r7, lr}
    1fae:	b082      	sub	sp, #8
    1fb0:	4682      	mov	sl, r0
	volatile static uint8_t SPIData[NoBytesLED];
	volatile uint8_t i =0;
    1fb2:	466b      	mov	r3, sp
    1fb4:	1dda      	adds	r2, r3, #7
    1fb6:	2300      	movs	r3, #0
    1fb8:	7013      	strb	r3, [r2, #0]
	uint8_t countSPIData = 0;
	volatile uint8_t temp =0;
    1fba:	4669      	mov	r1, sp
    1fbc:	718b      	strb	r3, [r1, #6]
	volatile uint8_t twoBitValue = 0;
    1fbe:	4669      	mov	r1, sp
    1fc0:	714b      	strb	r3, [r1, #5]
	for(i=0;i<4;i++)
    1fc2:	7013      	strb	r3, [r2, #0]
    1fc4:	7813      	ldrb	r3, [r2, #0]
    1fc6:	b2db      	uxtb	r3, r3
    1fc8:	2b03      	cmp	r3, #3
    1fca:	d900      	bls.n	1fce <convertColorSPIData+0x2a>
    1fcc:	e089      	b.n	20e2 <convertColorSPIData+0x13e>
    1fce:	2300      	movs	r3, #0
	{
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1fd0:	466a      	mov	r2, sp
    1fd2:	1dd1      	adds	r1, r2, #7
    1fd4:	22c0      	movs	r2, #192	; 0xc0
    1fd6:	4694      	mov	ip, r2
    1fd8:	2703      	movs	r7, #3
    1fda:	466a      	mov	r2, sp
    1fdc:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1fde:	4e42      	ldr	r6, [pc, #264]	; (20e8 <convertColorSPIData+0x144>)
    1fe0:	4d42      	ldr	r5, [pc, #264]	; (20ec <convertColorSPIData+0x148>)
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1fe2:	780a      	ldrb	r2, [r1, #0]
    1fe4:	7808      	ldrb	r0, [r1, #0]
    1fe6:	4680      	mov	r8, r0
    1fe8:	0052      	lsls	r2, r2, #1
    1fea:	4660      	mov	r0, ip
    1fec:	4110      	asrs	r0, r2
    1fee:	4652      	mov	r2, sl
    1ff0:	7852      	ldrb	r2, [r2, #1]
    1ff2:	4002      	ands	r2, r0
    1ff4:	4640      	mov	r0, r8
    1ff6:	1a38      	subs	r0, r7, r0
    1ff8:	0040      	lsls	r0, r0, #1
    1ffa:	4102      	asrs	r2, r0
    1ffc:	b2d2      	uxtb	r2, r2
    1ffe:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2000:	7822      	ldrb	r2, [r4, #0]
    2002:	b2d2      	uxtb	r2, r2
    2004:	5cb2      	ldrb	r2, [r6, r2]
    2006:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    2008:	3301      	adds	r3, #1
    200a:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    200c:	780a      	ldrb	r2, [r1, #0]
    200e:	3201      	adds	r2, #1
    2010:	b2d2      	uxtb	r2, r2
    2012:	700a      	strb	r2, [r1, #0]
    2014:	780a      	ldrb	r2, [r1, #0]
    2016:	b2d2      	uxtb	r2, r2
    2018:	2a03      	cmp	r2, #3
    201a:	d9e2      	bls.n	1fe2 <convertColorSPIData+0x3e>
	}
	for(i=0;i<4;i++)
    201c:	466a      	mov	r2, sp
    201e:	2100      	movs	r1, #0
    2020:	71d1      	strb	r1, [r2, #7]
    2022:	3207      	adds	r2, #7
    2024:	7812      	ldrb	r2, [r2, #0]
    2026:	b2d2      	uxtb	r2, r2
    2028:	2a03      	cmp	r2, #3
    202a:	d825      	bhi.n	2078 <convertColorSPIData+0xd4>
	{
		//temp = (0x30>>(i*2));
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    202c:	466a      	mov	r2, sp
    202e:	1dd1      	adds	r1, r2, #7
    2030:	22c0      	movs	r2, #192	; 0xc0
    2032:	4694      	mov	ip, r2
    2034:	2703      	movs	r7, #3
    2036:	466a      	mov	r2, sp
    2038:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    203a:	4e2b      	ldr	r6, [pc, #172]	; (20e8 <convertColorSPIData+0x144>)
    203c:	4d2b      	ldr	r5, [pc, #172]	; (20ec <convertColorSPIData+0x148>)
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    203e:	780a      	ldrb	r2, [r1, #0]
    2040:	7808      	ldrb	r0, [r1, #0]
    2042:	4680      	mov	r8, r0
    2044:	0052      	lsls	r2, r2, #1
    2046:	4660      	mov	r0, ip
    2048:	4110      	asrs	r0, r2
    204a:	4652      	mov	r2, sl
    204c:	7812      	ldrb	r2, [r2, #0]
    204e:	4002      	ands	r2, r0
    2050:	4640      	mov	r0, r8
    2052:	1a38      	subs	r0, r7, r0
    2054:	0040      	lsls	r0, r0, #1
    2056:	4102      	asrs	r2, r0
    2058:	b2d2      	uxtb	r2, r2
    205a:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    205c:	7822      	ldrb	r2, [r4, #0]
    205e:	b2d2      	uxtb	r2, r2
    2060:	5cb2      	ldrb	r2, [r6, r2]
    2062:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    2064:	3301      	adds	r3, #1
    2066:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    2068:	780a      	ldrb	r2, [r1, #0]
    206a:	3201      	adds	r2, #1
    206c:	b2d2      	uxtb	r2, r2
    206e:	700a      	strb	r2, [r1, #0]
    2070:	780a      	ldrb	r2, [r1, #0]
    2072:	b2d2      	uxtb	r2, r2
    2074:	2a03      	cmp	r2, #3
    2076:	d9e2      	bls.n	203e <convertColorSPIData+0x9a>
	}
	for(i=0;i<4;i++)
    2078:	466a      	mov	r2, sp
    207a:	2100      	movs	r1, #0
    207c:	71d1      	strb	r1, [r2, #7]
    207e:	3207      	adds	r2, #7
    2080:	7812      	ldrb	r2, [r2, #0]
    2082:	b2d2      	uxtb	r2, r2
    2084:	2a03      	cmp	r2, #3
    2086:	d825      	bhi.n	20d4 <convertColorSPIData+0x130>
	{
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    2088:	466a      	mov	r2, sp
    208a:	1dd1      	adds	r1, r2, #7
    208c:	22c0      	movs	r2, #192	; 0xc0
    208e:	4694      	mov	ip, r2
    2090:	2703      	movs	r7, #3
    2092:	466a      	mov	r2, sp
    2094:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    2096:	4e14      	ldr	r6, [pc, #80]	; (20e8 <convertColorSPIData+0x144>)
    2098:	4d14      	ldr	r5, [pc, #80]	; (20ec <convertColorSPIData+0x148>)
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    209a:	780a      	ldrb	r2, [r1, #0]
    209c:	7808      	ldrb	r0, [r1, #0]
    209e:	4680      	mov	r8, r0
    20a0:	0052      	lsls	r2, r2, #1
    20a2:	4660      	mov	r0, ip
    20a4:	4110      	asrs	r0, r2
    20a6:	4652      	mov	r2, sl
    20a8:	7892      	ldrb	r2, [r2, #2]
    20aa:	4002      	ands	r2, r0
    20ac:	4640      	mov	r0, r8
    20ae:	1a38      	subs	r0, r7, r0
    20b0:	0040      	lsls	r0, r0, #1
    20b2:	4102      	asrs	r2, r0
    20b4:	b2d2      	uxtb	r2, r2
    20b6:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    20b8:	7822      	ldrb	r2, [r4, #0]
    20ba:	b2d2      	uxtb	r2, r2
    20bc:	5cb2      	ldrb	r2, [r6, r2]
    20be:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    20c0:	3301      	adds	r3, #1
    20c2:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    20c4:	780a      	ldrb	r2, [r1, #0]
    20c6:	3201      	adds	r2, #1
    20c8:	b2d2      	uxtb	r2, r2
    20ca:	700a      	strb	r2, [r1, #0]
    20cc:	780a      	ldrb	r2, [r1, #0]
    20ce:	b2d2      	uxtb	r2, r2
    20d0:	2a03      	cmp	r2, #3
    20d2:	d9e2      	bls.n	209a <convertColorSPIData+0xf6>
	}
	return SPIData;
}
    20d4:	4805      	ldr	r0, [pc, #20]	; (20ec <convertColorSPIData+0x148>)
    20d6:	b002      	add	sp, #8
    20d8:	bc1c      	pop	{r2, r3, r4}
    20da:	4690      	mov	r8, r2
    20dc:	4699      	mov	r9, r3
    20de:	46a2      	mov	sl, r4
    20e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t countSPIData = 0;
    20e2:	2300      	movs	r3, #0
    20e4:	e79a      	b.n	201c <convertColorSPIData+0x78>
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	00002e48 	.word	0x00002e48
    20ec:	20000154 	.word	0x20000154

000020f0 <RGBPI55SetAllLED>:

void RGBPI55SetAllLED(colorInfo*  colorLED)
{
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	46c6      	mov	lr, r8
    20f4:	b500      	push	{lr}
    20f6:	0006      	movs	r6, r0
    20f8:	2560      	movs	r5, #96	; 0x60
	
	//SPIMasterInit();
	
	for(j = 0 ; j < NOLEDS ; j++)
	{
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    20fa:	4b0b      	ldr	r3, [pc, #44]	; (2128 <RGBPI55SetAllLED+0x38>)
    20fc:	4698      	mov	r8, r3
		startArrayAddress   = j*NoBytesLED + STARTZEROS;
		for(i = 0 ; i < NoBytesLED ; i++)
		{
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    20fe:	4c0b      	ldr	r4, [pc, #44]	; (212c <RGBPI55SetAllLED+0x3c>)
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    2100:	0030      	movs	r0, r6
    2102:	47c0      	blx	r8
    2104:	0007      	movs	r7, r0
    2106:	370c      	adds	r7, #12
    2108:	0003      	movs	r3, r0
    210a:	1a28      	subs	r0, r5, r0
    210c:	18c2      	adds	r2, r0, r3
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    210e:	7819      	ldrb	r1, [r3, #0]
    2110:	54a1      	strb	r1, [r4, r2]
    2112:	3301      	adds	r3, #1
		for(i = 0 ; i < NoBytesLED ; i++)
    2114:	42bb      	cmp	r3, r7
    2116:	d1f9      	bne.n	210c <RGBPI55SetAllLED+0x1c>
    2118:	3603      	adds	r6, #3
    211a:	350c      	adds	r5, #12
	for(j = 0 ; j < NOLEDS ; j++)
    211c:	2d84      	cmp	r5, #132	; 0x84
    211e:	d1ef      	bne.n	2100 <RGBPI55SetAllLED+0x10>
	//clearMOSI();
	
	transferOngoing = false;
	transferDone = false;
	*/
}
    2120:	bc04      	pop	{r2}
    2122:	4690      	mov	r8, r2
    2124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	00001fa5 	.word	0x00001fa5
    212c:	200002fc 	.word	0x200002fc

00002130 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2130:	4770      	bx	lr
	...

00002134 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2134:	4b0c      	ldr	r3, [pc, #48]	; (2168 <cpu_irq_enter_critical+0x34>)
    2136:	681b      	ldr	r3, [r3, #0]
    2138:	2b00      	cmp	r3, #0
    213a:	d106      	bne.n	214a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    213c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2140:	2b00      	cmp	r3, #0
    2142:	d007      	beq.n	2154 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2144:	2200      	movs	r2, #0
    2146:	4b09      	ldr	r3, [pc, #36]	; (216c <cpu_irq_enter_critical+0x38>)
    2148:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    214a:	4a07      	ldr	r2, [pc, #28]	; (2168 <cpu_irq_enter_critical+0x34>)
    214c:	6813      	ldr	r3, [r2, #0]
    214e:	3301      	adds	r3, #1
    2150:	6013      	str	r3, [r2, #0]
}
    2152:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2154:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2156:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    215a:	2200      	movs	r2, #0
    215c:	4b04      	ldr	r3, [pc, #16]	; (2170 <cpu_irq_enter_critical+0x3c>)
    215e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2160:	3201      	adds	r2, #1
    2162:	4b02      	ldr	r3, [pc, #8]	; (216c <cpu_irq_enter_critical+0x38>)
    2164:	701a      	strb	r2, [r3, #0]
    2166:	e7f0      	b.n	214a <cpu_irq_enter_critical+0x16>
    2168:	20000160 	.word	0x20000160
    216c:	20000164 	.word	0x20000164
    2170:	20000018 	.word	0x20000018

00002174 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2174:	4b08      	ldr	r3, [pc, #32]	; (2198 <cpu_irq_leave_critical+0x24>)
    2176:	681a      	ldr	r2, [r3, #0]
    2178:	3a01      	subs	r2, #1
    217a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    217c:	681b      	ldr	r3, [r3, #0]
    217e:	2b00      	cmp	r3, #0
    2180:	d109      	bne.n	2196 <cpu_irq_leave_critical+0x22>
    2182:	4b06      	ldr	r3, [pc, #24]	; (219c <cpu_irq_leave_critical+0x28>)
    2184:	781b      	ldrb	r3, [r3, #0]
    2186:	2b00      	cmp	r3, #0
    2188:	d005      	beq.n	2196 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    218a:	2201      	movs	r2, #1
    218c:	4b04      	ldr	r3, [pc, #16]	; (21a0 <cpu_irq_leave_critical+0x2c>)
    218e:	701a      	strb	r2, [r3, #0]
    2190:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2194:	b662      	cpsie	i
	}
}
    2196:	4770      	bx	lr
    2198:	20000160 	.word	0x20000160
    219c:	20000164 	.word	0x20000164
    21a0:	20000018 	.word	0x20000018

000021a4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    21a4:	b510      	push	{r4, lr}
	switch (clock_source) {
    21a6:	2808      	cmp	r0, #8
    21a8:	d803      	bhi.n	21b2 <system_clock_source_get_hz+0xe>
    21aa:	0080      	lsls	r0, r0, #2
    21ac:	4b1c      	ldr	r3, [pc, #112]	; (2220 <system_clock_source_get_hz+0x7c>)
    21ae:	581b      	ldr	r3, [r3, r0]
    21b0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    21b2:	2000      	movs	r0, #0
    21b4:	e032      	b.n	221c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    21b6:	4b1b      	ldr	r3, [pc, #108]	; (2224 <system_clock_source_get_hz+0x80>)
    21b8:	6918      	ldr	r0, [r3, #16]
    21ba:	e02f      	b.n	221c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    21bc:	4b1a      	ldr	r3, [pc, #104]	; (2228 <system_clock_source_get_hz+0x84>)
    21be:	6a1b      	ldr	r3, [r3, #32]
    21c0:	059b      	lsls	r3, r3, #22
    21c2:	0f9b      	lsrs	r3, r3, #30
    21c4:	4819      	ldr	r0, [pc, #100]	; (222c <system_clock_source_get_hz+0x88>)
    21c6:	40d8      	lsrs	r0, r3
    21c8:	e028      	b.n	221c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    21ca:	4b16      	ldr	r3, [pc, #88]	; (2224 <system_clock_source_get_hz+0x80>)
    21cc:	6958      	ldr	r0, [r3, #20]
    21ce:	e025      	b.n	221c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    21d0:	4b14      	ldr	r3, [pc, #80]	; (2224 <system_clock_source_get_hz+0x80>)
    21d2:	681b      	ldr	r3, [r3, #0]
			return 0;
    21d4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    21d6:	079b      	lsls	r3, r3, #30
    21d8:	d520      	bpl.n	221c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    21da:	4913      	ldr	r1, [pc, #76]	; (2228 <system_clock_source_get_hz+0x84>)
    21dc:	2210      	movs	r2, #16
    21de:	68cb      	ldr	r3, [r1, #12]
    21e0:	421a      	tst	r2, r3
    21e2:	d0fc      	beq.n	21de <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    21e4:	4b0f      	ldr	r3, [pc, #60]	; (2224 <system_clock_source_get_hz+0x80>)
    21e6:	681a      	ldr	r2, [r3, #0]
    21e8:	2324      	movs	r3, #36	; 0x24
    21ea:	4013      	ands	r3, r2
    21ec:	2b04      	cmp	r3, #4
    21ee:	d001      	beq.n	21f4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    21f0:	480f      	ldr	r0, [pc, #60]	; (2230 <system_clock_source_get_hz+0x8c>)
    21f2:	e013      	b.n	221c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    21f4:	2000      	movs	r0, #0
    21f6:	4b0f      	ldr	r3, [pc, #60]	; (2234 <system_clock_source_get_hz+0x90>)
    21f8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    21fa:	4b0a      	ldr	r3, [pc, #40]	; (2224 <system_clock_source_get_hz+0x80>)
    21fc:	689b      	ldr	r3, [r3, #8]
    21fe:	041b      	lsls	r3, r3, #16
    2200:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2202:	4358      	muls	r0, r3
    2204:	e00a      	b.n	221c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2206:	2350      	movs	r3, #80	; 0x50
    2208:	4a07      	ldr	r2, [pc, #28]	; (2228 <system_clock_source_get_hz+0x84>)
    220a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    220c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    220e:	075b      	lsls	r3, r3, #29
    2210:	d504      	bpl.n	221c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2212:	4b04      	ldr	r3, [pc, #16]	; (2224 <system_clock_source_get_hz+0x80>)
    2214:	68d8      	ldr	r0, [r3, #12]
    2216:	e001      	b.n	221c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2218:	2080      	movs	r0, #128	; 0x80
    221a:	0200      	lsls	r0, r0, #8
	}
}
    221c:	bd10      	pop	{r4, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	00002e4c 	.word	0x00002e4c
    2224:	20000168 	.word	0x20000168
    2228:	40000800 	.word	0x40000800
    222c:	007a1200 	.word	0x007a1200
    2230:	02dc6c00 	.word	0x02dc6c00
    2234:	000027e9 	.word	0x000027e9

00002238 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2238:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    223a:	490c      	ldr	r1, [pc, #48]	; (226c <system_clock_source_osc8m_set_config+0x34>)
    223c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    223e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2240:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2242:	7840      	ldrb	r0, [r0, #1]
    2244:	2201      	movs	r2, #1
    2246:	4010      	ands	r0, r2
    2248:	0180      	lsls	r0, r0, #6
    224a:	2640      	movs	r6, #64	; 0x40
    224c:	43b3      	bics	r3, r6
    224e:	4303      	orrs	r3, r0
    2250:	402a      	ands	r2, r5
    2252:	01d2      	lsls	r2, r2, #7
    2254:	2080      	movs	r0, #128	; 0x80
    2256:	4383      	bics	r3, r0
    2258:	4313      	orrs	r3, r2
    225a:	2203      	movs	r2, #3
    225c:	4022      	ands	r2, r4
    225e:	0212      	lsls	r2, r2, #8
    2260:	4803      	ldr	r0, [pc, #12]	; (2270 <system_clock_source_osc8m_set_config+0x38>)
    2262:	4003      	ands	r3, r0
    2264:	4313      	orrs	r3, r2
    2266:	620b      	str	r3, [r1, #32]
}
    2268:	bd70      	pop	{r4, r5, r6, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	40000800 	.word	0x40000800
    2270:	fffffcff 	.word	0xfffffcff

00002274 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2274:	b5f0      	push	{r4, r5, r6, r7, lr}
    2276:	46ce      	mov	lr, r9
    2278:	4647      	mov	r7, r8
    227a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    227c:	4b19      	ldr	r3, [pc, #100]	; (22e4 <system_clock_source_osc32k_set_config+0x70>)
    227e:	4699      	mov	r9, r3
    2280:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2282:	7841      	ldrb	r1, [r0, #1]
    2284:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2286:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2288:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    228a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    228c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    228e:	7880      	ldrb	r0, [r0, #2]
    2290:	2101      	movs	r1, #1
    2292:	4008      	ands	r0, r1
    2294:	0080      	lsls	r0, r0, #2
    2296:	2204      	movs	r2, #4
    2298:	4393      	bics	r3, r2
    229a:	4303      	orrs	r3, r0
    229c:	4660      	mov	r0, ip
    229e:	4008      	ands	r0, r1
    22a0:	00c0      	lsls	r0, r0, #3
    22a2:	3204      	adds	r2, #4
    22a4:	4393      	bics	r3, r2
    22a6:	4303      	orrs	r3, r0
    22a8:	0038      	movs	r0, r7
    22aa:	4008      	ands	r0, r1
    22ac:	0180      	lsls	r0, r0, #6
    22ae:	2740      	movs	r7, #64	; 0x40
    22b0:	43bb      	bics	r3, r7
    22b2:	4303      	orrs	r3, r0
    22b4:	0030      	movs	r0, r6
    22b6:	4008      	ands	r0, r1
    22b8:	01c0      	lsls	r0, r0, #7
    22ba:	2680      	movs	r6, #128	; 0x80
    22bc:	43b3      	bics	r3, r6
    22be:	4303      	orrs	r3, r0
    22c0:	2007      	movs	r0, #7
    22c2:	4005      	ands	r5, r0
    22c4:	022d      	lsls	r5, r5, #8
    22c6:	4808      	ldr	r0, [pc, #32]	; (22e8 <system_clock_source_osc32k_set_config+0x74>)
    22c8:	4003      	ands	r3, r0
    22ca:	432b      	orrs	r3, r5
    22cc:	4021      	ands	r1, r4
    22ce:	0309      	lsls	r1, r1, #12
    22d0:	4806      	ldr	r0, [pc, #24]	; (22ec <system_clock_source_osc32k_set_config+0x78>)
    22d2:	4003      	ands	r3, r0
    22d4:	430b      	orrs	r3, r1
    22d6:	464a      	mov	r2, r9
    22d8:	6193      	str	r3, [r2, #24]
}
    22da:	bc0c      	pop	{r2, r3}
    22dc:	4690      	mov	r8, r2
    22de:	4699      	mov	r9, r3
    22e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	40000800 	.word	0x40000800
    22e8:	fffff8ff 	.word	0xfffff8ff
    22ec:	ffffefff 	.word	0xffffefff

000022f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    22f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    22f2:	7a03      	ldrb	r3, [r0, #8]
    22f4:	069b      	lsls	r3, r3, #26
    22f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    22f8:	8942      	ldrh	r2, [r0, #10]
    22fa:	0592      	lsls	r2, r2, #22
    22fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    22fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2300:	4918      	ldr	r1, [pc, #96]	; (2364 <system_clock_source_dfll_set_config+0x74>)
    2302:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2304:	7983      	ldrb	r3, [r0, #6]
    2306:	79c2      	ldrb	r2, [r0, #7]
    2308:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    230a:	8842      	ldrh	r2, [r0, #2]
    230c:	8884      	ldrh	r4, [r0, #4]
    230e:	4322      	orrs	r2, r4
    2310:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2312:	7842      	ldrb	r2, [r0, #1]
    2314:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2316:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2318:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    231a:	7803      	ldrb	r3, [r0, #0]
    231c:	2b04      	cmp	r3, #4
    231e:	d011      	beq.n	2344 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2320:	2b20      	cmp	r3, #32
    2322:	d10e      	bne.n	2342 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2324:	7b03      	ldrb	r3, [r0, #12]
    2326:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2328:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    232a:	4313      	orrs	r3, r2
    232c:	89c2      	ldrh	r2, [r0, #14]
    232e:	0412      	lsls	r2, r2, #16
    2330:	490d      	ldr	r1, [pc, #52]	; (2368 <system_clock_source_dfll_set_config+0x78>)
    2332:	400a      	ands	r2, r1
    2334:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2336:	4a0b      	ldr	r2, [pc, #44]	; (2364 <system_clock_source_dfll_set_config+0x74>)
    2338:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    233a:	6811      	ldr	r1, [r2, #0]
    233c:	4b0b      	ldr	r3, [pc, #44]	; (236c <system_clock_source_dfll_set_config+0x7c>)
    233e:	430b      	orrs	r3, r1
    2340:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2342:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2344:	7b03      	ldrb	r3, [r0, #12]
    2346:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2348:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    234a:	4313      	orrs	r3, r2
    234c:	89c2      	ldrh	r2, [r0, #14]
    234e:	0412      	lsls	r2, r2, #16
    2350:	4905      	ldr	r1, [pc, #20]	; (2368 <system_clock_source_dfll_set_config+0x78>)
    2352:	400a      	ands	r2, r1
    2354:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2356:	4a03      	ldr	r2, [pc, #12]	; (2364 <system_clock_source_dfll_set_config+0x74>)
    2358:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    235a:	6813      	ldr	r3, [r2, #0]
    235c:	2104      	movs	r1, #4
    235e:	430b      	orrs	r3, r1
    2360:	6013      	str	r3, [r2, #0]
    2362:	e7ee      	b.n	2342 <system_clock_source_dfll_set_config+0x52>
    2364:	20000168 	.word	0x20000168
    2368:	03ff0000 	.word	0x03ff0000
    236c:	00000424 	.word	0x00000424

00002370 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2370:	2808      	cmp	r0, #8
    2372:	d803      	bhi.n	237c <system_clock_source_enable+0xc>
    2374:	0080      	lsls	r0, r0, #2
    2376:	4b25      	ldr	r3, [pc, #148]	; (240c <system_clock_source_enable+0x9c>)
    2378:	581b      	ldr	r3, [r3, r0]
    237a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    237c:	2017      	movs	r0, #23
    237e:	e044      	b.n	240a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2380:	4a23      	ldr	r2, [pc, #140]	; (2410 <system_clock_source_enable+0xa0>)
    2382:	6a13      	ldr	r3, [r2, #32]
    2384:	2102      	movs	r1, #2
    2386:	430b      	orrs	r3, r1
    2388:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    238a:	2000      	movs	r0, #0
    238c:	e03d      	b.n	240a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    238e:	4a20      	ldr	r2, [pc, #128]	; (2410 <system_clock_source_enable+0xa0>)
    2390:	6993      	ldr	r3, [r2, #24]
    2392:	2102      	movs	r1, #2
    2394:	430b      	orrs	r3, r1
    2396:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2398:	2000      	movs	r0, #0
		break;
    239a:	e036      	b.n	240a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    239c:	4a1c      	ldr	r2, [pc, #112]	; (2410 <system_clock_source_enable+0xa0>)
    239e:	8a13      	ldrh	r3, [r2, #16]
    23a0:	2102      	movs	r1, #2
    23a2:	430b      	orrs	r3, r1
    23a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    23a6:	2000      	movs	r0, #0
		break;
    23a8:	e02f      	b.n	240a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    23aa:	4a19      	ldr	r2, [pc, #100]	; (2410 <system_clock_source_enable+0xa0>)
    23ac:	8a93      	ldrh	r3, [r2, #20]
    23ae:	2102      	movs	r1, #2
    23b0:	430b      	orrs	r3, r1
    23b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    23b4:	2000      	movs	r0, #0
		break;
    23b6:	e028      	b.n	240a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    23b8:	4916      	ldr	r1, [pc, #88]	; (2414 <system_clock_source_enable+0xa4>)
    23ba:	680b      	ldr	r3, [r1, #0]
    23bc:	2202      	movs	r2, #2
    23be:	4313      	orrs	r3, r2
    23c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    23c2:	4b13      	ldr	r3, [pc, #76]	; (2410 <system_clock_source_enable+0xa0>)
    23c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23c6:	0019      	movs	r1, r3
    23c8:	320e      	adds	r2, #14
    23ca:	68cb      	ldr	r3, [r1, #12]
    23cc:	421a      	tst	r2, r3
    23ce:	d0fc      	beq.n	23ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    23d0:	4a10      	ldr	r2, [pc, #64]	; (2414 <system_clock_source_enable+0xa4>)
    23d2:	6891      	ldr	r1, [r2, #8]
    23d4:	4b0e      	ldr	r3, [pc, #56]	; (2410 <system_clock_source_enable+0xa0>)
    23d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    23d8:	6852      	ldr	r2, [r2, #4]
    23da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    23dc:	2200      	movs	r2, #0
    23de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    23e0:	0019      	movs	r1, r3
    23e2:	3210      	adds	r2, #16
    23e4:	68cb      	ldr	r3, [r1, #12]
    23e6:	421a      	tst	r2, r3
    23e8:	d0fc      	beq.n	23e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    23ea:	4b0a      	ldr	r3, [pc, #40]	; (2414 <system_clock_source_enable+0xa4>)
    23ec:	681b      	ldr	r3, [r3, #0]
    23ee:	b29b      	uxth	r3, r3
    23f0:	4a07      	ldr	r2, [pc, #28]	; (2410 <system_clock_source_enable+0xa0>)
    23f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    23f4:	2000      	movs	r0, #0
    23f6:	e008      	b.n	240a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    23f8:	4905      	ldr	r1, [pc, #20]	; (2410 <system_clock_source_enable+0xa0>)
    23fa:	2244      	movs	r2, #68	; 0x44
    23fc:	5c8b      	ldrb	r3, [r1, r2]
    23fe:	2002      	movs	r0, #2
    2400:	4303      	orrs	r3, r0
    2402:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2404:	2000      	movs	r0, #0
		break;
    2406:	e000      	b.n	240a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2408:	2000      	movs	r0, #0
}
    240a:	4770      	bx	lr
    240c:	00002e70 	.word	0x00002e70
    2410:	40000800 	.word	0x40000800
    2414:	20000168 	.word	0x20000168

00002418 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2418:	b5f0      	push	{r4, r5, r6, r7, lr}
    241a:	46ce      	mov	lr, r9
    241c:	4647      	mov	r7, r8
    241e:	b580      	push	{r7, lr}
    2420:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2422:	22c2      	movs	r2, #194	; 0xc2
    2424:	00d2      	lsls	r2, r2, #3
    2426:	4b4d      	ldr	r3, [pc, #308]	; (255c <system_clock_init+0x144>)
    2428:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    242a:	494d      	ldr	r1, [pc, #308]	; (2560 <system_clock_init+0x148>)
    242c:	684b      	ldr	r3, [r1, #4]
    242e:	221e      	movs	r2, #30
    2430:	4393      	bics	r3, r2
    2432:	3a1c      	subs	r2, #28
    2434:	4313      	orrs	r3, r2
    2436:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2438:	ab01      	add	r3, sp, #4
    243a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    243c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    243e:	4d49      	ldr	r5, [pc, #292]	; (2564 <system_clock_init+0x14c>)
    2440:	b2e0      	uxtb	r0, r4
    2442:	a901      	add	r1, sp, #4
    2444:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2446:	3401      	adds	r4, #1
    2448:	2c18      	cmp	r4, #24
    244a:	d1f9      	bne.n	2440 <system_clock_init+0x28>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    244c:	4c46      	ldr	r4, [pc, #280]	; (2568 <system_clock_init+0x150>)
	SYSCTRL->OSC32K.bit.CALIB =
    244e:	6823      	ldr	r3, [r4, #0]
    2450:	04db      	lsls	r3, r3, #19
    2452:	4942      	ldr	r1, [pc, #264]	; (255c <system_clock_init+0x144>)
    2454:	698a      	ldr	r2, [r1, #24]
    2456:	0e5b      	lsrs	r3, r3, #25
    2458:	041b      	lsls	r3, r3, #16
    245a:	4844      	ldr	r0, [pc, #272]	; (256c <system_clock_init+0x154>)
    245c:	4002      	ands	r2, r0
    245e:	4313      	orrs	r3, r2
    2460:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2462:	a80a      	add	r0, sp, #40	; 0x28
    2464:	2301      	movs	r3, #1
    2466:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2468:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    246a:	2500      	movs	r5, #0
    246c:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    246e:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2470:	3306      	adds	r3, #6
    2472:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    2474:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2476:	4b3e      	ldr	r3, [pc, #248]	; (2570 <system_clock_init+0x158>)
    2478:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    247a:	2004      	movs	r0, #4
    247c:	4b3d      	ldr	r3, [pc, #244]	; (2574 <system_clock_init+0x15c>)
    247e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2480:	ab05      	add	r3, sp, #20
    2482:	2200      	movs	r2, #0
    2484:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2486:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2488:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    248a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    248c:	213f      	movs	r1, #63	; 0x3f
    248e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2490:	393b      	subs	r1, #59	; 0x3b
    2492:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2494:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2496:	6823      	ldr	r3, [r4, #0]
    2498:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    249a:	2b3f      	cmp	r3, #63	; 0x3f
    249c:	d05b      	beq.n	2556 <system_clock_init+0x13e>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    249e:	a805      	add	r0, sp, #20
    24a0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    24a2:	23b7      	movs	r3, #183	; 0xb7
    24a4:	00db      	lsls	r3, r3, #3
    24a6:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    24a8:	2307      	movs	r3, #7
    24aa:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    24ac:	3338      	adds	r3, #56	; 0x38
    24ae:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    24b0:	4b31      	ldr	r3, [pc, #196]	; (2578 <system_clock_init+0x160>)
    24b2:	4798      	blx	r3
	config->run_in_standby  = false;
    24b4:	a804      	add	r0, sp, #16
    24b6:	2500      	movs	r5, #0
    24b8:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    24ba:	2601      	movs	r6, #1
    24bc:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    24be:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    24c0:	4b2e      	ldr	r3, [pc, #184]	; (257c <system_clock_init+0x164>)
    24c2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    24c4:	2006      	movs	r0, #6
    24c6:	4f2b      	ldr	r7, [pc, #172]	; (2574 <system_clock_init+0x15c>)
    24c8:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    24ca:	4b2d      	ldr	r3, [pc, #180]	; (2580 <system_clock_init+0x168>)
    24cc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    24ce:	ac01      	add	r4, sp, #4
    24d0:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    24d2:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    24d4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    24d6:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    24d8:	2304      	movs	r3, #4
    24da:	7023      	strb	r3, [r4, #0]
    24dc:	0021      	movs	r1, r4
    24de:	2001      	movs	r0, #1
    24e0:	4b28      	ldr	r3, [pc, #160]	; (2584 <system_clock_init+0x16c>)
    24e2:	4699      	mov	r9, r3
    24e4:	4798      	blx	r3
    24e6:	2001      	movs	r0, #1
    24e8:	4b27      	ldr	r3, [pc, #156]	; (2588 <system_clock_init+0x170>)
    24ea:	4698      	mov	r8, r3
    24ec:	4798      	blx	r3
	config->division_factor    = 1;
    24ee:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    24f0:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    24f2:	2306      	movs	r3, #6
    24f4:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    24f6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    24f8:	7265      	strb	r5, [r4, #9]
    24fa:	0021      	movs	r1, r4
    24fc:	2003      	movs	r0, #3
    24fe:	47c8      	blx	r9
    2500:	2003      	movs	r0, #3
    2502:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2504:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2506:	0021      	movs	r1, r4
    2508:	2000      	movs	r0, #0
    250a:	4b16      	ldr	r3, [pc, #88]	; (2564 <system_clock_init+0x14c>)
    250c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    250e:	2000      	movs	r0, #0
    2510:	4b1e      	ldr	r3, [pc, #120]	; (258c <system_clock_init+0x174>)
    2512:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2514:	2007      	movs	r0, #7
    2516:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2518:	4910      	ldr	r1, [pc, #64]	; (255c <system_clock_init+0x144>)
    251a:	22d0      	movs	r2, #208	; 0xd0
    251c:	68cb      	ldr	r3, [r1, #12]
    251e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2520:	2bd0      	cmp	r3, #208	; 0xd0
    2522:	d1fb      	bne.n	251c <system_clock_init+0x104>
	PM->CPUSEL.reg = (uint32_t)divider;
    2524:	4a1a      	ldr	r2, [pc, #104]	; (2590 <system_clock_init+0x178>)
    2526:	2300      	movs	r3, #0
    2528:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    252a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    252c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    252e:	72d3      	strb	r3, [r2, #11]
	config->high_when_disabled = false;
    2530:	a901      	add	r1, sp, #4
    2532:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2534:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2536:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2538:	3307      	adds	r3, #7
    253a:	700b      	strb	r3, [r1, #0]
    253c:	3b05      	subs	r3, #5
    253e:	604b      	str	r3, [r1, #4]
    2540:	2000      	movs	r0, #0
    2542:	4b10      	ldr	r3, [pc, #64]	; (2584 <system_clock_init+0x16c>)
    2544:	4798      	blx	r3
    2546:	2000      	movs	r0, #0
    2548:	4b0f      	ldr	r3, [pc, #60]	; (2588 <system_clock_init+0x170>)
    254a:	4798      	blx	r3
#endif
}
    254c:	b00d      	add	sp, #52	; 0x34
    254e:	bc0c      	pop	{r2, r3}
    2550:	4690      	mov	r8, r2
    2552:	4699      	mov	r9, r3
    2554:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2556:	3b20      	subs	r3, #32
    2558:	e7a1      	b.n	249e <system_clock_init+0x86>
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	40000800 	.word	0x40000800
    2560:	41004000 	.word	0x41004000
    2564:	000027cd 	.word	0x000027cd
    2568:	00806024 	.word	0x00806024
    256c:	ff80ffff 	.word	0xff80ffff
    2570:	00002275 	.word	0x00002275
    2574:	00002371 	.word	0x00002371
    2578:	000022f1 	.word	0x000022f1
    257c:	00002239 	.word	0x00002239
    2580:	00002595 	.word	0x00002595
    2584:	000025b9 	.word	0x000025b9
    2588:	00002671 	.word	0x00002671
    258c:	00002741 	.word	0x00002741
    2590:	40000400 	.word	0x40000400

00002594 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2594:	4a06      	ldr	r2, [pc, #24]	; (25b0 <system_gclk_init+0x1c>)
    2596:	6993      	ldr	r3, [r2, #24]
    2598:	2108      	movs	r1, #8
    259a:	430b      	orrs	r3, r1
    259c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    259e:	2201      	movs	r2, #1
    25a0:	4b04      	ldr	r3, [pc, #16]	; (25b4 <system_gclk_init+0x20>)
    25a2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    25a4:	0019      	movs	r1, r3
    25a6:	780b      	ldrb	r3, [r1, #0]
    25a8:	4213      	tst	r3, r2
    25aa:	d1fc      	bne.n	25a6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    25ac:	4770      	bx	lr
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	40000400 	.word	0x40000400
    25b4:	40000c00 	.word	0x40000c00

000025b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    25b8:	b570      	push	{r4, r5, r6, lr}
    25ba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    25bc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    25be:	780d      	ldrb	r5, [r1, #0]
    25c0:	022d      	lsls	r5, r5, #8
    25c2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    25c4:	784b      	ldrb	r3, [r1, #1]
    25c6:	2b00      	cmp	r3, #0
    25c8:	d002      	beq.n	25d0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    25ca:	2380      	movs	r3, #128	; 0x80
    25cc:	02db      	lsls	r3, r3, #11
    25ce:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    25d0:	7a4b      	ldrb	r3, [r1, #9]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d002      	beq.n	25dc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	031b      	lsls	r3, r3, #12
    25da:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    25dc:	6848      	ldr	r0, [r1, #4]
    25de:	2801      	cmp	r0, #1
    25e0:	d910      	bls.n	2604 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    25e2:	1e43      	subs	r3, r0, #1
    25e4:	4218      	tst	r0, r3
    25e6:	d134      	bne.n	2652 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    25e8:	2802      	cmp	r0, #2
    25ea:	d930      	bls.n	264e <system_gclk_gen_set_config+0x96>
    25ec:	2302      	movs	r3, #2
    25ee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    25f0:	3201      	adds	r2, #1
						mask <<= 1) {
    25f2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    25f4:	4298      	cmp	r0, r3
    25f6:	d8fb      	bhi.n	25f0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    25f8:	0212      	lsls	r2, r2, #8
    25fa:	4332      	orrs	r2, r6
    25fc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    25fe:	2380      	movs	r3, #128	; 0x80
    2600:	035b      	lsls	r3, r3, #13
    2602:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2604:	7a0b      	ldrb	r3, [r1, #8]
    2606:	2b00      	cmp	r3, #0
    2608:	d002      	beq.n	2610 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    260a:	2380      	movs	r3, #128	; 0x80
    260c:	039b      	lsls	r3, r3, #14
    260e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2610:	4a13      	ldr	r2, [pc, #76]	; (2660 <system_gclk_gen_set_config+0xa8>)
    2612:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2614:	b25b      	sxtb	r3, r3
    2616:	2b00      	cmp	r3, #0
    2618:	dbfb      	blt.n	2612 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    261a:	4b12      	ldr	r3, [pc, #72]	; (2664 <system_gclk_gen_set_config+0xac>)
    261c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    261e:	4b12      	ldr	r3, [pc, #72]	; (2668 <system_gclk_gen_set_config+0xb0>)
    2620:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2622:	4a0f      	ldr	r2, [pc, #60]	; (2660 <system_gclk_gen_set_config+0xa8>)
    2624:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2626:	b25b      	sxtb	r3, r3
    2628:	2b00      	cmp	r3, #0
    262a:	dbfb      	blt.n	2624 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    262c:	4b0c      	ldr	r3, [pc, #48]	; (2660 <system_gclk_gen_set_config+0xa8>)
    262e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2630:	001a      	movs	r2, r3
    2632:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2634:	b25b      	sxtb	r3, r3
    2636:	2b00      	cmp	r3, #0
    2638:	dbfb      	blt.n	2632 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    263a:	4a09      	ldr	r2, [pc, #36]	; (2660 <system_gclk_gen_set_config+0xa8>)
    263c:	6853      	ldr	r3, [r2, #4]
    263e:	2180      	movs	r1, #128	; 0x80
    2640:	0249      	lsls	r1, r1, #9
    2642:	400b      	ands	r3, r1
    2644:	431d      	orrs	r5, r3
    2646:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2648:	4b08      	ldr	r3, [pc, #32]	; (266c <system_gclk_gen_set_config+0xb4>)
    264a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    264c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    264e:	2200      	movs	r2, #0
    2650:	e7d2      	b.n	25f8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2652:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2654:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	029b      	lsls	r3, r3, #10
    265a:	431d      	orrs	r5, r3
    265c:	e7d2      	b.n	2604 <system_gclk_gen_set_config+0x4c>
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	40000c00 	.word	0x40000c00
    2664:	00002135 	.word	0x00002135
    2668:	40000c08 	.word	0x40000c08
    266c:	00002175 	.word	0x00002175

00002670 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2670:	b510      	push	{r4, lr}
    2672:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2674:	4a0b      	ldr	r2, [pc, #44]	; (26a4 <system_gclk_gen_enable+0x34>)
    2676:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2678:	b25b      	sxtb	r3, r3
    267a:	2b00      	cmp	r3, #0
    267c:	dbfb      	blt.n	2676 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    267e:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <system_gclk_gen_enable+0x38>)
    2680:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2682:	4b0a      	ldr	r3, [pc, #40]	; (26ac <system_gclk_gen_enable+0x3c>)
    2684:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2686:	4a07      	ldr	r2, [pc, #28]	; (26a4 <system_gclk_gen_enable+0x34>)
    2688:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    268a:	b25b      	sxtb	r3, r3
    268c:	2b00      	cmp	r3, #0
    268e:	dbfb      	blt.n	2688 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2690:	4a04      	ldr	r2, [pc, #16]	; (26a4 <system_gclk_gen_enable+0x34>)
    2692:	6851      	ldr	r1, [r2, #4]
    2694:	2380      	movs	r3, #128	; 0x80
    2696:	025b      	lsls	r3, r3, #9
    2698:	430b      	orrs	r3, r1
    269a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    269c:	4b04      	ldr	r3, [pc, #16]	; (26b0 <system_gclk_gen_enable+0x40>)
    269e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26a0:	bd10      	pop	{r4, pc}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	40000c00 	.word	0x40000c00
    26a8:	00002135 	.word	0x00002135
    26ac:	40000c04 	.word	0x40000c04
    26b0:	00002175 	.word	0x00002175

000026b4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26b8:	4a1a      	ldr	r2, [pc, #104]	; (2724 <system_gclk_gen_get_hz+0x70>)
    26ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26bc:	b25b      	sxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	dbfb      	blt.n	26ba <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    26c2:	4b19      	ldr	r3, [pc, #100]	; (2728 <system_gclk_gen_get_hz+0x74>)
    26c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26c6:	4b19      	ldr	r3, [pc, #100]	; (272c <system_gclk_gen_get_hz+0x78>)
    26c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26ca:	4a16      	ldr	r2, [pc, #88]	; (2724 <system_gclk_gen_get_hz+0x70>)
    26cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26ce:	b25b      	sxtb	r3, r3
    26d0:	2b00      	cmp	r3, #0
    26d2:	dbfb      	blt.n	26cc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    26d4:	4e13      	ldr	r6, [pc, #76]	; (2724 <system_gclk_gen_get_hz+0x70>)
    26d6:	6870      	ldr	r0, [r6, #4]
    26d8:	04c0      	lsls	r0, r0, #19
    26da:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    26dc:	4b14      	ldr	r3, [pc, #80]	; (2730 <system_gclk_gen_get_hz+0x7c>)
    26de:	4798      	blx	r3
    26e0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    26e2:	4b12      	ldr	r3, [pc, #72]	; (272c <system_gclk_gen_get_hz+0x78>)
    26e4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    26e6:	6876      	ldr	r6, [r6, #4]
    26e8:	02f6      	lsls	r6, r6, #11
    26ea:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    26ec:	4b11      	ldr	r3, [pc, #68]	; (2734 <system_gclk_gen_get_hz+0x80>)
    26ee:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26f0:	4a0c      	ldr	r2, [pc, #48]	; (2724 <system_gclk_gen_get_hz+0x70>)
    26f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26f4:	b25b      	sxtb	r3, r3
    26f6:	2b00      	cmp	r3, #0
    26f8:	dbfb      	blt.n	26f2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    26fa:	4b0a      	ldr	r3, [pc, #40]	; (2724 <system_gclk_gen_get_hz+0x70>)
    26fc:	689c      	ldr	r4, [r3, #8]
    26fe:	0224      	lsls	r4, r4, #8
    2700:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2702:	4b0d      	ldr	r3, [pc, #52]	; (2738 <system_gclk_gen_get_hz+0x84>)
    2704:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2706:	2e00      	cmp	r6, #0
    2708:	d107      	bne.n	271a <system_gclk_gen_get_hz+0x66>
    270a:	2c01      	cmp	r4, #1
    270c:	d907      	bls.n	271e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    270e:	0021      	movs	r1, r4
    2710:	0028      	movs	r0, r5
    2712:	4b0a      	ldr	r3, [pc, #40]	; (273c <system_gclk_gen_get_hz+0x88>)
    2714:	4798      	blx	r3
    2716:	0005      	movs	r5, r0
    2718:	e001      	b.n	271e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    271a:	3401      	adds	r4, #1
    271c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    271e:	0028      	movs	r0, r5
    2720:	bd70      	pop	{r4, r5, r6, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	40000c00 	.word	0x40000c00
    2728:	00002135 	.word	0x00002135
    272c:	40000c04 	.word	0x40000c04
    2730:	000021a5 	.word	0x000021a5
    2734:	40000c08 	.word	0x40000c08
    2738:	00002175 	.word	0x00002175
    273c:	00002a99 	.word	0x00002a99

00002740 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2740:	b510      	push	{r4, lr}
    2742:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2744:	4b06      	ldr	r3, [pc, #24]	; (2760 <system_gclk_chan_enable+0x20>)
    2746:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2748:	4b06      	ldr	r3, [pc, #24]	; (2764 <system_gclk_chan_enable+0x24>)
    274a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    274c:	4a06      	ldr	r2, [pc, #24]	; (2768 <system_gclk_chan_enable+0x28>)
    274e:	8853      	ldrh	r3, [r2, #2]
    2750:	2180      	movs	r1, #128	; 0x80
    2752:	01c9      	lsls	r1, r1, #7
    2754:	430b      	orrs	r3, r1
    2756:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2758:	4b04      	ldr	r3, [pc, #16]	; (276c <system_gclk_chan_enable+0x2c>)
    275a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    275c:	bd10      	pop	{r4, pc}
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	00002135 	.word	0x00002135
    2764:	40000c02 	.word	0x40000c02
    2768:	40000c00 	.word	0x40000c00
    276c:	00002175 	.word	0x00002175

00002770 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2770:	b510      	push	{r4, lr}
    2772:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2774:	4b0f      	ldr	r3, [pc, #60]	; (27b4 <system_gclk_chan_disable+0x44>)
    2776:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2778:	4b0f      	ldr	r3, [pc, #60]	; (27b8 <system_gclk_chan_disable+0x48>)
    277a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    277c:	4a0f      	ldr	r2, [pc, #60]	; (27bc <system_gclk_chan_disable+0x4c>)
    277e:	8853      	ldrh	r3, [r2, #2]
    2780:	051b      	lsls	r3, r3, #20
    2782:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2784:	8853      	ldrh	r3, [r2, #2]
    2786:	490e      	ldr	r1, [pc, #56]	; (27c0 <system_gclk_chan_disable+0x50>)
    2788:	400b      	ands	r3, r1
    278a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    278c:	8853      	ldrh	r3, [r2, #2]
    278e:	490d      	ldr	r1, [pc, #52]	; (27c4 <system_gclk_chan_disable+0x54>)
    2790:	400b      	ands	r3, r1
    2792:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2794:	0011      	movs	r1, r2
    2796:	2280      	movs	r2, #128	; 0x80
    2798:	01d2      	lsls	r2, r2, #7
    279a:	884b      	ldrh	r3, [r1, #2]
    279c:	4213      	tst	r3, r2
    279e:	d1fc      	bne.n	279a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    27a0:	4906      	ldr	r1, [pc, #24]	; (27bc <system_gclk_chan_disable+0x4c>)
    27a2:	884a      	ldrh	r2, [r1, #2]
    27a4:	0203      	lsls	r3, r0, #8
    27a6:	4806      	ldr	r0, [pc, #24]	; (27c0 <system_gclk_chan_disable+0x50>)
    27a8:	4002      	ands	r2, r0
    27aa:	4313      	orrs	r3, r2
    27ac:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    27ae:	4b06      	ldr	r3, [pc, #24]	; (27c8 <system_gclk_chan_disable+0x58>)
    27b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27b2:	bd10      	pop	{r4, pc}
    27b4:	00002135 	.word	0x00002135
    27b8:	40000c02 	.word	0x40000c02
    27bc:	40000c00 	.word	0x40000c00
    27c0:	fffff0ff 	.word	0xfffff0ff
    27c4:	ffffbfff 	.word	0xffffbfff
    27c8:	00002175 	.word	0x00002175

000027cc <system_gclk_chan_set_config>:
{
    27cc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    27ce:	780c      	ldrb	r4, [r1, #0]
    27d0:	0224      	lsls	r4, r4, #8
    27d2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    27d4:	4b02      	ldr	r3, [pc, #8]	; (27e0 <system_gclk_chan_set_config+0x14>)
    27d6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    27d8:	b2a4      	uxth	r4, r4
    27da:	4b02      	ldr	r3, [pc, #8]	; (27e4 <system_gclk_chan_set_config+0x18>)
    27dc:	805c      	strh	r4, [r3, #2]
}
    27de:	bd10      	pop	{r4, pc}
    27e0:	00002771 	.word	0x00002771
    27e4:	40000c00 	.word	0x40000c00

000027e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    27e8:	b510      	push	{r4, lr}
    27ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27ec:	4b06      	ldr	r3, [pc, #24]	; (2808 <system_gclk_chan_get_hz+0x20>)
    27ee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27f0:	4b06      	ldr	r3, [pc, #24]	; (280c <system_gclk_chan_get_hz+0x24>)
    27f2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    27f4:	4b06      	ldr	r3, [pc, #24]	; (2810 <system_gclk_chan_get_hz+0x28>)
    27f6:	885c      	ldrh	r4, [r3, #2]
    27f8:	0524      	lsls	r4, r4, #20
    27fa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    27fc:	4b05      	ldr	r3, [pc, #20]	; (2814 <system_gclk_chan_get_hz+0x2c>)
    27fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2800:	0020      	movs	r0, r4
    2802:	4b05      	ldr	r3, [pc, #20]	; (2818 <system_gclk_chan_get_hz+0x30>)
    2804:	4798      	blx	r3
}
    2806:	bd10      	pop	{r4, pc}
    2808:	00002135 	.word	0x00002135
    280c:	40000c02 	.word	0x40000c02
    2810:	40000c00 	.word	0x40000c00
    2814:	00002175 	.word	0x00002175
    2818:	000026b5 	.word	0x000026b5

0000281c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    281c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    281e:	78d3      	ldrb	r3, [r2, #3]
    2820:	2b00      	cmp	r3, #0
    2822:	d135      	bne.n	2890 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2824:	7813      	ldrb	r3, [r2, #0]
    2826:	2b80      	cmp	r3, #128	; 0x80
    2828:	d029      	beq.n	287e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    282a:	061b      	lsls	r3, r3, #24
    282c:	2480      	movs	r4, #128	; 0x80
    282e:	0264      	lsls	r4, r4, #9
    2830:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2832:	7854      	ldrb	r4, [r2, #1]
    2834:	2502      	movs	r5, #2
    2836:	43ac      	bics	r4, r5
    2838:	d106      	bne.n	2848 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    283a:	7894      	ldrb	r4, [r2, #2]
    283c:	2c00      	cmp	r4, #0
    283e:	d120      	bne.n	2882 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2840:	2480      	movs	r4, #128	; 0x80
    2842:	02a4      	lsls	r4, r4, #10
    2844:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2846:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2848:	7854      	ldrb	r4, [r2, #1]
    284a:	3c01      	subs	r4, #1
    284c:	2c01      	cmp	r4, #1
    284e:	d91c      	bls.n	288a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2850:	040d      	lsls	r5, r1, #16
    2852:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2854:	24a0      	movs	r4, #160	; 0xa0
    2856:	05e4      	lsls	r4, r4, #23
    2858:	432c      	orrs	r4, r5
    285a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    285c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    285e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2860:	24d0      	movs	r4, #208	; 0xd0
    2862:	0624      	lsls	r4, r4, #24
    2864:	432c      	orrs	r4, r5
    2866:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2868:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    286a:	78d4      	ldrb	r4, [r2, #3]
    286c:	2c00      	cmp	r4, #0
    286e:	d122      	bne.n	28b6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2870:	035b      	lsls	r3, r3, #13
    2872:	d51c      	bpl.n	28ae <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2874:	7893      	ldrb	r3, [r2, #2]
    2876:	2b01      	cmp	r3, #1
    2878:	d01e      	beq.n	28b8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    287a:	6141      	str	r1, [r0, #20]
    287c:	e017      	b.n	28ae <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    287e:	2300      	movs	r3, #0
    2880:	e7d7      	b.n	2832 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2882:	24c0      	movs	r4, #192	; 0xc0
    2884:	02e4      	lsls	r4, r4, #11
    2886:	4323      	orrs	r3, r4
    2888:	e7dd      	b.n	2846 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    288a:	4c0d      	ldr	r4, [pc, #52]	; (28c0 <_system_pinmux_config+0xa4>)
    288c:	4023      	ands	r3, r4
    288e:	e7df      	b.n	2850 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2890:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2892:	040c      	lsls	r4, r1, #16
    2894:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2896:	23a0      	movs	r3, #160	; 0xa0
    2898:	05db      	lsls	r3, r3, #23
    289a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    289c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    289e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    28a0:	23d0      	movs	r3, #208	; 0xd0
    28a2:	061b      	lsls	r3, r3, #24
    28a4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28a6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    28a8:	78d3      	ldrb	r3, [r2, #3]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d103      	bne.n	28b6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28ae:	7853      	ldrb	r3, [r2, #1]
    28b0:	3b01      	subs	r3, #1
    28b2:	2b01      	cmp	r3, #1
    28b4:	d902      	bls.n	28bc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    28b6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    28b8:	6181      	str	r1, [r0, #24]
    28ba:	e7f8      	b.n	28ae <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    28bc:	6081      	str	r1, [r0, #8]
}
    28be:	e7fa      	b.n	28b6 <_system_pinmux_config+0x9a>
    28c0:	fffbffff 	.word	0xfffbffff

000028c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    28c4:	b510      	push	{r4, lr}
    28c6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    28c8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    28ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    28cc:	2900      	cmp	r1, #0
    28ce:	d104      	bne.n	28da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    28d0:	0943      	lsrs	r3, r0, #5
    28d2:	01db      	lsls	r3, r3, #7
    28d4:	4905      	ldr	r1, [pc, #20]	; (28ec <system_pinmux_pin_set_config+0x28>)
    28d6:	468c      	mov	ip, r1
    28d8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    28da:	241f      	movs	r4, #31
    28dc:	4020      	ands	r0, r4
    28de:	2101      	movs	r1, #1
    28e0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    28e2:	0018      	movs	r0, r3
    28e4:	4b02      	ldr	r3, [pc, #8]	; (28f0 <system_pinmux_pin_set_config+0x2c>)
    28e6:	4798      	blx	r3
}
    28e8:	bd10      	pop	{r4, pc}
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	41004400 	.word	0x41004400
    28f0:	0000281d 	.word	0x0000281d

000028f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    28f4:	4770      	bx	lr
	...

000028f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    28f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    28fa:	4b05      	ldr	r3, [pc, #20]	; (2910 <system_init+0x18>)
    28fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    28fe:	4b05      	ldr	r3, [pc, #20]	; (2914 <system_init+0x1c>)
    2900:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2902:	4b05      	ldr	r3, [pc, #20]	; (2918 <system_init+0x20>)
    2904:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2906:	4b05      	ldr	r3, [pc, #20]	; (291c <system_init+0x24>)
    2908:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    290a:	4b05      	ldr	r3, [pc, #20]	; (2920 <system_init+0x28>)
    290c:	4798      	blx	r3
}
    290e:	bd10      	pop	{r4, pc}
    2910:	00002419 	.word	0x00002419
    2914:	00002131 	.word	0x00002131
    2918:	000028f5 	.word	0x000028f5
    291c:	000028f5 	.word	0x000028f5
    2920:	000028f5 	.word	0x000028f5

00002924 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2924:	e7fe      	b.n	2924 <Dummy_Handler>
	...

00002928 <Reset_Handler>:
{
    2928:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    292a:	4a26      	ldr	r2, [pc, #152]	; (29c4 <Reset_Handler+0x9c>)
    292c:	4b26      	ldr	r3, [pc, #152]	; (29c8 <Reset_Handler+0xa0>)
    292e:	429a      	cmp	r2, r3
    2930:	d011      	beq.n	2956 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2932:	001a      	movs	r2, r3
    2934:	4b25      	ldr	r3, [pc, #148]	; (29cc <Reset_Handler+0xa4>)
    2936:	429a      	cmp	r2, r3
    2938:	d20d      	bcs.n	2956 <Reset_Handler+0x2e>
    293a:	4a25      	ldr	r2, [pc, #148]	; (29d0 <Reset_Handler+0xa8>)
    293c:	3303      	adds	r3, #3
    293e:	1a9b      	subs	r3, r3, r2
    2940:	089b      	lsrs	r3, r3, #2
    2942:	3301      	adds	r3, #1
    2944:	009b      	lsls	r3, r3, #2
    2946:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2948:	481f      	ldr	r0, [pc, #124]	; (29c8 <Reset_Handler+0xa0>)
    294a:	491e      	ldr	r1, [pc, #120]	; (29c4 <Reset_Handler+0x9c>)
    294c:	588c      	ldr	r4, [r1, r2]
    294e:	5084      	str	r4, [r0, r2]
    2950:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2952:	429a      	cmp	r2, r3
    2954:	d1fa      	bne.n	294c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2956:	4a1f      	ldr	r2, [pc, #124]	; (29d4 <Reset_Handler+0xac>)
    2958:	4b1f      	ldr	r3, [pc, #124]	; (29d8 <Reset_Handler+0xb0>)
    295a:	429a      	cmp	r2, r3
    295c:	d20a      	bcs.n	2974 <Reset_Handler+0x4c>
    295e:	43d3      	mvns	r3, r2
    2960:	491d      	ldr	r1, [pc, #116]	; (29d8 <Reset_Handler+0xb0>)
    2962:	185b      	adds	r3, r3, r1
    2964:	2103      	movs	r1, #3
    2966:	438b      	bics	r3, r1
    2968:	3304      	adds	r3, #4
    296a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    296c:	2100      	movs	r1, #0
    296e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2970:	4293      	cmp	r3, r2
    2972:	d1fc      	bne.n	296e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2974:	4a19      	ldr	r2, [pc, #100]	; (29dc <Reset_Handler+0xb4>)
    2976:	21ff      	movs	r1, #255	; 0xff
    2978:	4b19      	ldr	r3, [pc, #100]	; (29e0 <Reset_Handler+0xb8>)
    297a:	438b      	bics	r3, r1
    297c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    297e:	39fd      	subs	r1, #253	; 0xfd
    2980:	2390      	movs	r3, #144	; 0x90
    2982:	005b      	lsls	r3, r3, #1
    2984:	4a17      	ldr	r2, [pc, #92]	; (29e4 <Reset_Handler+0xbc>)
    2986:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2988:	4b17      	ldr	r3, [pc, #92]	; (29e8 <Reset_Handler+0xc0>)
    298a:	7b9a      	ldrb	r2, [r3, #14]
    298c:	312e      	adds	r1, #46	; 0x2e
    298e:	438a      	bics	r2, r1
    2990:	2120      	movs	r1, #32
    2992:	430a      	orrs	r2, r1
    2994:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2996:	7b9a      	ldrb	r2, [r3, #14]
    2998:	210c      	movs	r1, #12
    299a:	438a      	bics	r2, r1
    299c:	2108      	movs	r1, #8
    299e:	430a      	orrs	r2, r1
    29a0:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    29a2:	7b9a      	ldrb	r2, [r3, #14]
    29a4:	2103      	movs	r1, #3
    29a6:	438a      	bics	r2, r1
    29a8:	2102      	movs	r1, #2
    29aa:	430a      	orrs	r2, r1
    29ac:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    29ae:	4a0f      	ldr	r2, [pc, #60]	; (29ec <Reset_Handler+0xc4>)
    29b0:	6853      	ldr	r3, [r2, #4]
    29b2:	2180      	movs	r1, #128	; 0x80
    29b4:	430b      	orrs	r3, r1
    29b6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    29b8:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <Reset_Handler+0xc8>)
    29ba:	4798      	blx	r3
        main();
    29bc:	4b0d      	ldr	r3, [pc, #52]	; (29f4 <Reset_Handler+0xcc>)
    29be:	4798      	blx	r3
    29c0:	e7fe      	b.n	29c0 <Reset_Handler+0x98>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00002eb4 	.word	0x00002eb4
    29c8:	20000000 	.word	0x20000000
    29cc:	20000080 	.word	0x20000080
    29d0:	20000004 	.word	0x20000004
    29d4:	20000080 	.word	0x20000080
    29d8:	2000089c 	.word	0x2000089c
    29dc:	e000ed00 	.word	0xe000ed00
    29e0:	00000000 	.word	0x00000000
    29e4:	41007000 	.word	0x41007000
    29e8:	41004800 	.word	0x41004800
    29ec:	41004000 	.word	0x41004000
    29f0:	00002bb1 	.word	0x00002bb1
    29f4:	00002a39 	.word	0x00002a39

000029f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    29f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    29fa:	4a06      	ldr	r2, [pc, #24]	; (2a14 <_sbrk+0x1c>)
    29fc:	6812      	ldr	r2, [r2, #0]
    29fe:	2a00      	cmp	r2, #0
    2a00:	d004      	beq.n	2a0c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2a02:	4a04      	ldr	r2, [pc, #16]	; (2a14 <_sbrk+0x1c>)
    2a04:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2a06:	18c3      	adds	r3, r0, r3
    2a08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2a0a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2a0c:	4902      	ldr	r1, [pc, #8]	; (2a18 <_sbrk+0x20>)
    2a0e:	4a01      	ldr	r2, [pc, #4]	; (2a14 <_sbrk+0x1c>)
    2a10:	6011      	str	r1, [r2, #0]
    2a12:	e7f6      	b.n	2a02 <_sbrk+0xa>
    2a14:	20000180 	.word	0x20000180
    2a18:	20000ca0 	.word	0x20000ca0

00002a1c <setI2CDetect>:
	}

}

void setI2CDetect()
{
    2a1c:	b500      	push	{lr}
    2a1e:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    2a20:	a901      	add	r1, sp, #4
    2a22:	2300      	movs	r3, #0
    2a24:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    2a26:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    2a28:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(DETECT_PIN, &config_port_pin);
    2a2a:	2018      	movs	r0, #24
    2a2c:	4b01      	ldr	r3, [pc, #4]	; (2a34 <setI2CDetect+0x18>)
    2a2e:	4798      	blx	r3
}
    2a30:	b003      	add	sp, #12
    2a32:	bd00      	pop	{pc}
    2a34:	00000e51 	.word	0x00000e51

00002a38 <main>:


int main (void)
{
    2a38:	b570      	push	{r4, r5, r6, lr}
	system_init();
    2a3a:	4b0c      	ldr	r3, [pc, #48]	; (2a6c <main+0x34>)
    2a3c:	4798      	blx	r3
	delay_init();
    2a3e:	4b0c      	ldr	r3, [pc, #48]	; (2a70 <main+0x38>)
    2a40:	4798      	blx	r3
	
	ir_sensor_init();
    2a42:	4b0c      	ldr	r3, [pc, #48]	; (2a74 <main+0x3c>)
    2a44:	4798      	blx	r3
	RGBPI55Init();
    2a46:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <main+0x40>)
    2a48:	4798      	blx	r3
	//delay_cycles_ms(1000);
	setI2CDetect();
    2a4a:	4b0c      	ldr	r3, [pc, #48]	; (2a7c <main+0x44>)
    2a4c:	4798      	blx	r3
	
	
	configure_i2c_slave();
    2a4e:	4b0c      	ldr	r3, [pc, #48]	; (2a80 <main+0x48>)
    2a50:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    2a52:	4b0c      	ldr	r3, [pc, #48]	; (2a84 <main+0x4c>)
    2a54:	4798      	blx	r3
	testTimer();
    2a56:	4b0c      	ldr	r3, [pc, #48]	; (2a88 <main+0x50>)
    2a58:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	while(true) {
		//fadeREDControlled();
		updaeteADDLED();
    2a5a:	4e0c      	ldr	r6, [pc, #48]	; (2a8c <main+0x54>)
		read_all_values();
    2a5c:	4d0c      	ldr	r5, [pc, #48]	; (2a90 <main+0x58>)
		//testADDLED();
		//fadeREDControlled();
		//readI2CDetect();
		//fadeRED();
		delay_ms(10);
    2a5e:	4c0d      	ldr	r4, [pc, #52]	; (2a94 <main+0x5c>)
		updaeteADDLED();
    2a60:	47b0      	blx	r6
		read_all_values();
    2a62:	47a8      	blx	r5
		delay_ms(10);
    2a64:	200a      	movs	r0, #10
    2a66:	47a0      	blx	r4
    2a68:	e7fa      	b.n	2a60 <main+0x28>
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	000028f9 	.word	0x000028f9
    2a70:	00000549 	.word	0x00000549
    2a74:	00001d69 	.word	0x00001d69
    2a78:	00001f89 	.word	0x00001f89
    2a7c:	00002a1d 	.word	0x00002a1d
    2a80:	00001b2d 	.word	0x00001b2d
    2a84:	00001bc5 	.word	0x00001bc5
    2a88:	00000535 	.word	0x00000535
    2a8c:	00000405 	.word	0x00000405
    2a90:	000019b1 	.word	0x000019b1
    2a94:	00000589 	.word	0x00000589

00002a98 <__udivsi3>:
    2a98:	2200      	movs	r2, #0
    2a9a:	0843      	lsrs	r3, r0, #1
    2a9c:	428b      	cmp	r3, r1
    2a9e:	d374      	bcc.n	2b8a <__udivsi3+0xf2>
    2aa0:	0903      	lsrs	r3, r0, #4
    2aa2:	428b      	cmp	r3, r1
    2aa4:	d35f      	bcc.n	2b66 <__udivsi3+0xce>
    2aa6:	0a03      	lsrs	r3, r0, #8
    2aa8:	428b      	cmp	r3, r1
    2aaa:	d344      	bcc.n	2b36 <__udivsi3+0x9e>
    2aac:	0b03      	lsrs	r3, r0, #12
    2aae:	428b      	cmp	r3, r1
    2ab0:	d328      	bcc.n	2b04 <__udivsi3+0x6c>
    2ab2:	0c03      	lsrs	r3, r0, #16
    2ab4:	428b      	cmp	r3, r1
    2ab6:	d30d      	bcc.n	2ad4 <__udivsi3+0x3c>
    2ab8:	22ff      	movs	r2, #255	; 0xff
    2aba:	0209      	lsls	r1, r1, #8
    2abc:	ba12      	rev	r2, r2
    2abe:	0c03      	lsrs	r3, r0, #16
    2ac0:	428b      	cmp	r3, r1
    2ac2:	d302      	bcc.n	2aca <__udivsi3+0x32>
    2ac4:	1212      	asrs	r2, r2, #8
    2ac6:	0209      	lsls	r1, r1, #8
    2ac8:	d065      	beq.n	2b96 <__udivsi3+0xfe>
    2aca:	0b03      	lsrs	r3, r0, #12
    2acc:	428b      	cmp	r3, r1
    2ace:	d319      	bcc.n	2b04 <__udivsi3+0x6c>
    2ad0:	e000      	b.n	2ad4 <__udivsi3+0x3c>
    2ad2:	0a09      	lsrs	r1, r1, #8
    2ad4:	0bc3      	lsrs	r3, r0, #15
    2ad6:	428b      	cmp	r3, r1
    2ad8:	d301      	bcc.n	2ade <__udivsi3+0x46>
    2ada:	03cb      	lsls	r3, r1, #15
    2adc:	1ac0      	subs	r0, r0, r3
    2ade:	4152      	adcs	r2, r2
    2ae0:	0b83      	lsrs	r3, r0, #14
    2ae2:	428b      	cmp	r3, r1
    2ae4:	d301      	bcc.n	2aea <__udivsi3+0x52>
    2ae6:	038b      	lsls	r3, r1, #14
    2ae8:	1ac0      	subs	r0, r0, r3
    2aea:	4152      	adcs	r2, r2
    2aec:	0b43      	lsrs	r3, r0, #13
    2aee:	428b      	cmp	r3, r1
    2af0:	d301      	bcc.n	2af6 <__udivsi3+0x5e>
    2af2:	034b      	lsls	r3, r1, #13
    2af4:	1ac0      	subs	r0, r0, r3
    2af6:	4152      	adcs	r2, r2
    2af8:	0b03      	lsrs	r3, r0, #12
    2afa:	428b      	cmp	r3, r1
    2afc:	d301      	bcc.n	2b02 <__udivsi3+0x6a>
    2afe:	030b      	lsls	r3, r1, #12
    2b00:	1ac0      	subs	r0, r0, r3
    2b02:	4152      	adcs	r2, r2
    2b04:	0ac3      	lsrs	r3, r0, #11
    2b06:	428b      	cmp	r3, r1
    2b08:	d301      	bcc.n	2b0e <__udivsi3+0x76>
    2b0a:	02cb      	lsls	r3, r1, #11
    2b0c:	1ac0      	subs	r0, r0, r3
    2b0e:	4152      	adcs	r2, r2
    2b10:	0a83      	lsrs	r3, r0, #10
    2b12:	428b      	cmp	r3, r1
    2b14:	d301      	bcc.n	2b1a <__udivsi3+0x82>
    2b16:	028b      	lsls	r3, r1, #10
    2b18:	1ac0      	subs	r0, r0, r3
    2b1a:	4152      	adcs	r2, r2
    2b1c:	0a43      	lsrs	r3, r0, #9
    2b1e:	428b      	cmp	r3, r1
    2b20:	d301      	bcc.n	2b26 <__udivsi3+0x8e>
    2b22:	024b      	lsls	r3, r1, #9
    2b24:	1ac0      	subs	r0, r0, r3
    2b26:	4152      	adcs	r2, r2
    2b28:	0a03      	lsrs	r3, r0, #8
    2b2a:	428b      	cmp	r3, r1
    2b2c:	d301      	bcc.n	2b32 <__udivsi3+0x9a>
    2b2e:	020b      	lsls	r3, r1, #8
    2b30:	1ac0      	subs	r0, r0, r3
    2b32:	4152      	adcs	r2, r2
    2b34:	d2cd      	bcs.n	2ad2 <__udivsi3+0x3a>
    2b36:	09c3      	lsrs	r3, r0, #7
    2b38:	428b      	cmp	r3, r1
    2b3a:	d301      	bcc.n	2b40 <__udivsi3+0xa8>
    2b3c:	01cb      	lsls	r3, r1, #7
    2b3e:	1ac0      	subs	r0, r0, r3
    2b40:	4152      	adcs	r2, r2
    2b42:	0983      	lsrs	r3, r0, #6
    2b44:	428b      	cmp	r3, r1
    2b46:	d301      	bcc.n	2b4c <__udivsi3+0xb4>
    2b48:	018b      	lsls	r3, r1, #6
    2b4a:	1ac0      	subs	r0, r0, r3
    2b4c:	4152      	adcs	r2, r2
    2b4e:	0943      	lsrs	r3, r0, #5
    2b50:	428b      	cmp	r3, r1
    2b52:	d301      	bcc.n	2b58 <__udivsi3+0xc0>
    2b54:	014b      	lsls	r3, r1, #5
    2b56:	1ac0      	subs	r0, r0, r3
    2b58:	4152      	adcs	r2, r2
    2b5a:	0903      	lsrs	r3, r0, #4
    2b5c:	428b      	cmp	r3, r1
    2b5e:	d301      	bcc.n	2b64 <__udivsi3+0xcc>
    2b60:	010b      	lsls	r3, r1, #4
    2b62:	1ac0      	subs	r0, r0, r3
    2b64:	4152      	adcs	r2, r2
    2b66:	08c3      	lsrs	r3, r0, #3
    2b68:	428b      	cmp	r3, r1
    2b6a:	d301      	bcc.n	2b70 <__udivsi3+0xd8>
    2b6c:	00cb      	lsls	r3, r1, #3
    2b6e:	1ac0      	subs	r0, r0, r3
    2b70:	4152      	adcs	r2, r2
    2b72:	0883      	lsrs	r3, r0, #2
    2b74:	428b      	cmp	r3, r1
    2b76:	d301      	bcc.n	2b7c <__udivsi3+0xe4>
    2b78:	008b      	lsls	r3, r1, #2
    2b7a:	1ac0      	subs	r0, r0, r3
    2b7c:	4152      	adcs	r2, r2
    2b7e:	0843      	lsrs	r3, r0, #1
    2b80:	428b      	cmp	r3, r1
    2b82:	d301      	bcc.n	2b88 <__udivsi3+0xf0>
    2b84:	004b      	lsls	r3, r1, #1
    2b86:	1ac0      	subs	r0, r0, r3
    2b88:	4152      	adcs	r2, r2
    2b8a:	1a41      	subs	r1, r0, r1
    2b8c:	d200      	bcs.n	2b90 <__udivsi3+0xf8>
    2b8e:	4601      	mov	r1, r0
    2b90:	4152      	adcs	r2, r2
    2b92:	4610      	mov	r0, r2
    2b94:	4770      	bx	lr
    2b96:	e7ff      	b.n	2b98 <__udivsi3+0x100>
    2b98:	b501      	push	{r0, lr}
    2b9a:	2000      	movs	r0, #0
    2b9c:	f000 f806 	bl	2bac <__aeabi_idiv0>
    2ba0:	bd02      	pop	{r1, pc}
    2ba2:	46c0      	nop			; (mov r8, r8)

00002ba4 <__aeabi_uidivmod>:
    2ba4:	2900      	cmp	r1, #0
    2ba6:	d0f7      	beq.n	2b98 <__udivsi3+0x100>
    2ba8:	e776      	b.n	2a98 <__udivsi3>
    2baa:	4770      	bx	lr

00002bac <__aeabi_idiv0>:
    2bac:	4770      	bx	lr
    2bae:	46c0      	nop			; (mov r8, r8)

00002bb0 <__libc_init_array>:
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	2600      	movs	r6, #0
    2bb4:	4d0c      	ldr	r5, [pc, #48]	; (2be8 <__libc_init_array+0x38>)
    2bb6:	4c0d      	ldr	r4, [pc, #52]	; (2bec <__libc_init_array+0x3c>)
    2bb8:	1b64      	subs	r4, r4, r5
    2bba:	10a4      	asrs	r4, r4, #2
    2bbc:	42a6      	cmp	r6, r4
    2bbe:	d109      	bne.n	2bd4 <__libc_init_array+0x24>
    2bc0:	2600      	movs	r6, #0
    2bc2:	f000 f967 	bl	2e94 <_init>
    2bc6:	4d0a      	ldr	r5, [pc, #40]	; (2bf0 <__libc_init_array+0x40>)
    2bc8:	4c0a      	ldr	r4, [pc, #40]	; (2bf4 <__libc_init_array+0x44>)
    2bca:	1b64      	subs	r4, r4, r5
    2bcc:	10a4      	asrs	r4, r4, #2
    2bce:	42a6      	cmp	r6, r4
    2bd0:	d105      	bne.n	2bde <__libc_init_array+0x2e>
    2bd2:	bd70      	pop	{r4, r5, r6, pc}
    2bd4:	00b3      	lsls	r3, r6, #2
    2bd6:	58eb      	ldr	r3, [r5, r3]
    2bd8:	4798      	blx	r3
    2bda:	3601      	adds	r6, #1
    2bdc:	e7ee      	b.n	2bbc <__libc_init_array+0xc>
    2bde:	00b3      	lsls	r3, r6, #2
    2be0:	58eb      	ldr	r3, [r5, r3]
    2be2:	4798      	blx	r3
    2be4:	3601      	adds	r6, #1
    2be6:	e7f2      	b.n	2bce <__libc_init_array+0x1e>
    2be8:	00002ea0 	.word	0x00002ea0
    2bec:	00002ea0 	.word	0x00002ea0
    2bf0:	00002ea0 	.word	0x00002ea0
    2bf4:	00002ea4 	.word	0x00002ea4

00002bf8 <malloc>:
    2bf8:	b510      	push	{r4, lr}
    2bfa:	4b03      	ldr	r3, [pc, #12]	; (2c08 <malloc+0x10>)
    2bfc:	0001      	movs	r1, r0
    2bfe:	6818      	ldr	r0, [r3, #0]
    2c00:	f000 f816 	bl	2c30 <_malloc_r>
    2c04:	bd10      	pop	{r4, pc}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	2000001c 	.word	0x2000001c

00002c0c <memcpy>:
    2c0c:	2300      	movs	r3, #0
    2c0e:	b510      	push	{r4, lr}
    2c10:	429a      	cmp	r2, r3
    2c12:	d100      	bne.n	2c16 <memcpy+0xa>
    2c14:	bd10      	pop	{r4, pc}
    2c16:	5ccc      	ldrb	r4, [r1, r3]
    2c18:	54c4      	strb	r4, [r0, r3]
    2c1a:	3301      	adds	r3, #1
    2c1c:	e7f8      	b.n	2c10 <memcpy+0x4>

00002c1e <memset>:
    2c1e:	0003      	movs	r3, r0
    2c20:	1882      	adds	r2, r0, r2
    2c22:	4293      	cmp	r3, r2
    2c24:	d100      	bne.n	2c28 <memset+0xa>
    2c26:	4770      	bx	lr
    2c28:	7019      	strb	r1, [r3, #0]
    2c2a:	3301      	adds	r3, #1
    2c2c:	e7f9      	b.n	2c22 <memset+0x4>
	...

00002c30 <_malloc_r>:
    2c30:	2303      	movs	r3, #3
    2c32:	b570      	push	{r4, r5, r6, lr}
    2c34:	1ccd      	adds	r5, r1, #3
    2c36:	439d      	bics	r5, r3
    2c38:	3508      	adds	r5, #8
    2c3a:	0006      	movs	r6, r0
    2c3c:	2d0c      	cmp	r5, #12
    2c3e:	d21e      	bcs.n	2c7e <_malloc_r+0x4e>
    2c40:	250c      	movs	r5, #12
    2c42:	42a9      	cmp	r1, r5
    2c44:	d81d      	bhi.n	2c82 <_malloc_r+0x52>
    2c46:	0030      	movs	r0, r6
    2c48:	f000 f862 	bl	2d10 <__malloc_lock>
    2c4c:	4a25      	ldr	r2, [pc, #148]	; (2ce4 <_malloc_r+0xb4>)
    2c4e:	6814      	ldr	r4, [r2, #0]
    2c50:	0021      	movs	r1, r4
    2c52:	2900      	cmp	r1, #0
    2c54:	d119      	bne.n	2c8a <_malloc_r+0x5a>
    2c56:	4c24      	ldr	r4, [pc, #144]	; (2ce8 <_malloc_r+0xb8>)
    2c58:	6823      	ldr	r3, [r4, #0]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d103      	bne.n	2c66 <_malloc_r+0x36>
    2c5e:	0030      	movs	r0, r6
    2c60:	f000 f844 	bl	2cec <_sbrk_r>
    2c64:	6020      	str	r0, [r4, #0]
    2c66:	0029      	movs	r1, r5
    2c68:	0030      	movs	r0, r6
    2c6a:	f000 f83f 	bl	2cec <_sbrk_r>
    2c6e:	1c43      	adds	r3, r0, #1
    2c70:	d12c      	bne.n	2ccc <_malloc_r+0x9c>
    2c72:	230c      	movs	r3, #12
    2c74:	0030      	movs	r0, r6
    2c76:	6033      	str	r3, [r6, #0]
    2c78:	f000 f84b 	bl	2d12 <__malloc_unlock>
    2c7c:	e003      	b.n	2c86 <_malloc_r+0x56>
    2c7e:	2d00      	cmp	r5, #0
    2c80:	dadf      	bge.n	2c42 <_malloc_r+0x12>
    2c82:	230c      	movs	r3, #12
    2c84:	6033      	str	r3, [r6, #0]
    2c86:	2000      	movs	r0, #0
    2c88:	bd70      	pop	{r4, r5, r6, pc}
    2c8a:	680b      	ldr	r3, [r1, #0]
    2c8c:	1b5b      	subs	r3, r3, r5
    2c8e:	d41a      	bmi.n	2cc6 <_malloc_r+0x96>
    2c90:	2b0b      	cmp	r3, #11
    2c92:	d903      	bls.n	2c9c <_malloc_r+0x6c>
    2c94:	600b      	str	r3, [r1, #0]
    2c96:	18cc      	adds	r4, r1, r3
    2c98:	6025      	str	r5, [r4, #0]
    2c9a:	e003      	b.n	2ca4 <_malloc_r+0x74>
    2c9c:	428c      	cmp	r4, r1
    2c9e:	d10e      	bne.n	2cbe <_malloc_r+0x8e>
    2ca0:	6863      	ldr	r3, [r4, #4]
    2ca2:	6013      	str	r3, [r2, #0]
    2ca4:	0030      	movs	r0, r6
    2ca6:	f000 f834 	bl	2d12 <__malloc_unlock>
    2caa:	0020      	movs	r0, r4
    2cac:	2207      	movs	r2, #7
    2cae:	300b      	adds	r0, #11
    2cb0:	1d23      	adds	r3, r4, #4
    2cb2:	4390      	bics	r0, r2
    2cb4:	1ac3      	subs	r3, r0, r3
    2cb6:	d0e7      	beq.n	2c88 <_malloc_r+0x58>
    2cb8:	425a      	negs	r2, r3
    2cba:	50e2      	str	r2, [r4, r3]
    2cbc:	e7e4      	b.n	2c88 <_malloc_r+0x58>
    2cbe:	684b      	ldr	r3, [r1, #4]
    2cc0:	6063      	str	r3, [r4, #4]
    2cc2:	000c      	movs	r4, r1
    2cc4:	e7ee      	b.n	2ca4 <_malloc_r+0x74>
    2cc6:	000c      	movs	r4, r1
    2cc8:	6849      	ldr	r1, [r1, #4]
    2cca:	e7c2      	b.n	2c52 <_malloc_r+0x22>
    2ccc:	2303      	movs	r3, #3
    2cce:	1cc4      	adds	r4, r0, #3
    2cd0:	439c      	bics	r4, r3
    2cd2:	42a0      	cmp	r0, r4
    2cd4:	d0e0      	beq.n	2c98 <_malloc_r+0x68>
    2cd6:	1a21      	subs	r1, r4, r0
    2cd8:	0030      	movs	r0, r6
    2cda:	f000 f807 	bl	2cec <_sbrk_r>
    2cde:	1c43      	adds	r3, r0, #1
    2ce0:	d1da      	bne.n	2c98 <_malloc_r+0x68>
    2ce2:	e7c6      	b.n	2c72 <_malloc_r+0x42>
    2ce4:	20000188 	.word	0x20000188
    2ce8:	2000018c 	.word	0x2000018c

00002cec <_sbrk_r>:
    2cec:	2300      	movs	r3, #0
    2cee:	b570      	push	{r4, r5, r6, lr}
    2cf0:	4c06      	ldr	r4, [pc, #24]	; (2d0c <_sbrk_r+0x20>)
    2cf2:	0005      	movs	r5, r0
    2cf4:	0008      	movs	r0, r1
    2cf6:	6023      	str	r3, [r4, #0]
    2cf8:	f7ff fe7e 	bl	29f8 <_sbrk>
    2cfc:	1c43      	adds	r3, r0, #1
    2cfe:	d103      	bne.n	2d08 <_sbrk_r+0x1c>
    2d00:	6823      	ldr	r3, [r4, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d000      	beq.n	2d08 <_sbrk_r+0x1c>
    2d06:	602b      	str	r3, [r5, #0]
    2d08:	bd70      	pop	{r4, r5, r6, pc}
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	20000898 	.word	0x20000898

00002d10 <__malloc_lock>:
    2d10:	4770      	bx	lr

00002d12 <__malloc_unlock>:
    2d12:	4770      	bx	lr

00002d14 <tc_interrupt_vectors.12390>:
    2d14:	0e0d 0000 07c6 0000 0a12 0000 0a12 0000     ................
    2d24:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2d34:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2d44:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2d54:	0a12 0000 07ae 0000 0a12 0000 0a12 0000     ................
    2d64:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2d74:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2d84:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2d94:	0a12 0000 07be 0000 0a12 0000 0a12 0000     ................
    2da4:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2db4:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2dc4:	0a12 0000 0a12 0000 0a12 0000 0a12 0000     ................
    2dd4:	0a12 0000 07b6 0000 07ce 0000 0796 0000     ................
    2de4:	07a6 0000 079e 0000 0002 0000 0003 0000     ................
    2df4:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    2e04:	000e 0000 000f 0000 000a 0000 000b 0000     ................
    2e14:	ffff 0000 ffff 0000 ffff 0000 ffff 0000     ................
    2e24:	ffff 0000 ffff 0000 ffff 0000 ffff 0000     ................
    2e34:	ffff 0000 ffff 0000 0800 4200 0c00 4200     ...........B...B
    2e44:	1000 4200                                   ...B

00002e48 <SPIDataConertConsArray>:
    2e48:	8e88 eee8 21b6 0000 21b2 0000 21b2 0000     .....!...!...!..
    2e58:	2218 0000 2218 0000 21ca 0000 21bc 0000     ."..."...!...!..
    2e68:	21d0 0000 2206 0000 239c 0000 237c 0000     .!..."...#..|#..
    2e78:	237c 0000 2408 0000 238e 0000 23aa 0000     |#...$...#...#..
    2e88:	2380 0000 23b8 0000 23f8 0000               .#...#...#..

00002e94 <_init>:
    2e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e9a:	bc08      	pop	{r3}
    2e9c:	469e      	mov	lr, r3
    2e9e:	4770      	bx	lr

00002ea0 <__init_array_start>:
    2ea0:	000000b5 	.word	0x000000b5

00002ea4 <_fini>:
    2ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2eaa:	bc08      	pop	{r3}
    2eac:	469e      	mov	lr, r3
    2eae:	4770      	bx	lr

00002eb0 <__fini_array_start>:
    2eb0:	0000008d 	.word	0x0000008d
