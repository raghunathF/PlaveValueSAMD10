
PlaceValueBuckets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002978  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007a4  20000080  00002a00  00020080  2**4
                  ALLOC
  3 .stack        00000404  20000824  000031a4  00020080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   000482c8  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000603f  00000000  00000000  000683c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008c74  00000000  00000000  0006e404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b0  00000000  00000000  00077078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c80  00000000  00000000  00077828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019cd7  00000000  00000000  000784a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014fe4  00000000  00000000  0009217f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000718e5  00000000  00000000  000a7163  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001320  00000000  00000000  00118a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 0c 00 20 f9 23 00 00 f5 23 00 00 f5 23 00 00     (.. .#...#...#..
	...
      2c:	f5 23 00 00 00 00 00 00 00 00 00 00 f5 23 00 00     .#...........#..
      3c:	f5 23 00 00 f5 23 00 00 f5 23 00 00 f5 23 00 00     .#...#...#...#..
      4c:	f5 23 00 00 f5 23 00 00 f5 23 00 00 79 07 00 00     .#...#...#..y...
      5c:	00 00 00 00 f5 23 00 00 0d 11 00 00 1d 11 00 00     .....#..........
      6c:	2d 11 00 00 f5 23 00 00 51 01 00 00 61 01 00 00     -....#..Q...a...
      7c:	b5 06 00 00 f5 23 00 00 f5 23 00 00 f5 23 00 00     .....#...#...#..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000080 	.word	0x20000080
      ac:	00000000 	.word	0x00000000
      b0:	00002978 	.word	0x00002978

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000084 	.word	0x20000084
      e0:	00002978 	.word	0x00002978
      e4:	00002978 	.word	0x00002978
      e8:	00000000 	.word	0x00000000

000000ec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
      ee:	0080      	lsls	r0, r0, #2
      f0:	4b16      	ldr	r3, [pc, #88]	; (14c <_tc_interrupt_handler+0x60>)
      f2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
      f4:	6823      	ldr	r3, [r4, #0]
      f6:	7b9d      	ldrb	r5, [r3, #14]
      f8:	7e22      	ldrb	r2, [r4, #24]
      fa:	7e63      	ldrb	r3, [r4, #25]
      fc:	4013      	ands	r3, r2
      fe:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     100:	07eb      	lsls	r3, r5, #31
     102:	d406      	bmi.n	112 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     104:	07ab      	lsls	r3, r5, #30
     106:	d40b      	bmi.n	120 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     108:	06eb      	lsls	r3, r5, #27
     10a:	d410      	bmi.n	12e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     10c:	06ab      	lsls	r3, r5, #26
     10e:	d415      	bmi.n	13c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     110:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     112:	0020      	movs	r0, r4
     114:	68a3      	ldr	r3, [r4, #8]
     116:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     118:	2301      	movs	r3, #1
     11a:	6822      	ldr	r2, [r4, #0]
     11c:	7393      	strb	r3, [r2, #14]
     11e:	e7f1      	b.n	104 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     120:	0020      	movs	r0, r4
     122:	68e3      	ldr	r3, [r4, #12]
     124:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     126:	2302      	movs	r3, #2
     128:	6822      	ldr	r2, [r4, #0]
     12a:	7393      	strb	r3, [r2, #14]
     12c:	e7ec      	b.n	108 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     12e:	0020      	movs	r0, r4
     130:	6923      	ldr	r3, [r4, #16]
     132:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     134:	2310      	movs	r3, #16
     136:	6822      	ldr	r2, [r4, #0]
     138:	7393      	strb	r3, [r2, #14]
     13a:	e7e7      	b.n	10c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     13c:	0020      	movs	r0, r4
     13e:	6963      	ldr	r3, [r4, #20]
     140:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     142:	6823      	ldr	r3, [r4, #0]
     144:	2220      	movs	r2, #32
     146:	739a      	strb	r2, [r3, #14]
}
     148:	e7e2      	b.n	110 <_tc_interrupt_handler+0x24>
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	20000184 	.word	0x20000184

00000150 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     150:	b510      	push	{r4, lr}
     152:	2000      	movs	r0, #0
     154:	4b01      	ldr	r3, [pc, #4]	; (15c <TC1_Handler+0xc>)
     156:	4798      	blx	r3
     158:	bd10      	pop	{r4, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	000000ed 	.word	0x000000ed

00000160 <TC2_Handler>:
     160:	b510      	push	{r4, lr}
     162:	2001      	movs	r0, #1
     164:	4b01      	ldr	r3, [pc, #4]	; (16c <TC2_Handler+0xc>)
     166:	4798      	blx	r3
     168:	bd10      	pop	{r4, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	000000ed 	.word	0x000000ed

00000170 <fadeREDControlled>:
}



void fadeREDControlled()
{
     170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile static colorInfo testColor[3];
	uint8_t i,j,k =0;
	for(k=0;k<3;k++)
     172:	2500      	movs	r5, #0
{
     174:	2600      	movs	r6, #0
					testColor[j].GBrightness =	i;
					testColor[j].BBrightness =	i;
				}
				else
				{
					testColor[j].RBrightness =	0;
     176:	4f15      	ldr	r7, [pc, #84]	; (1cc <fadeREDControlled+0x5c>)
     178:	e024      	b.n	1c4 <fadeREDControlled+0x54>
					testColor[j].RBrightness =	i;
     17a:	0053      	lsls	r3, r2, #1
     17c:	189b      	adds	r3, r3, r2
     17e:	4913      	ldr	r1, [pc, #76]	; (1cc <fadeREDControlled+0x5c>)
     180:	545c      	strb	r4, [r3, r1]
					testColor[j].GBrightness =	i;
     182:	468c      	mov	ip, r1
     184:	4463      	add	r3, ip
     186:	705c      	strb	r4, [r3, #1]
					testColor[j].BBrightness =	i;
     188:	709c      	strb	r4, [r3, #2]
     18a:	e013      	b.n	1b4 <fadeREDControlled+0x44>
					testColor[j].GBrightness =	0;
					testColor[j].BBrightness =	0;
				}
			}
			RGBPI55SetAllLED(testColor);
     18c:	480f      	ldr	r0, [pc, #60]	; (1cc <fadeREDControlled+0x5c>)
     18e:	4b10      	ldr	r3, [pc, #64]	; (1d0 <fadeREDControlled+0x60>)
     190:	4798      	blx	r3
			delay_ms(1);
     192:	2001      	movs	r0, #1
     194:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <fadeREDControlled+0x64>)
     196:	4798      	blx	r3
		for(i=0;i<255;i++)
     198:	3401      	adds	r4, #1
     19a:	b2e4      	uxtb	r4, r4
     19c:	2cff      	cmp	r4, #255	; 0xff
     19e:	d00d      	beq.n	1bc <fadeREDControlled+0x4c>
{
     1a0:	2200      	movs	r2, #0
				if(k==j)
     1a2:	b2d3      	uxtb	r3, r2
     1a4:	42ab      	cmp	r3, r5
     1a6:	d0e8      	beq.n	17a <fadeREDControlled+0xa>
					testColor[j].RBrightness =	0;
     1a8:	0053      	lsls	r3, r2, #1
     1aa:	189b      	adds	r3, r3, r2
     1ac:	55de      	strb	r6, [r3, r7]
					testColor[j].GBrightness =	0;
     1ae:	18fb      	adds	r3, r7, r3
     1b0:	705e      	strb	r6, [r3, #1]
					testColor[j].BBrightness =	0;
     1b2:	709e      	strb	r6, [r3, #2]
     1b4:	3201      	adds	r2, #1
			for(j=0;j<3;j++)
     1b6:	2a03      	cmp	r2, #3
     1b8:	d1f3      	bne.n	1a2 <fadeREDControlled+0x32>
     1ba:	e7e7      	b.n	18c <fadeREDControlled+0x1c>
	for(k=0;k<3;k++)
     1bc:	3501      	adds	r5, #1
     1be:	b2ed      	uxtb	r5, r5
     1c0:	2d03      	cmp	r5, #3
     1c2:	d001      	beq.n	1c8 <fadeREDControlled+0x58>
{
     1c4:	0034      	movs	r4, r6
     1c6:	e7eb      	b.n	1a0 <fadeREDControlled+0x30>
		}
	}
}
     1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	2000009c 	.word	0x2000009c
     1d0:	00001d75 	.word	0x00001d75
     1d4:	00000219 	.word	0x00000219

000001d8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     1d8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     1da:	2000      	movs	r0, #0
     1dc:	4b08      	ldr	r3, [pc, #32]	; (200 <delay_init+0x28>)
     1de:	4798      	blx	r3
     1e0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     1e2:	4c08      	ldr	r4, [pc, #32]	; (204 <delay_init+0x2c>)
     1e4:	21fa      	movs	r1, #250	; 0xfa
     1e6:	0089      	lsls	r1, r1, #2
     1e8:	47a0      	blx	r4
     1ea:	4b07      	ldr	r3, [pc, #28]	; (208 <delay_init+0x30>)
     1ec:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     1ee:	4907      	ldr	r1, [pc, #28]	; (20c <delay_init+0x34>)
     1f0:	0028      	movs	r0, r5
     1f2:	47a0      	blx	r4
     1f4:	4b06      	ldr	r3, [pc, #24]	; (210 <delay_init+0x38>)
     1f6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     1f8:	2205      	movs	r2, #5
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <delay_init+0x3c>)
     1fc:	601a      	str	r2, [r3, #0]
}
     1fe:	bd70      	pop	{r4, r5, r6, pc}
     200:	00002185 	.word	0x00002185
     204:	00002561 	.word	0x00002561
     208:	20000000 	.word	0x20000000
     20c:	000f4240 	.word	0x000f4240
     210:	20000004 	.word	0x20000004
     214:	e000e010 	.word	0xe000e010

00000218 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     218:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     21a:	4b08      	ldr	r3, [pc, #32]	; (23c <delay_cycles_ms+0x24>)
     21c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     21e:	4a08      	ldr	r2, [pc, #32]	; (240 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     220:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     222:	2180      	movs	r1, #128	; 0x80
     224:	0249      	lsls	r1, r1, #9
	while (n--) {
     226:	3801      	subs	r0, #1
     228:	d307      	bcc.n	23a <delay_cycles_ms+0x22>
	if (n > 0) {
     22a:	2c00      	cmp	r4, #0
     22c:	d0fb      	beq.n	226 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     22e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     230:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     232:	6813      	ldr	r3, [r2, #0]
     234:	420b      	tst	r3, r1
     236:	d0fc      	beq.n	232 <delay_cycles_ms+0x1a>
     238:	e7f5      	b.n	226 <delay_cycles_ms+0xe>
	}
}
     23a:	bd30      	pop	{r4, r5, pc}
     23c:	20000000 	.word	0x20000000
     240:	e000e010 	.word	0xe000e010

00000244 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     244:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     246:	2200      	movs	r2, #0
     248:	2300      	movs	r3, #0
     24a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     24c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     24e:	2100      	movs	r1, #0
     250:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     252:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     254:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     256:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     258:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     25a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     25c:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     25e:	24c0      	movs	r4, #192	; 0xc0
     260:	0164      	lsls	r4, r4, #5
     262:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     264:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     266:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     268:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     26a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     26c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     26e:	242a      	movs	r4, #42	; 0x2a
     270:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     272:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     274:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     276:	3c06      	subs	r4, #6
     278:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     27a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     27c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     27e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     280:	232b      	movs	r3, #43	; 0x2b
     282:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     284:	3301      	adds	r3, #1
     286:	54c1      	strb	r1, [r0, r3]
}
     288:	bd10      	pop	{r4, pc}
	...

0000028c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
     28e:	46d6      	mov	lr, sl
     290:	464f      	mov	r7, r9
     292:	4646      	mov	r6, r8
     294:	b5c0      	push	{r6, r7, lr}
     296:	b096      	sub	sp, #88	; 0x58
     298:	0007      	movs	r7, r0
     29a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     29c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     29e:	4ac6      	ldr	r2, [pc, #792]	; (5b8 <STACK_SIZE+0x1b8>)
     2a0:	6a10      	ldr	r0, [r2, #32]
     2a2:	2380      	movs	r3, #128	; 0x80
     2a4:	005b      	lsls	r3, r3, #1
     2a6:	4303      	orrs	r3, r0
     2a8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2aa:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     2ac:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     2ae:	07db      	lsls	r3, r3, #31
     2b0:	d505      	bpl.n	2be <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     2b2:	b016      	add	sp, #88	; 0x58
     2b4:	bc1c      	pop	{r2, r3, r4}
     2b6:	4690      	mov	r8, r2
     2b8:	4699      	mov	r9, r3
     2ba:	46a2      	mov	sl, r4
     2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2be:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2c0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2c2:	079b      	lsls	r3, r3, #30
     2c4:	d4f5      	bmi.n	2b2 <adc_init+0x26>
	module_inst->reference = config->reference;
     2c6:	7873      	ldrb	r3, [r6, #1]
     2c8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2ca:	2b00      	cmp	r3, #0
     2cc:	d104      	bne.n	2d8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     2ce:	4abb      	ldr	r2, [pc, #748]	; (5bc <STACK_SIZE+0x1bc>)
     2d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     2d2:	2104      	movs	r1, #4
     2d4:	430b      	orrs	r3, r1
     2d6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     2d8:	2300      	movs	r3, #0
     2da:	60bb      	str	r3, [r7, #8]
     2dc:	60fb      	str	r3, [r7, #12]
     2de:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     2e0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     2e2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     2e4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     2e6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     2e8:	4bb5      	ldr	r3, [pc, #724]	; (5c0 <STACK_SIZE+0x1c0>)
     2ea:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     2ec:	232a      	movs	r3, #42	; 0x2a
     2ee:	5cf3      	ldrb	r3, [r6, r3]
     2f0:	2b00      	cmp	r3, #0
     2f2:	d105      	bne.n	300 <adc_init+0x74>
     2f4:	7d33      	ldrb	r3, [r6, #20]
     2f6:	2b00      	cmp	r3, #0
     2f8:	d102      	bne.n	300 <adc_init+0x74>
		module_inst->software_trigger = true;
     2fa:	3301      	adds	r3, #1
     2fc:	777b      	strb	r3, [r7, #29]
     2fe:	e001      	b.n	304 <adc_init+0x78>
		module_inst->software_trigger = false;
     300:	2300      	movs	r3, #0
     302:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     304:	683b      	ldr	r3, [r7, #0]
     306:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     308:	7833      	ldrb	r3, [r6, #0]
     30a:	466a      	mov	r2, sp
     30c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     30e:	4669      	mov	r1, sp
     310:	2013      	movs	r0, #19
     312:	4bac      	ldr	r3, [pc, #688]	; (5c4 <STACK_SIZE+0x1c4>)
     314:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     316:	2013      	movs	r0, #19
     318:	4bab      	ldr	r3, [pc, #684]	; (5c8 <STACK_SIZE+0x1c8>)
     31a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     31c:	232c      	movs	r3, #44	; 0x2c
     31e:	5cf2      	ldrb	r2, [r6, r3]
     320:	2a00      	cmp	r2, #0
     322:	d054      	beq.n	3ce <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     324:	3b01      	subs	r3, #1
     326:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     328:	7b33      	ldrb	r3, [r6, #12]
     32a:	18eb      	adds	r3, r5, r3
     32c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     32e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     330:	b2c9      	uxtb	r1, r1
     332:	428b      	cmp	r3, r1
     334:	d221      	bcs.n	37a <adc_init+0xee>
     336:	1952      	adds	r2, r2, r5
     338:	b2d3      	uxtb	r3, r2
     33a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     33c:	4ba3      	ldr	r3, [pc, #652]	; (5cc <STACK_SIZE+0x1cc>)
     33e:	469a      	mov	sl, r3
     340:	e003      	b.n	34a <adc_init+0xbe>
			offset++;
     342:	3501      	adds	r5, #1
     344:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     346:	454d      	cmp	r5, r9
     348:	d017      	beq.n	37a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     34a:	240f      	movs	r4, #15
     34c:	402c      	ands	r4, r5
     34e:	7b33      	ldrb	r3, [r6, #12]
     350:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     352:	2250      	movs	r2, #80	; 0x50
     354:	499e      	ldr	r1, [pc, #632]	; (5d0 <STACK_SIZE+0x1d0>)
     356:	a802      	add	r0, sp, #8
     358:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     35a:	2c09      	cmp	r4, #9
     35c:	d8f1      	bhi.n	342 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     35e:	00a4      	lsls	r4, r4, #2
     360:	ab02      	add	r3, sp, #8
     362:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     364:	a901      	add	r1, sp, #4
     366:	2300      	movs	r3, #0
     368:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     36a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     36c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     36e:	3301      	adds	r3, #1
     370:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     372:	b2c0      	uxtb	r0, r0
     374:	4b97      	ldr	r3, [pc, #604]	; (5d4 <STACK_SIZE+0x1d4>)
     376:	4798      	blx	r3
     378:	e7e3      	b.n	342 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     37a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     37c:	2250      	movs	r2, #80	; 0x50
     37e:	4994      	ldr	r1, [pc, #592]	; (5d0 <STACK_SIZE+0x1d0>)
     380:	a802      	add	r0, sp, #8
     382:	4b92      	ldr	r3, [pc, #584]	; (5cc <STACK_SIZE+0x1cc>)
     384:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     386:	2c09      	cmp	r4, #9
     388:	d913      	bls.n	3b2 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     38a:	7d73      	ldrb	r3, [r6, #21]
     38c:	009b      	lsls	r3, r3, #2
     38e:	b2db      	uxtb	r3, r3
     390:	4642      	mov	r2, r8
     392:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     394:	7db3      	ldrb	r3, [r6, #22]
     396:	01db      	lsls	r3, r3, #7
     398:	7872      	ldrb	r2, [r6, #1]
     39a:	4313      	orrs	r3, r2
     39c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     39e:	4642      	mov	r2, r8
     3a0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     3a2:	7933      	ldrb	r3, [r6, #4]
     3a4:	2b34      	cmp	r3, #52	; 0x34
     3a6:	d900      	bls.n	3aa <adc_init+0x11e>
     3a8:	e17b      	b.n	6a2 <STACK_SIZE+0x2a2>
     3aa:	009b      	lsls	r3, r3, #2
     3ac:	4a8a      	ldr	r2, [pc, #552]	; (5d8 <STACK_SIZE+0x1d8>)
     3ae:	58d3      	ldr	r3, [r2, r3]
     3b0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3b2:	00a4      	lsls	r4, r4, #2
     3b4:	ab02      	add	r3, sp, #8
     3b6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3b8:	a901      	add	r1, sp, #4
     3ba:	2300      	movs	r3, #0
     3bc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3be:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3c0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3c2:	3301      	adds	r3, #1
     3c4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3c6:	b2c0      	uxtb	r0, r0
     3c8:	4b82      	ldr	r3, [pc, #520]	; (5d4 <STACK_SIZE+0x1d4>)
     3ca:	4798      	blx	r3
     3cc:	e7dd      	b.n	38a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     3ce:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     3d0:	2250      	movs	r2, #80	; 0x50
     3d2:	497f      	ldr	r1, [pc, #508]	; (5d0 <STACK_SIZE+0x1d0>)
     3d4:	a802      	add	r0, sp, #8
     3d6:	4b7d      	ldr	r3, [pc, #500]	; (5cc <STACK_SIZE+0x1cc>)
     3d8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3da:	2c09      	cmp	r4, #9
     3dc:	d915      	bls.n	40a <STACK_SIZE+0xa>
		_adc_configure_ain_pin(config->negative_input);
     3de:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     3e0:	2250      	movs	r2, #80	; 0x50
     3e2:	497b      	ldr	r1, [pc, #492]	; (5d0 <STACK_SIZE+0x1d0>)
     3e4:	a802      	add	r0, sp, #8
     3e6:	4b79      	ldr	r3, [pc, #484]	; (5cc <STACK_SIZE+0x1cc>)
     3e8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ea:	2c09      	cmp	r4, #9
     3ec:	d8cd      	bhi.n	38a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3ee:	00a4      	lsls	r4, r4, #2
     3f0:	ab02      	add	r3, sp, #8
     3f2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3f4:	a901      	add	r1, sp, #4
     3f6:	2300      	movs	r3, #0
     3f8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3fa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3fc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3fe:	3301      	adds	r3, #1
     400:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     402:	b2c0      	uxtb	r0, r0
     404:	4b73      	ldr	r3, [pc, #460]	; (5d4 <STACK_SIZE+0x1d4>)
     406:	4798      	blx	r3
     408:	e7bf      	b.n	38a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     40a:	00a4      	lsls	r4, r4, #2
     40c:	ab02      	add	r3, sp, #8
     40e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     410:	a901      	add	r1, sp, #4
     412:	2300      	movs	r3, #0
     414:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     416:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     418:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     41a:	3301      	adds	r3, #1
     41c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     41e:	b2c0      	uxtb	r0, r0
     420:	4b6c      	ldr	r3, [pc, #432]	; (5d4 <STACK_SIZE+0x1d4>)
     422:	4798      	blx	r3
     424:	e7db      	b.n	3de <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     426:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     428:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     42a:	2102      	movs	r1, #2
     42c:	e01a      	b.n	464 <STACK_SIZE+0x64>
		adjres = config->divide_result;
     42e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     430:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     432:	2410      	movs	r4, #16
     434:	e016      	b.n	464 <STACK_SIZE+0x64>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     436:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     438:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     43a:	2101      	movs	r1, #1
     43c:	e012      	b.n	464 <STACK_SIZE+0x64>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     43e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     440:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     442:	2100      	movs	r1, #0
     444:	e00e      	b.n	464 <STACK_SIZE+0x64>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     446:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     448:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     44a:	2100      	movs	r1, #0
     44c:	e00a      	b.n	464 <STACK_SIZE+0x64>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     44e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     450:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     452:	2100      	movs	r1, #0
     454:	e006      	b.n	464 <STACK_SIZE+0x64>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     456:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     458:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     45a:	2100      	movs	r1, #0
     45c:	e002      	b.n	464 <STACK_SIZE+0x64>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     45e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     460:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     462:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     464:	0109      	lsls	r1, r1, #4
     466:	2270      	movs	r2, #112	; 0x70
     468:	400a      	ands	r2, r1
     46a:	4313      	orrs	r3, r2
     46c:	4642      	mov	r2, r8
     46e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     470:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     472:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     474:	2b3f      	cmp	r3, #63	; 0x3f
     476:	d900      	bls.n	47a <STACK_SIZE+0x7a>
     478:	e71b      	b.n	2b2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     47a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     47c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     47e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     480:	b25b      	sxtb	r3, r3
     482:	2b00      	cmp	r3, #0
     484:	dbfb      	blt.n	47e <STACK_SIZE+0x7e>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     486:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     488:	8872      	ldrh	r2, [r6, #2]
     48a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     48c:	2224      	movs	r2, #36	; 0x24
     48e:	5cb2      	ldrb	r2, [r6, r2]
     490:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     492:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     494:	7d32      	ldrb	r2, [r6, #20]
     496:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     498:	4313      	orrs	r3, r2
     49a:	7cb2      	ldrb	r2, [r6, #18]
     49c:	0052      	lsls	r2, r2, #1
     49e:	4313      	orrs	r3, r2
     4a0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     4a2:	4642      	mov	r2, r8
     4a4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     4a6:	7e33      	ldrb	r3, [r6, #24]
     4a8:	2b00      	cmp	r3, #0
     4aa:	d020      	beq.n	4ee <STACK_SIZE+0xee>
		switch (resolution) {
     4ac:	2c10      	cmp	r4, #16
     4ae:	d100      	bne.n	4b2 <STACK_SIZE+0xb2>
     4b0:	e0d9      	b.n	666 <STACK_SIZE+0x266>
     4b2:	d800      	bhi.n	4b6 <STACK_SIZE+0xb6>
     4b4:	e098      	b.n	5e8 <STACK_SIZE+0x1e8>
     4b6:	2c20      	cmp	r4, #32
     4b8:	d100      	bne.n	4bc <STACK_SIZE+0xbc>
     4ba:	e0b6      	b.n	62a <STACK_SIZE+0x22a>
     4bc:	2c30      	cmp	r4, #48	; 0x30
     4be:	d116      	bne.n	4ee <STACK_SIZE+0xee>
			if (config->differential_mode &&
     4c0:	7cf2      	ldrb	r2, [r6, #19]
     4c2:	2a00      	cmp	r2, #0
     4c4:	d00a      	beq.n	4dc <STACK_SIZE+0xdc>
					(config->window.window_lower_value > 127 ||
     4c6:	69f2      	ldr	r2, [r6, #28]
     4c8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4ca:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4cc:	2aff      	cmp	r2, #255	; 0xff
     4ce:	d900      	bls.n	4d2 <STACK_SIZE+0xd2>
     4d0:	e6ef      	b.n	2b2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     4d2:	6a32      	ldr	r2, [r6, #32]
     4d4:	3280      	adds	r2, #128	; 0x80
     4d6:	2aff      	cmp	r2, #255	; 0xff
     4d8:	d900      	bls.n	4dc <STACK_SIZE+0xdc>
     4da:	e6ea      	b.n	2b2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     4dc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4de:	69f2      	ldr	r2, [r6, #28]
     4e0:	2aff      	cmp	r2, #255	; 0xff
     4e2:	dd00      	ble.n	4e6 <STACK_SIZE+0xe6>
     4e4:	e6e5      	b.n	2b2 <adc_init+0x26>
     4e6:	6a32      	ldr	r2, [r6, #32]
     4e8:	2aff      	cmp	r2, #255	; 0xff
     4ea:	dd00      	ble.n	4ee <STACK_SIZE+0xee>
     4ec:	e6e1      	b.n	2b2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4ee:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4f0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     4f2:	b252      	sxtb	r2, r2
     4f4:	2a00      	cmp	r2, #0
     4f6:	dbfb      	blt.n	4f0 <STACK_SIZE+0xf0>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4f8:	4642      	mov	r2, r8
     4fa:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4fc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4fe:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     500:	b25b      	sxtb	r3, r3
     502:	2b00      	cmp	r3, #0
     504:	dbfb      	blt.n	4fe <STACK_SIZE+0xfe>
	adc_module->WINLT.reg =
     506:	8bb3      	ldrh	r3, [r6, #28]
     508:	4642      	mov	r2, r8
     50a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     50c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     50e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     510:	b25b      	sxtb	r3, r3
     512:	2b00      	cmp	r3, #0
     514:	dbfb      	blt.n	50e <STACK_SIZE+0x10e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     516:	8c33      	ldrh	r3, [r6, #32]
     518:	4642      	mov	r2, r8
     51a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     51c:	232c      	movs	r3, #44	; 0x2c
     51e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     520:	2b00      	cmp	r3, #0
     522:	d005      	beq.n	530 <STACK_SIZE+0x130>
		inputs_to_scan--;
     524:	3b01      	subs	r3, #1
     526:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     528:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     52a:	2b0f      	cmp	r3, #15
     52c:	d900      	bls.n	530 <STACK_SIZE+0x130>
     52e:	e6c0      	b.n	2b2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     530:	222b      	movs	r2, #43	; 0x2b
     532:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     534:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     536:	290f      	cmp	r1, #15
     538:	d900      	bls.n	53c <STACK_SIZE+0x13c>
     53a:	e6ba      	b.n	2b2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     53c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     53e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     540:	b252      	sxtb	r2, r2
     542:	2a00      	cmp	r2, #0
     544:	dbfb      	blt.n	53e <STACK_SIZE+0x13e>
			config->negative_input |
     546:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     548:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     54a:	4302      	orrs	r2, r0
     54c:	68b0      	ldr	r0, [r6, #8]
     54e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     550:	0509      	lsls	r1, r1, #20
			config->negative_input |
     552:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     554:	041b      	lsls	r3, r3, #16
			config->negative_input |
     556:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     558:	4642      	mov	r2, r8
     55a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     55c:	232a      	movs	r3, #42	; 0x2a
     55e:	5cf3      	ldrb	r3, [r6, r3]
     560:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     562:	230f      	movs	r3, #15
     564:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     566:	3315      	adds	r3, #21
     568:	5cf3      	ldrb	r3, [r6, r3]
     56a:	2b00      	cmp	r3, #0
     56c:	d012      	beq.n	594 <STACK_SIZE+0x194>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     56e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     570:	4a1a      	ldr	r2, [pc, #104]	; (5dc <STACK_SIZE+0x1dc>)
			return STATUS_ERR_INVALID_ARG;
     572:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     574:	4293      	cmp	r3, r2
     576:	d900      	bls.n	57a <STACK_SIZE+0x17a>
     578:	e69b      	b.n	2b2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     57a:	4642      	mov	r2, r8
     57c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     57e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     580:	2380      	movs	r3, #128	; 0x80
     582:	011b      	lsls	r3, r3, #4
     584:	18d3      	adds	r3, r2, r3
     586:	4915      	ldr	r1, [pc, #84]	; (5dc <STACK_SIZE+0x1dc>)
     588:	b29b      	uxth	r3, r3
     58a:	428b      	cmp	r3, r1
     58c:	d900      	bls.n	590 <STACK_SIZE+0x190>
     58e:	e690      	b.n	2b2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     590:	4643      	mov	r3, r8
     592:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     594:	4b12      	ldr	r3, [pc, #72]	; (5e0 <STACK_SIZE+0x1e0>)
     596:	681b      	ldr	r3, [r3, #0]
     598:	015b      	lsls	r3, r3, #5
     59a:	22e0      	movs	r2, #224	; 0xe0
     59c:	00d2      	lsls	r2, r2, #3
     59e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     5a0:	4a10      	ldr	r2, [pc, #64]	; (5e4 <STACK_SIZE+0x1e4>)
     5a2:	6851      	ldr	r1, [r2, #4]
     5a4:	0149      	lsls	r1, r1, #5
     5a6:	6812      	ldr	r2, [r2, #0]
     5a8:	0ed2      	lsrs	r2, r2, #27
     5aa:	430a      	orrs	r2, r1
     5ac:	b2d2      	uxtb	r2, r2
			) |
     5ae:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     5b0:	4642      	mov	r2, r8
     5b2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     5b4:	2000      	movs	r0, #0
     5b6:	e67c      	b.n	2b2 <adc_init+0x26>
     5b8:	40000400 	.word	0x40000400
     5bc:	40000800 	.word	0x40000800
     5c0:	2000018c 	.word	0x2000018c
     5c4:	0000229d 	.word	0x0000229d
     5c8:	00002211 	.word	0x00002211
     5cc:	000026d5 	.word	0x000026d5
     5d0:	000028b0 	.word	0x000028b0
     5d4:	00002395 	.word	0x00002395
     5d8:	000027dc 	.word	0x000027dc
     5dc:	00000fff 	.word	0x00000fff
     5e0:	00806024 	.word	0x00806024
     5e4:	00806020 	.word	0x00806020
		switch (resolution) {
     5e8:	2c00      	cmp	r4, #0
     5ea:	d000      	beq.n	5ee <STACK_SIZE+0x1ee>
     5ec:	e77f      	b.n	4ee <STACK_SIZE+0xee>
			if (config->differential_mode &&
     5ee:	7cf2      	ldrb	r2, [r6, #19]
     5f0:	2a00      	cmp	r2, #0
     5f2:	d00f      	beq.n	614 <STACK_SIZE+0x214>
					(config->window.window_lower_value > 2047 ||
     5f4:	69f2      	ldr	r2, [r6, #28]
     5f6:	2180      	movs	r1, #128	; 0x80
     5f8:	0109      	lsls	r1, r1, #4
     5fa:	468c      	mov	ip, r1
     5fc:	4462      	add	r2, ip
			if (config->differential_mode &&
     5fe:	492a      	ldr	r1, [pc, #168]	; (6a8 <STACK_SIZE+0x2a8>)
				return STATUS_ERR_INVALID_ARG;
     600:	2017      	movs	r0, #23
			if (config->differential_mode &&
     602:	428a      	cmp	r2, r1
     604:	d900      	bls.n	608 <STACK_SIZE+0x208>
     606:	e654      	b.n	2b2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     608:	6a32      	ldr	r2, [r6, #32]
     60a:	4462      	add	r2, ip
     60c:	4926      	ldr	r1, [pc, #152]	; (6a8 <STACK_SIZE+0x2a8>)
     60e:	428a      	cmp	r2, r1
     610:	d900      	bls.n	614 <STACK_SIZE+0x214>
     612:	e64e      	b.n	2b2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     614:	4a24      	ldr	r2, [pc, #144]	; (6a8 <STACK_SIZE+0x2a8>)
				return STATUS_ERR_INVALID_ARG;
     616:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     618:	69f1      	ldr	r1, [r6, #28]
     61a:	4291      	cmp	r1, r2
     61c:	dd00      	ble.n	620 <STACK_SIZE+0x220>
     61e:	e648      	b.n	2b2 <adc_init+0x26>
     620:	6a31      	ldr	r1, [r6, #32]
     622:	4291      	cmp	r1, r2
     624:	dd00      	ble.n	628 <STACK_SIZE+0x228>
     626:	e644      	b.n	2b2 <adc_init+0x26>
     628:	e761      	b.n	4ee <STACK_SIZE+0xee>
			if (config->differential_mode &&
     62a:	7cf2      	ldrb	r2, [r6, #19]
     62c:	2a00      	cmp	r2, #0
     62e:	d00f      	beq.n	650 <STACK_SIZE+0x250>
					(config->window.window_lower_value > 511 ||
     630:	69f2      	ldr	r2, [r6, #28]
     632:	2180      	movs	r1, #128	; 0x80
     634:	0089      	lsls	r1, r1, #2
     636:	468c      	mov	ip, r1
     638:	4462      	add	r2, ip
			if (config->differential_mode &&
     63a:	491c      	ldr	r1, [pc, #112]	; (6ac <STACK_SIZE+0x2ac>)
				return STATUS_ERR_INVALID_ARG;
     63c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     63e:	428a      	cmp	r2, r1
     640:	d900      	bls.n	644 <STACK_SIZE+0x244>
     642:	e636      	b.n	2b2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     644:	6a32      	ldr	r2, [r6, #32]
     646:	4462      	add	r2, ip
     648:	4918      	ldr	r1, [pc, #96]	; (6ac <STACK_SIZE+0x2ac>)
     64a:	428a      	cmp	r2, r1
     64c:	d900      	bls.n	650 <STACK_SIZE+0x250>
     64e:	e630      	b.n	2b2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     650:	4a16      	ldr	r2, [pc, #88]	; (6ac <STACK_SIZE+0x2ac>)
				return STATUS_ERR_INVALID_ARG;
     652:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     654:	69f1      	ldr	r1, [r6, #28]
     656:	4291      	cmp	r1, r2
     658:	dd00      	ble.n	65c <STACK_SIZE+0x25c>
     65a:	e62a      	b.n	2b2 <adc_init+0x26>
     65c:	6a31      	ldr	r1, [r6, #32]
     65e:	4291      	cmp	r1, r2
     660:	dd00      	ble.n	664 <STACK_SIZE+0x264>
     662:	e626      	b.n	2b2 <adc_init+0x26>
     664:	e743      	b.n	4ee <STACK_SIZE+0xee>
			if (config->differential_mode &&
     666:	7cf2      	ldrb	r2, [r6, #19]
     668:	2a00      	cmp	r2, #0
     66a:	d00f      	beq.n	68c <STACK_SIZE+0x28c>
					(config->window.window_lower_value > 32767 ||
     66c:	69f2      	ldr	r2, [r6, #28]
     66e:	2180      	movs	r1, #128	; 0x80
     670:	0209      	lsls	r1, r1, #8
     672:	468c      	mov	ip, r1
     674:	4462      	add	r2, ip
			if (config->differential_mode &&
     676:	490e      	ldr	r1, [pc, #56]	; (6b0 <STACK_SIZE+0x2b0>)
				return STATUS_ERR_INVALID_ARG;
     678:	2017      	movs	r0, #23
			if (config->differential_mode &&
     67a:	428a      	cmp	r2, r1
     67c:	d900      	bls.n	680 <STACK_SIZE+0x280>
     67e:	e618      	b.n	2b2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     680:	6a32      	ldr	r2, [r6, #32]
     682:	4462      	add	r2, ip
     684:	490a      	ldr	r1, [pc, #40]	; (6b0 <STACK_SIZE+0x2b0>)
     686:	428a      	cmp	r2, r1
     688:	d900      	bls.n	68c <STACK_SIZE+0x28c>
     68a:	e612      	b.n	2b2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     68c:	4a08      	ldr	r2, [pc, #32]	; (6b0 <STACK_SIZE+0x2b0>)
				return STATUS_ERR_INVALID_ARG;
     68e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     690:	69f1      	ldr	r1, [r6, #28]
     692:	4291      	cmp	r1, r2
     694:	dd00      	ble.n	698 <STACK_SIZE+0x298>
     696:	e60c      	b.n	2b2 <adc_init+0x26>
     698:	6a31      	ldr	r1, [r6, #32]
     69a:	4291      	cmp	r1, r2
     69c:	dd00      	ble.n	6a0 <STACK_SIZE+0x2a0>
     69e:	e608      	b.n	2b2 <adc_init+0x26>
     6a0:	e725      	b.n	4ee <STACK_SIZE+0xee>
		return STATUS_ERR_INVALID_ARG;
     6a2:	2017      	movs	r0, #23
     6a4:	e605      	b.n	2b2 <adc_init+0x26>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	00000fff 	.word	0x00000fff
     6ac:	000003ff 	.word	0x000003ff
     6b0:	0000ffff 	.word	0x0000ffff

000006b4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     6b4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     6b6:	4b2f      	ldr	r3, [pc, #188]	; (774 <ADC_Handler+0xc0>)
     6b8:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     6ba:	682b      	ldr	r3, [r5, #0]
     6bc:	7e1a      	ldrb	r2, [r3, #24]
     6be:	7ddc      	ldrb	r4, [r3, #23]
     6c0:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     6c2:	07e2      	lsls	r2, r4, #31
     6c4:	d416      	bmi.n	6f4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     6c6:	0763      	lsls	r3, r4, #29
     6c8:	d508      	bpl.n	6dc <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6ca:	2304      	movs	r3, #4
     6cc:	682a      	ldr	r2, [r5, #0]
     6ce:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6d0:	7eeb      	ldrb	r3, [r5, #27]
     6d2:	079b      	lsls	r3, r3, #30
     6d4:	d502      	bpl.n	6dc <ADC_Handler+0x28>
     6d6:	7eab      	ldrb	r3, [r5, #26]
     6d8:	079b      	lsls	r3, r3, #30
     6da:	d442      	bmi.n	762 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     6dc:	07a3      	lsls	r3, r4, #30
     6de:	d508      	bpl.n	6f2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     6e0:	2302      	movs	r3, #2
     6e2:	682a      	ldr	r2, [r5, #0]
     6e4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     6e6:	7eeb      	ldrb	r3, [r5, #27]
     6e8:	075b      	lsls	r3, r3, #29
     6ea:	d502      	bpl.n	6f2 <ADC_Handler+0x3e>
     6ec:	7eab      	ldrb	r3, [r5, #26]
     6ee:	075b      	lsls	r3, r3, #29
     6f0:	d43b      	bmi.n	76a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     6f2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6f4:	2201      	movs	r2, #1
     6f6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     6f8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6fa:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     6fc:	b25b      	sxtb	r3, r3
     6fe:	2b00      	cmp	r3, #0
     700:	dbfb      	blt.n	6fa <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     702:	6969      	ldr	r1, [r5, #20]
     704:	1c8b      	adds	r3, r1, #2
     706:	616b      	str	r3, [r5, #20]
     708:	8b53      	ldrh	r3, [r2, #26]
     70a:	b29b      	uxth	r3, r3
     70c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     70e:	8b2b      	ldrh	r3, [r5, #24]
     710:	3b01      	subs	r3, #1
     712:	b29b      	uxth	r3, r3
     714:	832b      	strh	r3, [r5, #24]
     716:	2b00      	cmp	r3, #0
     718:	d011      	beq.n	73e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     71a:	7f6b      	ldrb	r3, [r5, #29]
     71c:	2b00      	cmp	r3, #0
     71e:	d0d2      	beq.n	6c6 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     720:	682a      	ldr	r2, [r5, #0]
     722:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     724:	b25b      	sxtb	r3, r3
     726:	2b00      	cmp	r3, #0
     728:	dbfb      	blt.n	722 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     72a:	7b13      	ldrb	r3, [r2, #12]
     72c:	2102      	movs	r1, #2
     72e:	430b      	orrs	r3, r1
     730:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     732:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     734:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     736:	b25b      	sxtb	r3, r3
     738:	2b00      	cmp	r3, #0
     73a:	dbfb      	blt.n	734 <ADC_Handler+0x80>
     73c:	e7c3      	b.n	6c6 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     73e:	2301      	movs	r3, #1
     740:	682a      	ldr	r2, [r5, #0]
     742:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     744:	7f2b      	ldrb	r3, [r5, #28]
     746:	2b05      	cmp	r3, #5
     748:	d1bd      	bne.n	6c6 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     74a:	2300      	movs	r3, #0
     74c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     74e:	7eeb      	ldrb	r3, [r5, #27]
     750:	07db      	lsls	r3, r3, #31
     752:	d5b8      	bpl.n	6c6 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     754:	7eab      	ldrb	r3, [r5, #26]
     756:	07db      	lsls	r3, r3, #31
     758:	d5b5      	bpl.n	6c6 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     75a:	0028      	movs	r0, r5
     75c:	68ab      	ldr	r3, [r5, #8]
     75e:	4798      	blx	r3
     760:	e7b1      	b.n	6c6 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     762:	0028      	movs	r0, r5
     764:	68eb      	ldr	r3, [r5, #12]
     766:	4798      	blx	r3
     768:	e7b8      	b.n	6dc <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     76a:	692b      	ldr	r3, [r5, #16]
     76c:	0028      	movs	r0, r5
     76e:	4798      	blx	r3
}
     770:	e7bf      	b.n	6f2 <ADC_Handler+0x3e>
     772:	46c0      	nop			; (mov r8, r8)
     774:	2000018c 	.word	0x2000018c

00000778 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     778:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     77a:	4b26      	ldr	r3, [pc, #152]	; (814 <DMAC_Handler+0x9c>)
     77c:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     77e:	4926      	ldr	r1, [pc, #152]	; (818 <DMAC_Handler+0xa0>)
     780:	8c0b      	ldrh	r3, [r1, #32]
     782:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     784:	4013      	ands	r3, r2
     786:	009b      	lsls	r3, r3, #2
     788:	4824      	ldr	r0, [pc, #144]	; (81c <DMAC_Handler+0xa4>)
     78a:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     78c:	7803      	ldrb	r3, [r0, #0]
     78e:	401a      	ands	r2, r3
     790:	233f      	movs	r3, #63	; 0x3f
     792:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     794:	330f      	adds	r3, #15
     796:	5cca      	ldrb	r2, [r1, r3]
     798:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     79a:	7803      	ldrb	r3, [r0, #0]
     79c:	011b      	lsls	r3, r3, #4
     79e:	4920      	ldr	r1, [pc, #128]	; (820 <DMAC_Handler+0xa8>)
     7a0:	18c9      	adds	r1, r1, r3
     7a2:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     7a4:	4c1f      	ldr	r4, [pc, #124]	; (824 <DMAC_Handler+0xac>)
     7a6:	18e3      	adds	r3, r4, r3
     7a8:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     7aa:	1acb      	subs	r3, r1, r3
     7ac:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     7ae:	07d3      	lsls	r3, r2, #31
     7b0:	d50f      	bpl.n	7d2 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     7b2:	2101      	movs	r1, #1
     7b4:	234e      	movs	r3, #78	; 0x4e
     7b6:	4a18      	ldr	r2, [pc, #96]	; (818 <DMAC_Handler+0xa0>)
     7b8:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     7ba:	3b3e      	subs	r3, #62	; 0x3e
     7bc:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     7be:	7c03      	ldrb	r3, [r0, #16]
     7c0:	07db      	lsls	r3, r3, #31
     7c2:	d503      	bpl.n	7cc <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     7c4:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     7c6:	2b00      	cmp	r3, #0
     7c8:	d000      	beq.n	7cc <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     7ca:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     7cc:	4b16      	ldr	r3, [pc, #88]	; (828 <DMAC_Handler+0xb0>)
     7ce:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     7d0:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     7d2:	0793      	lsls	r3, r2, #30
     7d4:	d50d      	bpl.n	7f2 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     7d6:	2102      	movs	r1, #2
     7d8:	234e      	movs	r3, #78	; 0x4e
     7da:	4a0f      	ldr	r2, [pc, #60]	; (818 <DMAC_Handler+0xa0>)
     7dc:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     7de:	2300      	movs	r3, #0
     7e0:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     7e2:	7c03      	ldrb	r3, [r0, #16]
     7e4:	079b      	lsls	r3, r3, #30
     7e6:	d5f1      	bpl.n	7cc <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     7e8:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     7ea:	2b00      	cmp	r3, #0
     7ec:	d0ee      	beq.n	7cc <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     7ee:	4798      	blx	r3
     7f0:	e7ec      	b.n	7cc <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     7f2:	0753      	lsls	r3, r2, #29
     7f4:	d5ea      	bpl.n	7cc <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     7f6:	2104      	movs	r1, #4
     7f8:	234e      	movs	r3, #78	; 0x4e
     7fa:	4a07      	ldr	r2, [pc, #28]	; (818 <DMAC_Handler+0xa0>)
     7fc:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     7fe:	3b48      	subs	r3, #72	; 0x48
     800:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     802:	7c03      	ldrb	r3, [r0, #16]
     804:	075b      	lsls	r3, r3, #29
     806:	d5e1      	bpl.n	7cc <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     808:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     80a:	2b00      	cmp	r3, #0
     80c:	d0de      	beq.n	7cc <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     80e:	4798      	blx	r3
     810:	e7dc      	b.n	7cc <DMAC_Handler+0x54>
     812:	46c0      	nop			; (mov r8, r8)
     814:	00001de5 	.word	0x00001de5
     818:	41004800 	.word	0x41004800
     81c:	200000a8 	.word	0x200000a8
     820:	20000190 	.word	0x20000190
     824:	200000c0 	.word	0x200000c0
     828:	00001e25 	.word	0x00001e25

0000082c <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     82c:	2300      	movs	r3, #0
     82e:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     830:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTON_TRANSACTION;
     832:	2203      	movs	r2, #3
     834:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     836:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     838:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     83a:	4770      	bx	lr

0000083c <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     83e:	46ce      	mov	lr, r9
     840:	4647      	mov	r7, r8
     842:	b580      	push	{r7, lr}
     844:	0005      	movs	r5, r0
     846:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     848:	4b45      	ldr	r3, [pc, #276]	; (960 <dma_allocate+0x124>)
     84a:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     84c:	4b45      	ldr	r3, [pc, #276]	; (964 <dma_allocate+0x128>)
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2b00      	cmp	r3, #0
     852:	d118      	bne.n	886 <dma_allocate+0x4a>
	PM->AHBMASK.reg |= ahb_mask;
     854:	4b44      	ldr	r3, [pc, #272]	; (968 <dma_allocate+0x12c>)
     856:	695a      	ldr	r2, [r3, #20]
     858:	2120      	movs	r1, #32
     85a:	430a      	orrs	r2, r1
     85c:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
     85e:	69da      	ldr	r2, [r3, #28]
     860:	3910      	subs	r1, #16
     862:	430a      	orrs	r2, r1
     864:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     866:	4b41      	ldr	r3, [pc, #260]	; (96c <dma_allocate+0x130>)
     868:	881a      	ldrh	r2, [r3, #0]
     86a:	390e      	subs	r1, #14
     86c:	438a      	bics	r2, r1
     86e:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     870:	2201      	movs	r2, #1
     872:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     874:	4a3e      	ldr	r2, [pc, #248]	; (970 <dma_allocate+0x134>)
     876:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     878:	4a3e      	ldr	r2, [pc, #248]	; (974 <dma_allocate+0x138>)
     87a:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     87c:	4a3e      	ldr	r2, [pc, #248]	; (978 <dma_allocate+0x13c>)
     87e:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     880:	4b38      	ldr	r3, [pc, #224]	; (964 <dma_allocate+0x128>)
     882:	2201      	movs	r2, #1
     884:	701a      	strb	r2, [r3, #0]
     886:	4b36      	ldr	r3, [pc, #216]	; (960 <dma_allocate+0x124>)
     888:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     88a:	4b36      	ldr	r3, [pc, #216]	; (964 <dma_allocate+0x128>)
     88c:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     88e:	07da      	lsls	r2, r3, #31
     890:	d50f      	bpl.n	8b2 <dma_allocate+0x76>
		tmp = tmp >> 1;
     892:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     894:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     896:	2201      	movs	r2, #1
     898:	421a      	tst	r2, r3
     89a:	d00b      	beq.n	8b4 <dma_allocate+0x78>
		tmp = tmp >> 1;
     89c:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     89e:	3401      	adds	r4, #1
     8a0:	b2e4      	uxtb	r4, r4
     8a2:	2c05      	cmp	r4, #5
     8a4:	d1f8      	bne.n	898 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     8a6:	4b35      	ldr	r3, [pc, #212]	; (97c <dma_allocate+0x140>)
     8a8:	4798      	blx	r3
     8aa:	4b34      	ldr	r3, [pc, #208]	; (97c <dma_allocate+0x140>)
     8ac:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     8ae:	2014      	movs	r0, #20
     8b0:	e051      	b.n	956 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     8b2:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     8b4:	4a2b      	ldr	r2, [pc, #172]	; (964 <dma_allocate+0x128>)
     8b6:	6851      	ldr	r1, [r2, #4]
     8b8:	2301      	movs	r3, #1
     8ba:	40a3      	lsls	r3, r4
     8bc:	430b      	orrs	r3, r1
     8be:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     8c0:	7a13      	ldrb	r3, [r2, #8]
     8c2:	3b01      	subs	r3, #1
     8c4:	7213      	strb	r3, [r2, #8]
     8c6:	4b2d      	ldr	r3, [pc, #180]	; (97c <dma_allocate+0x140>)
     8c8:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     8ca:	2cff      	cmp	r4, #255	; 0xff
     8cc:	d0ed      	beq.n	8aa <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     8ce:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     8d0:	2307      	movs	r3, #7
     8d2:	4698      	mov	r8, r3
     8d4:	401c      	ands	r4, r3
     8d6:	4f25      	ldr	r7, [pc, #148]	; (96c <dma_allocate+0x130>)
     8d8:	3338      	adds	r3, #56	; 0x38
     8da:	4699      	mov	r9, r3
     8dc:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     8de:	3301      	adds	r3, #1
     8e0:	5cfa      	ldrb	r2, [r7, r3]
     8e2:	2102      	movs	r1, #2
     8e4:	438a      	bics	r2, r1
     8e6:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     8e8:	2401      	movs	r4, #1
     8ea:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     8ec:	4b1c      	ldr	r3, [pc, #112]	; (960 <dma_allocate+0x124>)
     8ee:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     8f0:	782b      	ldrb	r3, [r5, #0]
     8f2:	4642      	mov	r2, r8
     8f4:	4013      	ands	r3, r2
     8f6:	464a      	mov	r2, r9
     8f8:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     8fa:	693b      	ldr	r3, [r7, #16]
     8fc:	782a      	ldrb	r2, [r5, #0]
     8fe:	4094      	lsls	r4, r2
     900:	43a3      	bics	r3, r4
     902:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     904:	7832      	ldrb	r2, [r6, #0]
     906:	0152      	lsls	r2, r2, #5
     908:	2360      	movs	r3, #96	; 0x60
     90a:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     90c:	7872      	ldrb	r2, [r6, #1]
     90e:	0212      	lsls	r2, r2, #8
     910:	21f8      	movs	r1, #248	; 0xf8
     912:	0149      	lsls	r1, r1, #5
     914:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     916:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     918:	78b2      	ldrb	r2, [r6, #2]
     91a:	0592      	lsls	r2, r2, #22
     91c:	21c0      	movs	r1, #192	; 0xc0
     91e:	0409      	lsls	r1, r1, #16
     920:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     922:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     924:	78f1      	ldrb	r1, [r6, #3]
     926:	2900      	cmp	r1, #0
     928:	d004      	beq.n	934 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     92a:	2207      	movs	r2, #7
     92c:	400a      	ands	r2, r1
     92e:	2108      	movs	r1, #8
     930:	430a      	orrs	r2, r1
     932:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     934:	7932      	ldrb	r2, [r6, #4]
     936:	2a00      	cmp	r2, #0
     938:	d001      	beq.n	93e <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     93a:	2210      	movs	r2, #16
     93c:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     93e:	4a0b      	ldr	r2, [pc, #44]	; (96c <dma_allocate+0x130>)
     940:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     942:	4c0e      	ldr	r4, [pc, #56]	; (97c <dma_allocate+0x140>)
     944:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     946:	2300      	movs	r3, #0
     948:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     94a:	782b      	ldrb	r3, [r5, #0]
     94c:	009b      	lsls	r3, r3, #2
     94e:	4a0c      	ldr	r2, [pc, #48]	; (980 <dma_allocate+0x144>)
     950:	509d      	str	r5, [r3, r2]
     952:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     954:	2000      	movs	r0, #0
}
     956:	bc0c      	pop	{r2, r3}
     958:	4690      	mov	r8, r2
     95a:	4699      	mov	r9, r3
     95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	00001de5 	.word	0x00001de5
     964:	20000008 	.word	0x20000008
     968:	40000400 	.word	0x40000400
     96c:	41004800 	.word	0x41004800
     970:	20000190 	.word	0x20000190
     974:	200000c0 	.word	0x200000c0
     978:	00000f02 	.word	0x00000f02
     97c:	00001e25 	.word	0x00001e25
     980:	200000a8 	.word	0x200000a8

00000984 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     984:	b570      	push	{r4, r5, r6, lr}
     986:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     988:	4b19      	ldr	r3, [pc, #100]	; (9f0 <dma_start_transfer_job+0x6c>)
     98a:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     98c:	7c63      	ldrb	r3, [r4, #17]
     98e:	2b05      	cmp	r3, #5
     990:	d008      	beq.n	9a4 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     992:	69a3      	ldr	r3, [r4, #24]
     994:	885b      	ldrh	r3, [r3, #2]
     996:	b29b      	uxth	r3, r3
     998:	2b00      	cmp	r3, #0
     99a:	d107      	bne.n	9ac <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     99c:	4b15      	ldr	r3, [pc, #84]	; (9f4 <dma_start_transfer_job+0x70>)
     99e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     9a0:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     9a2:	bd70      	pop	{r4, r5, r6, pc}
     9a4:	4b13      	ldr	r3, [pc, #76]	; (9f4 <dma_start_transfer_job+0x70>)
     9a6:	4798      	blx	r3
		return STATUS_BUSY;
     9a8:	2005      	movs	r0, #5
     9aa:	e7fa      	b.n	9a2 <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     9ac:	2640      	movs	r6, #64	; 0x40
     9ae:	4b12      	ldr	r3, [pc, #72]	; (9f8 <dma_start_transfer_job+0x74>)
     9b0:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     9b2:	7822      	ldrb	r2, [r4, #0]
     9b4:	2307      	movs	r3, #7
     9b6:	401a      	ands	r2, r3
     9b8:	4d10      	ldr	r5, [pc, #64]	; (9fc <dma_start_transfer_job+0x78>)
     9ba:	213f      	movs	r1, #63	; 0x3f
     9bc:	546a      	strb	r2, [r5, r1]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     9be:	7822      	ldrb	r2, [r4, #0]
     9c0:	490f      	ldr	r1, [pc, #60]	; (a00 <dma_start_transfer_job+0x7c>)
     9c2:	5c8a      	ldrb	r2, [r1, r2]
     9c4:	4013      	ands	r3, r2
     9c6:	224d      	movs	r2, #77	; 0x4d
     9c8:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     9ca:	2305      	movs	r3, #5
     9cc:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     9ce:	7820      	ldrb	r0, [r4, #0]
     9d0:	0100      	lsls	r0, r0, #4
     9d2:	4b0c      	ldr	r3, [pc, #48]	; (a04 <dma_start_transfer_job+0x80>)
     9d4:	18c0      	adds	r0, r0, r3
     9d6:	69a1      	ldr	r1, [r4, #24]
     9d8:	3a3d      	subs	r2, #61	; 0x3d
     9da:	4b0b      	ldr	r3, [pc, #44]	; (a08 <dma_start_transfer_job+0x84>)
     9dc:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     9de:	5dab      	ldrb	r3, [r5, r6]
     9e0:	2202      	movs	r2, #2
     9e2:	4313      	orrs	r3, r2
     9e4:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     9e6:	4b03      	ldr	r3, [pc, #12]	; (9f4 <dma_start_transfer_job+0x70>)
     9e8:	4798      	blx	r3
	return STATUS_OK;
     9ea:	2000      	movs	r0, #0
     9ec:	e7d9      	b.n	9a2 <dma_start_transfer_job+0x1e>
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	00001de5 	.word	0x00001de5
     9f4:	00001e25 	.word	0x00001e25
     9f8:	e000e100 	.word	0xe000e100
     9fc:	41004800 	.word	0x41004800
     a00:	20000110 	.word	0x20000110
     a04:	20000190 	.word	0x20000190
     a08:	000026d5 	.word	0x000026d5

00000a0c <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     a0e:	780a      	ldrb	r2, [r1, #0]
     a10:	8803      	ldrh	r3, [r0, #0]
     a12:	2601      	movs	r6, #1
     a14:	4032      	ands	r2, r6
     a16:	2401      	movs	r4, #1
     a18:	43a3      	bics	r3, r4
     a1a:	4313      	orrs	r3, r2
     a1c:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     a1e:	784b      	ldrb	r3, [r1, #1]
     a20:	8804      	ldrh	r4, [r0, #0]
     a22:	2703      	movs	r7, #3
     a24:	403b      	ands	r3, r7
     a26:	005b      	lsls	r3, r3, #1
     a28:	2206      	movs	r2, #6
     a2a:	4394      	bics	r4, r2
     a2c:	431c      	orrs	r4, r3
     a2e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     a30:	788d      	ldrb	r5, [r1, #2]
     a32:	8804      	ldrh	r4, [r0, #0]
     a34:	403d      	ands	r5, r7
     a36:	00ed      	lsls	r5, r5, #3
     a38:	2318      	movs	r3, #24
     a3a:	439c      	bics	r4, r3
     a3c:	432c      	orrs	r4, r5
     a3e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     a40:	78ca      	ldrb	r2, [r1, #3]
     a42:	8803      	ldrh	r3, [r0, #0]
     a44:	403a      	ands	r2, r7
     a46:	0212      	lsls	r2, r2, #8
     a48:	4c16      	ldr	r4, [pc, #88]	; (aa4 <dma_descriptor_create+0x98>)
     a4a:	4023      	ands	r3, r4
     a4c:	4313      	orrs	r3, r2
     a4e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     a50:	790b      	ldrb	r3, [r1, #4]
     a52:	8804      	ldrh	r4, [r0, #0]
     a54:	4033      	ands	r3, r6
     a56:	029b      	lsls	r3, r3, #10
     a58:	4a13      	ldr	r2, [pc, #76]	; (aa8 <dma_descriptor_create+0x9c>)
     a5a:	4014      	ands	r4, r2
     a5c:	431c      	orrs	r4, r3
     a5e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     a60:	794d      	ldrb	r5, [r1, #5]
     a62:	8804      	ldrh	r4, [r0, #0]
     a64:	4035      	ands	r5, r6
     a66:	02ed      	lsls	r5, r5, #11
     a68:	4b10      	ldr	r3, [pc, #64]	; (aac <dma_descriptor_create+0xa0>)
     a6a:	401c      	ands	r4, r3
     a6c:	432c      	orrs	r4, r5
     a6e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     a70:	798a      	ldrb	r2, [r1, #6]
     a72:	8803      	ldrh	r3, [r0, #0]
     a74:	4032      	ands	r2, r6
     a76:	0312      	lsls	r2, r2, #12
     a78:	4c0d      	ldr	r4, [pc, #52]	; (ab0 <dma_descriptor_create+0xa4>)
     a7a:	4023      	ands	r3, r4
     a7c:	4313      	orrs	r3, r2
     a7e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     a80:	79cb      	ldrb	r3, [r1, #7]
     a82:	2207      	movs	r2, #7
     a84:	401a      	ands	r2, r3
     a86:	8803      	ldrh	r3, [r0, #0]
     a88:	0352      	lsls	r2, r2, #13
     a8a:	04db      	lsls	r3, r3, #19
     a8c:	0cdb      	lsrs	r3, r3, #19
     a8e:	4313      	orrs	r3, r2
     a90:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     a92:	890b      	ldrh	r3, [r1, #8]
     a94:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     a96:	68cb      	ldr	r3, [r1, #12]
     a98:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     a9a:	690b      	ldr	r3, [r1, #16]
     a9c:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     a9e:	694b      	ldr	r3, [r1, #20]
     aa0:	60c3      	str	r3, [r0, #12]
}
     aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aa4:	fffffcff 	.word	0xfffffcff
     aa8:	fffffbff 	.word	0xfffffbff
     aac:	fffff7ff 	.word	0xfffff7ff
     ab0:	ffffefff 	.word	0xffffefff

00000ab4 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     ab4:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     ab6:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     ab8:	2a05      	cmp	r2, #5
     aba:	d00b      	beq.n	ad4 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     abc:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     abe:	2b00      	cmp	r3, #0
     ac0:	d00a      	beq.n	ad8 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     ac2:	68da      	ldr	r2, [r3, #12]
     ac4:	2a00      	cmp	r2, #0
     ac6:	d003      	beq.n	ad0 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     ac8:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     aca:	68da      	ldr	r2, [r3, #12]
     acc:	2a00      	cmp	r2, #0
     ace:	d1fb      	bne.n	ac8 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     ad0:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     ad2:	2300      	movs	r3, #0
}
     ad4:	0018      	movs	r0, r3
     ad6:	4770      	bx	lr
		resource->descriptor = descriptor;
     ad8:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     ada:	2300      	movs	r3, #0
     adc:	e7fa      	b.n	ad4 <dma_add_descriptor+0x20>
	...

00000ae0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ae0:	b500      	push	{lr}
     ae2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ae4:	ab01      	add	r3, sp, #4
     ae6:	2280      	movs	r2, #128	; 0x80
     ae8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     aea:	780a      	ldrb	r2, [r1, #0]
     aec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     aee:	784a      	ldrb	r2, [r1, #1]
     af0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     af2:	788a      	ldrb	r2, [r1, #2]
     af4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     af6:	0019      	movs	r1, r3
     af8:	4b01      	ldr	r3, [pc, #4]	; (b00 <port_pin_set_config+0x20>)
     afa:	4798      	blx	r3
}
     afc:	b003      	add	sp, #12
     afe:	bd00      	pop	{pc}
     b00:	00002395 	.word	0x00002395

00000b04 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	46ce      	mov	lr, r9
     b08:	4647      	mov	r7, r8
     b0a:	b580      	push	{r7, lr}
     b0c:	b083      	sub	sp, #12
     b0e:	0005      	movs	r5, r0
     b10:	000c      	movs	r4, r1
     b12:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     b14:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     b16:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     b18:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     b1a:	079b      	lsls	r3, r3, #30
     b1c:	d504      	bpl.n	b28 <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     b1e:	b003      	add	sp, #12
     b20:	bc0c      	pop	{r2, r3}
     b22:	4690      	mov	r8, r2
     b24:	4699      	mov	r9, r3
     b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     b28:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     b2a:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     b2c:	07db      	lsls	r3, r3, #31
     b2e:	d4f6      	bmi.n	b1e <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b30:	0008      	movs	r0, r1
     b32:	4b4d      	ldr	r3, [pc, #308]	; (c68 <i2c_slave_init+0x164>)
     b34:	4699      	mov	r9, r3
     b36:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     b38:	4a4c      	ldr	r2, [pc, #304]	; (c6c <i2c_slave_init+0x168>)
     b3a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b3c:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b3e:	2701      	movs	r7, #1
     b40:	46b8      	mov	r8, r7
     b42:	409f      	lsls	r7, r3
     b44:	003b      	movs	r3, r7
     b46:	430b      	orrs	r3, r1
     b48:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b4a:	a901      	add	r1, sp, #4
     b4c:	7e73      	ldrb	r3, [r6, #25]
     b4e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b50:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b52:	b2c3      	uxtb	r3, r0
     b54:	001f      	movs	r7, r3
     b56:	0018      	movs	r0, r3
     b58:	4b45      	ldr	r3, [pc, #276]	; (c70 <i2c_slave_init+0x16c>)
     b5a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b5c:	0038      	movs	r0, r7
     b5e:	4b45      	ldr	r3, [pc, #276]	; (c74 <i2c_slave_init+0x170>)
     b60:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b62:	7e70      	ldrb	r0, [r6, #25]
     b64:	2100      	movs	r1, #0
     b66:	4b44      	ldr	r3, [pc, #272]	; (c78 <i2c_slave_init+0x174>)
     b68:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b6a:	6828      	ldr	r0, [r5, #0]
     b6c:	47c8      	blx	r9
     b6e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     b70:	4942      	ldr	r1, [pc, #264]	; (c7c <i2c_slave_init+0x178>)
     b72:	4b43      	ldr	r3, [pc, #268]	; (c80 <i2c_slave_init+0x17c>)
     b74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b76:	00bf      	lsls	r7, r7, #2
     b78:	4b42      	ldr	r3, [pc, #264]	; (c84 <i2c_slave_init+0x180>)
     b7a:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     b7c:	2300      	movs	r3, #0
     b7e:	2224      	movs	r2, #36	; 0x24
     b80:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     b82:	3201      	adds	r2, #1
     b84:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     b86:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     b88:	7e33      	ldrb	r3, [r6, #24]
     b8a:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     b8c:	2310      	movs	r3, #16
     b8e:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     b90:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     b92:	8933      	ldrh	r3, [r6, #8]
     b94:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     b96:	7c33      	ldrb	r3, [r6, #16]
     b98:	722b      	strb	r3, [r5, #8]
     b9a:	2380      	movs	r3, #128	; 0x80
     b9c:	466a      	mov	r2, sp
     b9e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ba0:	2300      	movs	r3, #0
     ba2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ba4:	466b      	mov	r3, sp
     ba6:	4642      	mov	r2, r8
     ba8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     baa:	2300      	movs	r3, #0
     bac:	466a      	mov	r2, sp
     bae:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     bb0:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     bb2:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     bb4:	2800      	cmp	r0, #0
     bb6:	d04b      	beq.n	c50 <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     bb8:	466b      	mov	r3, sp
     bba:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     bbc:	2302      	movs	r3, #2
     bbe:	466a      	mov	r2, sp
     bc0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     bc2:	0c00      	lsrs	r0, r0, #16
     bc4:	b2c0      	uxtb	r0, r0
     bc6:	4669      	mov	r1, sp
     bc8:	4b2f      	ldr	r3, [pc, #188]	; (c88 <i2c_slave_init+0x184>)
     bca:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     bcc:	2d00      	cmp	r5, #0
     bce:	d044      	beq.n	c5a <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     bd0:	466b      	mov	r3, sp
     bd2:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     bd4:	2302      	movs	r3, #2
     bd6:	466a      	mov	r2, sp
     bd8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     bda:	0c2d      	lsrs	r5, r5, #16
     bdc:	b2e8      	uxtb	r0, r5
     bde:	4669      	mov	r1, sp
     be0:	4b29      	ldr	r3, [pc, #164]	; (c88 <i2c_slave_init+0x184>)
     be2:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     be4:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     be6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     be8:	2b00      	cmp	r3, #0
     bea:	d104      	bne.n	bf6 <i2c_slave_init+0xf2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bec:	4b27      	ldr	r3, [pc, #156]	; (c8c <i2c_slave_init+0x188>)
     bee:	789b      	ldrb	r3, [r3, #2]
     bf0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     bf2:	0fdb      	lsrs	r3, r3, #31
     bf4:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     bf6:	2325      	movs	r3, #37	; 0x25
     bf8:	5cf3      	ldrb	r3, [r6, r3]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d104      	bne.n	c08 <i2c_slave_init+0x104>
     bfe:	2380      	movs	r3, #128	; 0x80
     c00:	049b      	lsls	r3, r3, #18
     c02:	6971      	ldr	r1, [r6, #20]
     c04:	4299      	cmp	r1, r3
     c06:	d102      	bne.n	c0e <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     c08:	2380      	movs	r3, #128	; 0x80
     c0a:	051b      	lsls	r3, r3, #20
     c0c:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     c0e:	6820      	ldr	r0, [r4, #0]
     c10:	6873      	ldr	r3, [r6, #4]
     c12:	6971      	ldr	r1, [r6, #20]
     c14:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     c16:	2124      	movs	r1, #36	; 0x24
     c18:	5c71      	ldrb	r1, [r6, r1]
     c1a:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     c1c:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     c1e:	2126      	movs	r1, #38	; 0x26
     c20:	5c71      	ldrb	r1, [r6, r1]
     c22:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     c24:	430b      	orrs	r3, r1
     c26:	4303      	orrs	r3, r0
     c28:	4313      	orrs	r3, r2
     c2a:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     c2c:	8972      	ldrh	r2, [r6, #10]
     c2e:	2380      	movs	r3, #128	; 0x80
     c30:	005b      	lsls	r3, r3, #1
     c32:	4313      	orrs	r3, r2
     c34:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     c36:	89b3      	ldrh	r3, [r6, #12]
     c38:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     c3a:	89f2      	ldrh	r2, [r6, #14]
     c3c:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     c3e:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     c40:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     c42:	4313      	orrs	r3, r2
     c44:	7c32      	ldrb	r2, [r6, #16]
     c46:	03d2      	lsls	r2, r2, #15
     c48:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     c4a:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     c4c:	2000      	movs	r0, #0
     c4e:	e766      	b.n	b1e <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     c50:	2100      	movs	r1, #0
     c52:	0020      	movs	r0, r4
     c54:	4b0e      	ldr	r3, [pc, #56]	; (c90 <i2c_slave_init+0x18c>)
     c56:	4798      	blx	r3
     c58:	e7ae      	b.n	bb8 <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     c5a:	2101      	movs	r1, #1
     c5c:	0020      	movs	r0, r4
     c5e:	4b0c      	ldr	r3, [pc, #48]	; (c90 <i2c_slave_init+0x18c>)
     c60:	4798      	blx	r3
     c62:	0005      	movs	r5, r0
     c64:	e7b4      	b.n	bd0 <i2c_slave_init+0xcc>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	00001075 	.word	0x00001075
     c6c:	40000400 	.word	0x40000400
     c70:	0000229d 	.word	0x0000229d
     c74:	00002211 	.word	0x00002211
     c78:	00000f69 	.word	0x00000f69
     c7c:	00000cd9 	.word	0x00000cd9
     c80:	000010b1 	.word	0x000010b1
     c84:	200001e0 	.word	0x200001e0
     c88:	00002395 	.word	0x00002395
     c8c:	41002000 	.word	0x41002000
     c90:	00000fb5 	.word	0x00000fb5

00000c94 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     c94:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     c96:	1c93      	adds	r3, r2, #2
     c98:	009b      	lsls	r3, r3, #2
     c9a:	18c3      	adds	r3, r0, r3
     c9c:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     c9e:	2424      	movs	r4, #36	; 0x24
     ca0:	5d03      	ldrb	r3, [r0, r4]
     ca2:	2101      	movs	r1, #1
     ca4:	4091      	lsls	r1, r2
     ca6:	430b      	orrs	r3, r1
     ca8:	b2db      	uxtb	r3, r3
     caa:	5503      	strb	r3, [r0, r4]
}
     cac:	bd10      	pop	{r4, pc}

00000cae <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     cae:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     cb0:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     cb2:	2a00      	cmp	r2, #0
     cb4:	d001      	beq.n	cba <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     cb6:	0018      	movs	r0, r3
     cb8:	4770      	bx	lr
	module->buffer           = packet->data;
     cba:	684b      	ldr	r3, [r1, #4]
     cbc:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     cbe:	880b      	ldrh	r3, [r1, #0]
     cc0:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     cc2:	880b      	ldrh	r3, [r1, #0]
     cc4:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     cc6:	3205      	adds	r2, #5
     cc8:	2331      	movs	r3, #49	; 0x31
     cca:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ccc:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     cce:	3202      	adds	r2, #2
     cd0:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     cd2:	2300      	movs	r3, #0
     cd4:	e7ef      	b.n	cb6 <i2c_slave_write_packet_job+0x8>
	...

00000cd8 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     cd8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     cda:	0080      	lsls	r0, r0, #2
     cdc:	4b95      	ldr	r3, [pc, #596]	; (f34 <_i2c_slave_interrupt_handler+0x25c>)
     cde:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ce0:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     ce2:	2325      	movs	r3, #37	; 0x25
     ce4:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     ce6:	2224      	movs	r2, #36	; 0x24
     ce8:	5ca6      	ldrb	r6, [r4, r2]
     cea:	401e      	ands	r6, r3

	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     cec:	7e2b      	ldrb	r3, [r5, #24]
     cee:	079b      	lsls	r3, r3, #30
     cf0:	d400      	bmi.n	cf4 <_i2c_slave_interrupt_handler+0x1c>
     cf2:	e08a      	b.n	e0a <_i2c_slave_interrupt_handler+0x132>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     cf4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     cf6:	b29b      	uxth	r3, r3
     cf8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     cfa:	4293      	cmp	r3, r2
     cfc:	d00d      	beq.n	d1a <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     cfe:	2330      	movs	r3, #48	; 0x30
     d00:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     d02:	2b00      	cmp	r3, #0
     d04:	d109      	bne.n	d1a <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     d06:	2231      	movs	r2, #49	; 0x31
     d08:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     d0a:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     d0c:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     d0e:	07b3      	lsls	r3, r6, #30
     d10:	d50b      	bpl.n	d2a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     d12:	6923      	ldr	r3, [r4, #16]
     d14:	0020      	movs	r0, r4
     d16:	4798      	blx	r3
     d18:	e007      	b.n	d2a <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     d1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     d1c:	b29b      	uxth	r3, r3
     d1e:	429a      	cmp	r2, r3
     d20:	d003      	beq.n	d2a <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     d22:	2330      	movs	r3, #48	; 0x30
     d24:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     d26:	2b01      	cmp	r3, #1
     d28:	d020      	beq.n	d6c <_i2c_slave_interrupt_handler+0x94>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     d2a:	8b6a      	ldrh	r2, [r5, #26]
     d2c:	2343      	movs	r3, #67	; 0x43
     d2e:	421a      	tst	r2, r3
     d30:	d004      	beq.n	d3c <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     d32:	2210      	movs	r2, #16
     d34:	3b12      	subs	r3, #18
     d36:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     d38:	06b3      	lsls	r3, r6, #26
     d3a:	d422      	bmi.n	d82 <_i2c_slave_interrupt_handler+0xaa>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     d3c:	7a63      	ldrb	r3, [r4, #9]
     d3e:	2b00      	cmp	r3, #0
     d40:	d123      	bne.n	d8a <_i2c_slave_interrupt_handler+0xb2>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     d42:	8b6b      	ldrh	r3, [r5, #26]
     d44:	071b      	lsls	r3, r3, #28
     d46:	d53f      	bpl.n	dc8 <_i2c_slave_interrupt_handler+0xf0>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     d48:	2201      	movs	r2, #1
     d4a:	2330      	movs	r3, #48	; 0x30
     d4c:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     d4e:	0773      	lsls	r3, r6, #29
     d50:	d436      	bmi.n	dc0 <_i2c_slave_interrupt_handler+0xe8>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     d52:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     d54:	b29b      	uxth	r3, r3
     d56:	2b00      	cmp	r3, #0
     d58:	d021      	beq.n	d9e <_i2c_slave_interrupt_handler+0xc6>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d5a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d5c:	4b76      	ldr	r3, [pc, #472]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     d5e:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     d60:	2300      	movs	r3, #0
     d62:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
     d64:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d66:	4b75      	ldr	r3, [pc, #468]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     d68:	4798      	blx	r3
     d6a:	e018      	b.n	d9e <_i2c_slave_interrupt_handler+0xc6>
			module->status = STATUS_OK;
     d6c:	2300      	movs	r3, #0
     d6e:	2231      	movs	r2, #49	; 0x31
     d70:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     d72:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     d74:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     d76:	07f3      	lsls	r3, r6, #31
     d78:	d5d7      	bpl.n	d2a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     d7a:	68e3      	ldr	r3, [r4, #12]
     d7c:	0020      	movs	r0, r4
     d7e:	4798      	blx	r3
     d80:	e7d3      	b.n	d2a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     d82:	6a23      	ldr	r3, [r4, #32]
     d84:	0020      	movs	r0, r4
     d86:	4798      	blx	r3
     d88:	e7d8      	b.n	d3c <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d8a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d8c:	4b6a      	ldr	r3, [pc, #424]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     d8e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d90:	2300      	movs	r3, #0
     d92:	836b      	strh	r3, [r5, #26]
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     d94:	2380      	movs	r3, #128	; 0x80
     d96:	02db      	lsls	r3, r3, #11
     d98:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d9a:	4b68      	ldr	r3, [pc, #416]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     d9c:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d9e:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     da0:	7e1a      	ldrb	r2, [r3, #24]
     da2:	07d2      	lsls	r2, r2, #31
     da4:	d501      	bpl.n	daa <_i2c_slave_interrupt_handler+0xd2>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     da6:	2201      	movs	r2, #1
     da8:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     daa:	2202      	movs	r2, #2
     dac:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     dae:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     db0:	4b61      	ldr	r3, [pc, #388]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     db2:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     db4:	2300      	movs	r3, #0
     db6:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
     db8:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     dba:	4b60      	ldr	r3, [pc, #384]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     dbc:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     dbe:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     dc0:	6963      	ldr	r3, [r4, #20]
     dc2:	0020      	movs	r0, r4
     dc4:	4798      	blx	r3
     dc6:	e7c4      	b.n	d52 <_i2c_slave_interrupt_handler+0x7a>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     dc8:	2200      	movs	r2, #0
     dca:	2330      	movs	r3, #48	; 0x30
     dcc:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     dce:	0733      	lsls	r3, r6, #28
     dd0:	d40e      	bmi.n	df0 <_i2c_slave_interrupt_handler+0x118>
			if (module->buffer_length == 0) {
     dd2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     dd4:	b29b      	uxth	r3, r3
     dd6:	2b00      	cmp	r3, #0
     dd8:	d10e      	bne.n	df8 <_i2c_slave_interrupt_handler+0x120>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     dda:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     ddc:	4b56      	ldr	r3, [pc, #344]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     dde:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     de0:	2300      	movs	r3, #0
     de2:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     de4:	2380      	movs	r3, #128	; 0x80
     de6:	02db      	lsls	r3, r3, #11
     de8:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     dea:	4b54      	ldr	r3, [pc, #336]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     dec:	4798      	blx	r3
     dee:	e7d6      	b.n	d9e <_i2c_slave_interrupt_handler+0xc6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     df0:	69a3      	ldr	r3, [r4, #24]
     df2:	0020      	movs	r0, r4
     df4:	4798      	blx	r3
     df6:	e7ec      	b.n	dd2 <_i2c_slave_interrupt_handler+0xfa>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     df8:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     dfa:	4b4f      	ldr	r3, [pc, #316]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     dfc:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     dfe:	2300      	movs	r3, #0
     e00:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     e02:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     e04:	4b4d      	ldr	r3, [pc, #308]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     e06:	4798      	blx	r3
     e08:	e7c9      	b.n	d9e <_i2c_slave_interrupt_handler+0xc6>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     e0a:	7e2b      	ldrb	r3, [r5, #24]
     e0c:	07db      	lsls	r3, r3, #31
     e0e:	d52e      	bpl.n	e6e <_i2c_slave_interrupt_handler+0x196>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     e10:	2301      	movs	r3, #1
     e12:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     e14:	3304      	adds	r3, #4
     e16:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     e18:	3320      	adds	r3, #32
     e1a:	5ce3      	ldrb	r3, [r4, r3]
     e1c:	075b      	lsls	r3, r3, #29
     e1e:	d405      	bmi.n	e2c <_i2c_slave_interrupt_handler+0x154>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     e20:	2325      	movs	r3, #37	; 0x25
     e22:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     e24:	2b08      	cmp	r3, #8
     e26:	d001      	beq.n	e2c <_i2c_slave_interrupt_handler+0x154>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     e28:	2302      	movs	r3, #2
     e2a:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     e2c:	2331      	movs	r3, #49	; 0x31
     e2e:	5ce3      	ldrb	r3, [r4, r3]
     e30:	2b1e      	cmp	r3, #30
     e32:	d0c4      	beq.n	dbe <_i2c_slave_interrupt_handler+0xe6>
     e34:	2331      	movs	r3, #49	; 0x31
     e36:	5ce3      	ldrb	r3, [r4, r3]
     e38:	2b10      	cmp	r3, #16
     e3a:	d0c0      	beq.n	dbe <_i2c_slave_interrupt_handler+0xe6>
			module->status = STATUS_OK;
     e3c:	2300      	movs	r3, #0
     e3e:	2231      	movs	r2, #49	; 0x31
     e40:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     e42:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     e44:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     e46:	07b3      	lsls	r3, r6, #30
     e48:	d503      	bpl.n	e52 <_i2c_slave_interrupt_handler+0x17a>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e4a:	2330      	movs	r3, #48	; 0x30
     e4c:	5ce3      	ldrb	r3, [r4, r3]
     e4e:	2b00      	cmp	r3, #0
     e50:	d009      	beq.n	e66 <_i2c_slave_interrupt_handler+0x18e>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     e52:	07f3      	lsls	r3, r6, #31
     e54:	d5b3      	bpl.n	dbe <_i2c_slave_interrupt_handler+0xe6>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     e56:	2330      	movs	r3, #48	; 0x30
     e58:	5ce3      	ldrb	r3, [r4, r3]
     e5a:	2b01      	cmp	r3, #1
     e5c:	d1af      	bne.n	dbe <_i2c_slave_interrupt_handler+0xe6>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     e5e:	68e3      	ldr	r3, [r4, #12]
     e60:	0020      	movs	r0, r4
     e62:	4798      	blx	r3
     e64:	e7ab      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     e66:	6923      	ldr	r3, [r4, #16]
     e68:	0020      	movs	r0, r4
     e6a:	4798      	blx	r3
     e6c:	e7a7      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     e6e:	7e2b      	ldrb	r3, [r5, #24]
     e70:	075b      	lsls	r3, r3, #29
     e72:	d5a4      	bpl.n	dbe <_i2c_slave_interrupt_handler+0xe6>
		if (module->buffer_remaining <= 0 ||
     e74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e76:	2b00      	cmp	r3, #0
     e78:	d01d      	beq.n	eb6 <_i2c_slave_interrupt_handler+0x1de>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     e7a:	2230      	movs	r2, #48	; 0x30
     e7c:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     e7e:	2a01      	cmp	r2, #1
     e80:	d012      	beq.n	ea8 <_i2c_slave_interrupt_handler+0x1d0>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     e82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     e84:	b29b      	uxth	r3, r3
     e86:	2b00      	cmp	r3, #0
     e88:	d099      	beq.n	dbe <_i2c_slave_interrupt_handler+0xe6>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     e8a:	2330      	movs	r3, #48	; 0x30
     e8c:	5ce3      	ldrb	r3, [r4, r3]
     e8e:	2b00      	cmp	r3, #0
     e90:	d044      	beq.n	f1c <_i2c_slave_interrupt_handler+0x244>
	i2c_hw->DATA.reg = *(module->buffer++);
     e92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     e94:	1c5a      	adds	r2, r3, #1
     e96:	62e2      	str	r2, [r4, #44]	; 0x2c
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	b2db      	uxtb	r3, r3
     e9c:	2228      	movs	r2, #40	; 0x28
     e9e:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
     ea0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ea2:	3b01      	subs	r3, #1
     ea4:	8523      	strh	r3, [r4, #40]	; 0x28
}
     ea6:	e78a      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
				(module->buffer_length > module->buffer_remaining) &&
     ea8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     eaa:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     eac:	4293      	cmp	r3, r2
     eae:	d2e8      	bcs.n	e82 <_i2c_slave_interrupt_handler+0x1aa>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     eb0:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
     eb2:	075b      	lsls	r3, r3, #29
     eb4:	d5e5      	bpl.n	e82 <_i2c_slave_interrupt_handler+0x1aa>
			module->buffer_remaining = 0;
     eb6:	2300      	movs	r3, #0
     eb8:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     eba:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     ebc:	3330      	adds	r3, #48	; 0x30
     ebe:	5ce3      	ldrb	r3, [r4, r3]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d117      	bne.n	ef4 <_i2c_slave_interrupt_handler+0x21c>
	cpu_irq_enter_critical();
     ec4:	4b1c      	ldr	r3, [pc, #112]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     ec6:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ec8:	2300      	movs	r3, #0
     eca:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     ecc:	2380      	movs	r3, #128	; 0x80
     ece:	02db      	lsls	r3, r3, #11
     ed0:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     ed2:	4b1a      	ldr	r3, [pc, #104]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     ed4:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     ed6:	686a      	ldr	r2, [r5, #4]
     ed8:	2380      	movs	r3, #128	; 0x80
     eda:	029b      	lsls	r3, r3, #10
     edc:	4313      	orrs	r3, r2
     ede:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     ee0:	221e      	movs	r2, #30
     ee2:	2331      	movs	r3, #49	; 0x31
     ee4:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     ee6:	06f3      	lsls	r3, r6, #27
     ee8:	d400      	bmi.n	eec <_i2c_slave_interrupt_handler+0x214>
     eea:	e768      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     eec:	69e3      	ldr	r3, [r4, #28]
     eee:	0020      	movs	r0, r4
     ef0:	4798      	blx	r3
     ef2:	e764      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
	cpu_irq_enter_critical();
     ef4:	4b10      	ldr	r3, [pc, #64]	; (f38 <_i2c_slave_interrupt_handler+0x260>)
     ef6:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ef8:	2300      	movs	r3, #0
     efa:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     efc:	2380      	movs	r3, #128	; 0x80
     efe:	02db      	lsls	r3, r3, #11
     f00:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     f02:	4b0e      	ldr	r3, [pc, #56]	; (f3c <_i2c_slave_interrupt_handler+0x264>)
     f04:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     f06:	686a      	ldr	r2, [r5, #4]
     f08:	2380      	movs	r3, #128	; 0x80
     f0a:	029b      	lsls	r3, r3, #10
     f0c:	4313      	orrs	r3, r2
     f0e:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     f10:	2331      	movs	r3, #49	; 0x31
     f12:	2200      	movs	r2, #0
     f14:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     f16:	3b2d      	subs	r3, #45	; 0x2d
     f18:	752b      	strb	r3, [r5, #20]
     f1a:	e750      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
	*(module->buffer++) = i2c_hw->DATA.reg;
     f1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     f1e:	1c53      	adds	r3, r2, #1
     f20:	62e3      	str	r3, [r4, #44]	; 0x2c
     f22:	2328      	movs	r3, #40	; 0x28
     f24:	5ceb      	ldrb	r3, [r5, r3]
     f26:	b2db      	uxtb	r3, r3
     f28:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     f2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     f2c:	3b01      	subs	r3, #1
     f2e:	8523      	strh	r3, [r4, #40]	; 0x28
     f30:	e745      	b.n	dbe <_i2c_slave_interrupt_handler+0xe6>
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	200001e0 	.word	0x200001e0
     f38:	00001de5 	.word	0x00001de5
     f3c:	00001e25 	.word	0x00001e25

00000f40 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     f40:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     f42:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f44:	2340      	movs	r3, #64	; 0x40
     f46:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     f48:	4281      	cmp	r1, r0
     f4a:	d202      	bcs.n	f52 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     f4c:	0018      	movs	r0, r3
     f4e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     f50:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     f52:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     f54:	1c63      	adds	r3, r4, #1
     f56:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     f58:	4288      	cmp	r0, r1
     f5a:	d9f9      	bls.n	f50 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f5c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     f5e:	2cff      	cmp	r4, #255	; 0xff
     f60:	d8f4      	bhi.n	f4c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     f62:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     f64:	2300      	movs	r3, #0
     f66:	e7f1      	b.n	f4c <_sercom_get_sync_baud_val+0xc>

00000f68 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     f68:	b510      	push	{r4, lr}
     f6a:	b082      	sub	sp, #8
     f6c:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     f6e:	4b0e      	ldr	r3, [pc, #56]	; (fa8 <sercom_set_gclk_generator+0x40>)
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d007      	beq.n	f86 <sercom_set_gclk_generator+0x1e>
     f76:	2900      	cmp	r1, #0
     f78:	d105      	bne.n	f86 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     f7a:	4b0b      	ldr	r3, [pc, #44]	; (fa8 <sercom_set_gclk_generator+0x40>)
     f7c:	785b      	ldrb	r3, [r3, #1]
     f7e:	4283      	cmp	r3, r0
     f80:	d010      	beq.n	fa4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f82:	201d      	movs	r0, #29
     f84:	e00c      	b.n	fa0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     f86:	a901      	add	r1, sp, #4
     f88:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     f8a:	200d      	movs	r0, #13
     f8c:	4b07      	ldr	r3, [pc, #28]	; (fac <sercom_set_gclk_generator+0x44>)
     f8e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     f90:	200d      	movs	r0, #13
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <sercom_set_gclk_generator+0x48>)
     f94:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     f96:	4b04      	ldr	r3, [pc, #16]	; (fa8 <sercom_set_gclk_generator+0x40>)
     f98:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     f9a:	2201      	movs	r2, #1
     f9c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     f9e:	2000      	movs	r0, #0
}
     fa0:	b002      	add	sp, #8
     fa2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     fa4:	2000      	movs	r0, #0
     fa6:	e7fb      	b.n	fa0 <sercom_set_gclk_generator+0x38>
     fa8:	20000118 	.word	0x20000118
     fac:	0000229d 	.word	0x0000229d
     fb0:	00002211 	.word	0x00002211

00000fb4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     fb4:	4b20      	ldr	r3, [pc, #128]	; (1038 <_sercom_get_default_pad+0x84>)
     fb6:	4298      	cmp	r0, r3
     fb8:	d017      	beq.n	fea <_sercom_get_default_pad+0x36>
     fba:	4b20      	ldr	r3, [pc, #128]	; (103c <_sercom_get_default_pad+0x88>)
     fbc:	4298      	cmp	r0, r3
     fbe:	d024      	beq.n	100a <_sercom_get_default_pad+0x56>
     fc0:	4b1f      	ldr	r3, [pc, #124]	; (1040 <_sercom_get_default_pad+0x8c>)
     fc2:	4298      	cmp	r0, r3
     fc4:	d001      	beq.n	fca <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     fc6:	2000      	movs	r0, #0
}
     fc8:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fca:	2901      	cmp	r1, #1
     fcc:	d007      	beq.n	fde <_sercom_get_default_pad+0x2a>
     fce:	2900      	cmp	r1, #0
     fd0:	d02b      	beq.n	102a <_sercom_get_default_pad+0x76>
     fd2:	2902      	cmp	r1, #2
     fd4:	d005      	beq.n	fe2 <_sercom_get_default_pad+0x2e>
     fd6:	2903      	cmp	r1, #3
     fd8:	d005      	beq.n	fe6 <_sercom_get_default_pad+0x32>
	return 0;
     fda:	2000      	movs	r0, #0
     fdc:	e7f4      	b.n	fc8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fde:	4819      	ldr	r0, [pc, #100]	; (1044 <_sercom_get_default_pad+0x90>)
     fe0:	e7f2      	b.n	fc8 <_sercom_get_default_pad+0x14>
     fe2:	4819      	ldr	r0, [pc, #100]	; (1048 <_sercom_get_default_pad+0x94>)
     fe4:	e7f0      	b.n	fc8 <_sercom_get_default_pad+0x14>
     fe6:	4819      	ldr	r0, [pc, #100]	; (104c <_sercom_get_default_pad+0x98>)
     fe8:	e7ee      	b.n	fc8 <_sercom_get_default_pad+0x14>
     fea:	2901      	cmp	r1, #1
     fec:	d007      	beq.n	ffe <_sercom_get_default_pad+0x4a>
     fee:	2900      	cmp	r1, #0
     ff0:	d01d      	beq.n	102e <_sercom_get_default_pad+0x7a>
     ff2:	2902      	cmp	r1, #2
     ff4:	d005      	beq.n	1002 <_sercom_get_default_pad+0x4e>
     ff6:	2903      	cmp	r1, #3
     ff8:	d005      	beq.n	1006 <_sercom_get_default_pad+0x52>
	return 0;
     ffa:	2000      	movs	r0, #0
     ffc:	e7e4      	b.n	fc8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ffe:	4814      	ldr	r0, [pc, #80]	; (1050 <_sercom_get_default_pad+0x9c>)
    1000:	e7e2      	b.n	fc8 <_sercom_get_default_pad+0x14>
    1002:	4814      	ldr	r0, [pc, #80]	; (1054 <_sercom_get_default_pad+0xa0>)
    1004:	e7e0      	b.n	fc8 <_sercom_get_default_pad+0x14>
    1006:	4814      	ldr	r0, [pc, #80]	; (1058 <_sercom_get_default_pad+0xa4>)
    1008:	e7de      	b.n	fc8 <_sercom_get_default_pad+0x14>
    100a:	2901      	cmp	r1, #1
    100c:	d007      	beq.n	101e <_sercom_get_default_pad+0x6a>
    100e:	2900      	cmp	r1, #0
    1010:	d00f      	beq.n	1032 <_sercom_get_default_pad+0x7e>
    1012:	2902      	cmp	r1, #2
    1014:	d005      	beq.n	1022 <_sercom_get_default_pad+0x6e>
    1016:	2903      	cmp	r1, #3
    1018:	d005      	beq.n	1026 <_sercom_get_default_pad+0x72>
	return 0;
    101a:	2000      	movs	r0, #0
    101c:	e7d4      	b.n	fc8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    101e:	480f      	ldr	r0, [pc, #60]	; (105c <_sercom_get_default_pad+0xa8>)
    1020:	e7d2      	b.n	fc8 <_sercom_get_default_pad+0x14>
    1022:	480f      	ldr	r0, [pc, #60]	; (1060 <_sercom_get_default_pad+0xac>)
    1024:	e7d0      	b.n	fc8 <_sercom_get_default_pad+0x14>
    1026:	480f      	ldr	r0, [pc, #60]	; (1064 <_sercom_get_default_pad+0xb0>)
    1028:	e7ce      	b.n	fc8 <_sercom_get_default_pad+0x14>
    102a:	480f      	ldr	r0, [pc, #60]	; (1068 <_sercom_get_default_pad+0xb4>)
    102c:	e7cc      	b.n	fc8 <_sercom_get_default_pad+0x14>
    102e:	480f      	ldr	r0, [pc, #60]	; (106c <_sercom_get_default_pad+0xb8>)
    1030:	e7ca      	b.n	fc8 <_sercom_get_default_pad+0x14>
    1032:	480f      	ldr	r0, [pc, #60]	; (1070 <_sercom_get_default_pad+0xbc>)
    1034:	e7c8      	b.n	fc8 <_sercom_get_default_pad+0x14>
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	42000c00 	.word	0x42000c00
    103c:	42001000 	.word	0x42001000
    1040:	42000800 	.word	0x42000800
    1044:	00050003 	.word	0x00050003
    1048:	00060003 	.word	0x00060003
    104c:	00070003 	.word	0x00070003
    1050:	00170002 	.word	0x00170002
    1054:	001e0003 	.word	0x001e0003
    1058:	001f0003 	.word	0x001f0003
    105c:	00170003 	.word	0x00170003
    1060:	00100003 	.word	0x00100003
    1064:	00190003 	.word	0x00190003
    1068:	00040003 	.word	0x00040003
    106c:	00160002 	.word	0x00160002
    1070:	00160003 	.word	0x00160003

00001074 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1074:	b530      	push	{r4, r5, lr}
    1076:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1078:	aa01      	add	r2, sp, #4
    107a:	4b0b      	ldr	r3, [pc, #44]	; (10a8 <_sercom_get_sercom_inst_index+0x34>)
    107c:	cb32      	ldmia	r3!, {r1, r4, r5}
    107e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1080:	0003      	movs	r3, r0
    1082:	9a01      	ldr	r2, [sp, #4]
    1084:	4282      	cmp	r2, r0
    1086:	d00c      	beq.n	10a2 <_sercom_get_sercom_inst_index+0x2e>
    1088:	9a02      	ldr	r2, [sp, #8]
    108a:	4282      	cmp	r2, r0
    108c:	d007      	beq.n	109e <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    108e:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1090:	9a03      	ldr	r2, [sp, #12]
    1092:	429a      	cmp	r2, r3
    1094:	d001      	beq.n	109a <_sercom_get_sercom_inst_index+0x26>
}
    1096:	b005      	add	sp, #20
    1098:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    109a:	3002      	adds	r0, #2
    109c:	e002      	b.n	10a4 <_sercom_get_sercom_inst_index+0x30>
    109e:	2001      	movs	r0, #1
    10a0:	e000      	b.n	10a4 <_sercom_get_sercom_inst_index+0x30>
    10a2:	2000      	movs	r0, #0
			return i;
    10a4:	b2c0      	uxtb	r0, r0
    10a6:	e7f6      	b.n	1096 <_sercom_get_sercom_inst_index+0x22>
    10a8:	00002900 	.word	0x00002900

000010ac <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    10ac:	4770      	bx	lr
	...

000010b0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10b0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    10b2:	4b0a      	ldr	r3, [pc, #40]	; (10dc <_sercom_set_handler+0x2c>)
    10b4:	781b      	ldrb	r3, [r3, #0]
    10b6:	2b00      	cmp	r3, #0
    10b8:	d10c      	bne.n	10d4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10ba:	4c09      	ldr	r4, [pc, #36]	; (10e0 <_sercom_set_handler+0x30>)
    10bc:	4d09      	ldr	r5, [pc, #36]	; (10e4 <_sercom_set_handler+0x34>)
    10be:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    10c0:	4b09      	ldr	r3, [pc, #36]	; (10e8 <_sercom_set_handler+0x38>)
    10c2:	2200      	movs	r2, #0
    10c4:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10c6:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    10c8:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    10ca:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    10cc:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    10ce:	3201      	adds	r2, #1
    10d0:	4b02      	ldr	r3, [pc, #8]	; (10dc <_sercom_set_handler+0x2c>)
    10d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    10d4:	0080      	lsls	r0, r0, #2
    10d6:	4b02      	ldr	r3, [pc, #8]	; (10e0 <_sercom_set_handler+0x30>)
    10d8:	50c1      	str	r1, [r0, r3]
}
    10da:	bd30      	pop	{r4, r5, pc}
    10dc:	2000011a 	.word	0x2000011a
    10e0:	2000011c 	.word	0x2000011c
    10e4:	000010ad 	.word	0x000010ad
    10e8:	200001e0 	.word	0x200001e0

000010ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    10ec:	b510      	push	{r4, lr}
    10ee:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    10f0:	ac01      	add	r4, sp, #4
    10f2:	2309      	movs	r3, #9
    10f4:	7023      	strb	r3, [r4, #0]
    10f6:	3301      	adds	r3, #1
    10f8:	7063      	strb	r3, [r4, #1]
    10fa:	3301      	adds	r3, #1
    10fc:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    10fe:	4b02      	ldr	r3, [pc, #8]	; (1108 <_sercom_get_interrupt_vector+0x1c>)
    1100:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1102:	5620      	ldrsb	r0, [r4, r0]
}
    1104:	b002      	add	sp, #8
    1106:	bd10      	pop	{r4, pc}
    1108:	00001075 	.word	0x00001075

0000110c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    110c:	b510      	push	{r4, lr}
    110e:	4b02      	ldr	r3, [pc, #8]	; (1118 <SERCOM0_Handler+0xc>)
    1110:	681b      	ldr	r3, [r3, #0]
    1112:	2000      	movs	r0, #0
    1114:	4798      	blx	r3
    1116:	bd10      	pop	{r4, pc}
    1118:	2000011c 	.word	0x2000011c

0000111c <SERCOM1_Handler>:
    111c:	b510      	push	{r4, lr}
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <SERCOM1_Handler+0xc>)
    1120:	685b      	ldr	r3, [r3, #4]
    1122:	2001      	movs	r0, #1
    1124:	4798      	blx	r3
    1126:	bd10      	pop	{r4, pc}
    1128:	2000011c 	.word	0x2000011c

0000112c <SERCOM2_Handler>:
    112c:	b510      	push	{r4, lr}
    112e:	4b02      	ldr	r3, [pc, #8]	; (1138 <SERCOM2_Handler+0xc>)
    1130:	689b      	ldr	r3, [r3, #8]
    1132:	2002      	movs	r0, #2
    1134:	4798      	blx	r3
    1136:	bd10      	pop	{r4, pc}
    1138:	2000011c 	.word	0x2000011c

0000113c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    113c:	b5f0      	push	{r4, r5, r6, r7, lr}
    113e:	b08b      	sub	sp, #44	; 0x2c
    1140:	0005      	movs	r5, r0
    1142:	000c      	movs	r4, r1
    1144:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1146:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1148:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    114a:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    114c:	079b      	lsls	r3, r3, #30
    114e:	d501      	bpl.n	1154 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1150:	b00b      	add	sp, #44	; 0x2c
    1152:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1154:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1156:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1158:	07db      	lsls	r3, r3, #31
    115a:	d4f9      	bmi.n	1150 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    115c:	0008      	movs	r0, r1
    115e:	4b6f      	ldr	r3, [pc, #444]	; (131c <spi_init+0x1e0>)
    1160:	4798      	blx	r3
    1162:	4a6f      	ldr	r2, [pc, #444]	; (1320 <spi_init+0x1e4>)
    1164:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1166:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1168:	2301      	movs	r3, #1
    116a:	40bb      	lsls	r3, r7
    116c:	430b      	orrs	r3, r1
    116e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1170:	a909      	add	r1, sp, #36	; 0x24
    1172:	2724      	movs	r7, #36	; 0x24
    1174:	5df3      	ldrb	r3, [r6, r7]
    1176:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1178:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    117a:	b2c3      	uxtb	r3, r0
    117c:	9301      	str	r3, [sp, #4]
    117e:	0018      	movs	r0, r3
    1180:	4b68      	ldr	r3, [pc, #416]	; (1324 <spi_init+0x1e8>)
    1182:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1184:	9801      	ldr	r0, [sp, #4]
    1186:	4b68      	ldr	r3, [pc, #416]	; (1328 <spi_init+0x1ec>)
    1188:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    118a:	5df0      	ldrb	r0, [r6, r7]
    118c:	2100      	movs	r1, #0
    118e:	4b67      	ldr	r3, [pc, #412]	; (132c <spi_init+0x1f0>)
    1190:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1192:	7833      	ldrb	r3, [r6, #0]
    1194:	2b01      	cmp	r3, #1
    1196:	d03f      	beq.n	1218 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    1198:	7833      	ldrb	r3, [r6, #0]
    119a:	2b00      	cmp	r3, #0
    119c:	d103      	bne.n	11a6 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    119e:	6823      	ldr	r3, [r4, #0]
    11a0:	2208      	movs	r2, #8
    11a2:	4313      	orrs	r3, r2
    11a4:	6023      	str	r3, [r4, #0]
    11a6:	002b      	movs	r3, r5
    11a8:	330c      	adds	r3, #12
    11aa:	0029      	movs	r1, r5
    11ac:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    11ae:	2200      	movs	r2, #0
    11b0:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    11b2:	428b      	cmp	r3, r1
    11b4:	d1fc      	bne.n	11b0 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    11b6:	2300      	movs	r3, #0
    11b8:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    11ba:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    11bc:	2400      	movs	r4, #0
    11be:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    11c0:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    11c2:	3336      	adds	r3, #54	; 0x36
    11c4:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    11c6:	3301      	adds	r3, #1
    11c8:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    11ca:	3301      	adds	r3, #1
    11cc:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    11ce:	3b35      	subs	r3, #53	; 0x35
    11d0:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    11d2:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    11d4:	6828      	ldr	r0, [r5, #0]
    11d6:	4b51      	ldr	r3, [pc, #324]	; (131c <spi_init+0x1e0>)
    11d8:	4798      	blx	r3
    11da:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    11dc:	4954      	ldr	r1, [pc, #336]	; (1330 <spi_init+0x1f4>)
    11de:	4b55      	ldr	r3, [pc, #340]	; (1334 <spi_init+0x1f8>)
    11e0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    11e2:	00bf      	lsls	r7, r7, #2
    11e4:	4b54      	ldr	r3, [pc, #336]	; (1338 <spi_init+0x1fc>)
    11e6:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    11e8:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11ea:	ab04      	add	r3, sp, #16
    11ec:	2280      	movs	r2, #128	; 0x80
    11ee:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11f0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11f2:	3a7f      	subs	r2, #127	; 0x7f
    11f4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    11f6:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    11f8:	7833      	ldrb	r3, [r6, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d102      	bne.n	1204 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11fe:	2200      	movs	r2, #0
    1200:	ab04      	add	r3, sp, #16
    1202:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1204:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1206:	9305      	str	r3, [sp, #20]
    1208:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    120a:	9306      	str	r3, [sp, #24]
    120c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    120e:	9307      	str	r3, [sp, #28]
    1210:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1212:	9308      	str	r3, [sp, #32]
    1214:	2400      	movs	r4, #0
    1216:	e00b      	b.n	1230 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1218:	6823      	ldr	r3, [r4, #0]
    121a:	220c      	movs	r2, #12
    121c:	4313      	orrs	r3, r2
    121e:	6023      	str	r3, [r4, #0]
    1220:	e7ba      	b.n	1198 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1222:	0038      	movs	r0, r7
    1224:	4b45      	ldr	r3, [pc, #276]	; (133c <spi_init+0x200>)
    1226:	4798      	blx	r3
    1228:	e00a      	b.n	1240 <spi_init+0x104>
    122a:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    122c:	2c04      	cmp	r4, #4
    122e:	d010      	beq.n	1252 <spi_init+0x116>
    1230:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1232:	00a3      	lsls	r3, r4, #2
    1234:	aa02      	add	r2, sp, #8
    1236:	200c      	movs	r0, #12
    1238:	1812      	adds	r2, r2, r0
    123a:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    123c:	2800      	cmp	r0, #0
    123e:	d0f0      	beq.n	1222 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1240:	1c43      	adds	r3, r0, #1
    1242:	d0f2      	beq.n	122a <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1244:	a904      	add	r1, sp, #16
    1246:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1248:	0c00      	lsrs	r0, r0, #16
    124a:	b2c0      	uxtb	r0, r0
    124c:	4b3c      	ldr	r3, [pc, #240]	; (1340 <spi_init+0x204>)
    124e:	4798      	blx	r3
    1250:	e7eb      	b.n	122a <spi_init+0xee>
	module->mode             = config->mode;
    1252:	7833      	ldrb	r3, [r6, #0]
    1254:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1256:	7c33      	ldrb	r3, [r6, #16]
    1258:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    125a:	7cb3      	ldrb	r3, [r6, #18]
    125c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    125e:	7d33      	ldrb	r3, [r6, #20]
    1260:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1262:	2200      	movs	r2, #0
    1264:	ab02      	add	r3, sp, #8
    1266:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1268:	7833      	ldrb	r3, [r6, #0]
    126a:	2b01      	cmp	r3, #1
    126c:	d012      	beq.n	1294 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    126e:	7833      	ldrb	r3, [r6, #0]
    1270:	2b00      	cmp	r3, #0
    1272:	d126      	bne.n	12c2 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    1274:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    1276:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    1278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    127a:	7ff1      	ldrb	r1, [r6, #31]
    127c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    127e:	7fb4      	ldrb	r4, [r6, #30]
    1280:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    1282:	4319      	orrs	r1, r3
    1284:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    1286:	2320      	movs	r3, #32
    1288:	5cf3      	ldrb	r3, [r6, r3]
    128a:	2b00      	cmp	r3, #0
    128c:	d01b      	beq.n	12c6 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    128e:	2340      	movs	r3, #64	; 0x40
    1290:	431a      	orrs	r2, r3
    1292:	e018      	b.n	12c6 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1294:	6828      	ldr	r0, [r5, #0]
    1296:	4b21      	ldr	r3, [pc, #132]	; (131c <spi_init+0x1e0>)
    1298:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    129a:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    129c:	b2c0      	uxtb	r0, r0
    129e:	4b29      	ldr	r3, [pc, #164]	; (1344 <spi_init+0x208>)
    12a0:	4798      	blx	r3
    12a2:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    12a4:	ab02      	add	r3, sp, #8
    12a6:	1d9a      	adds	r2, r3, #6
    12a8:	69b0      	ldr	r0, [r6, #24]
    12aa:	4b27      	ldr	r3, [pc, #156]	; (1348 <spi_init+0x20c>)
    12ac:	4798      	blx	r3
    12ae:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    12b0:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    12b2:	2b00      	cmp	r3, #0
    12b4:	d000      	beq.n	12b8 <spi_init+0x17c>
    12b6:	e74b      	b.n	1150 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    12b8:	ab02      	add	r3, sp, #8
    12ba:	3306      	adds	r3, #6
    12bc:	781b      	ldrb	r3, [r3, #0]
    12be:	733b      	strb	r3, [r7, #12]
    12c0:	e7d5      	b.n	126e <spi_init+0x132>
	uint32_t ctrlb = 0;
    12c2:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    12c4:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    12c6:	6873      	ldr	r3, [r6, #4]
    12c8:	68b1      	ldr	r1, [r6, #8]
    12ca:	430b      	orrs	r3, r1
    12cc:	68f1      	ldr	r1, [r6, #12]
    12ce:	430b      	orrs	r3, r1
    12d0:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    12d2:	7c31      	ldrb	r1, [r6, #16]
    12d4:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    12d6:	7c71      	ldrb	r1, [r6, #17]
    12d8:	2900      	cmp	r1, #0
    12da:	d103      	bne.n	12e4 <spi_init+0x1a8>
    12dc:	491b      	ldr	r1, [pc, #108]	; (134c <spi_init+0x210>)
    12de:	7889      	ldrb	r1, [r1, #2]
    12e0:	0789      	lsls	r1, r1, #30
    12e2:	d501      	bpl.n	12e8 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    12e4:	2180      	movs	r1, #128	; 0x80
    12e6:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    12e8:	7cb1      	ldrb	r1, [r6, #18]
    12ea:	2900      	cmp	r1, #0
    12ec:	d002      	beq.n	12f4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    12ee:	2180      	movs	r1, #128	; 0x80
    12f0:	0289      	lsls	r1, r1, #10
    12f2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    12f4:	7cf1      	ldrb	r1, [r6, #19]
    12f6:	2900      	cmp	r1, #0
    12f8:	d002      	beq.n	1300 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    12fa:	2180      	movs	r1, #128	; 0x80
    12fc:	0089      	lsls	r1, r1, #2
    12fe:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1300:	7d31      	ldrb	r1, [r6, #20]
    1302:	2900      	cmp	r1, #0
    1304:	d002      	beq.n	130c <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1306:	2180      	movs	r1, #128	; 0x80
    1308:	0189      	lsls	r1, r1, #6
    130a:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    130c:	6839      	ldr	r1, [r7, #0]
    130e:	430b      	orrs	r3, r1
    1310:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	431a      	orrs	r2, r3
    1316:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1318:	2000      	movs	r0, #0
    131a:	e719      	b.n	1150 <spi_init+0x14>
    131c:	00001075 	.word	0x00001075
    1320:	40000400 	.word	0x40000400
    1324:	0000229d 	.word	0x0000229d
    1328:	00002211 	.word	0x00002211
    132c:	00000f69 	.word	0x00000f69
    1330:	00001351 	.word	0x00001351
    1334:	000010b1 	.word	0x000010b1
    1338:	200001e0 	.word	0x200001e0
    133c:	00000fb5 	.word	0x00000fb5
    1340:	00002395 	.word	0x00002395
    1344:	000022b9 	.word	0x000022b9
    1348:	00000f41 	.word	0x00000f41
    134c:	41002000 	.word	0x41002000

00001350 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1352:	0080      	lsls	r0, r0, #2
    1354:	4b86      	ldr	r3, [pc, #536]	; (1570 <_spi_interrupt_handler+0x220>)
    1356:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1358:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    135a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    135c:	5ce3      	ldrb	r3, [r4, r3]
    135e:	2236      	movs	r2, #54	; 0x36
    1360:	5ca7      	ldrb	r7, [r4, r2]
    1362:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1364:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    1366:	7db5      	ldrb	r5, [r6, #22]
    1368:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    136a:	07eb      	lsls	r3, r5, #31
    136c:	d52e      	bpl.n	13cc <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    136e:	7963      	ldrb	r3, [r4, #5]
    1370:	2b01      	cmp	r3, #1
    1372:	d025      	beq.n	13c0 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1374:	2b00      	cmp	r3, #0
    1376:	d129      	bne.n	13cc <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    1378:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    137a:	2b00      	cmp	r3, #0
    137c:	d026      	beq.n	13cc <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    137e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1380:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1382:	7813      	ldrb	r3, [r2, #0]
    1384:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1386:	1c50      	adds	r0, r2, #1
    1388:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    138a:	79a0      	ldrb	r0, [r4, #6]
    138c:	2801      	cmp	r0, #1
    138e:	d100      	bne.n	1392 <_spi_interrupt_handler+0x42>
    1390:	e06b      	b.n	146a <_spi_interrupt_handler+0x11a>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1392:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1394:	05db      	lsls	r3, r3, #23
    1396:	0ddb      	lsrs	r3, r3, #23
    1398:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    139a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    139c:	3b01      	subs	r3, #1
    139e:	b29b      	uxth	r3, r3
    13a0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    13a2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    13a4:	b29b      	uxth	r3, r3
    13a6:	2b00      	cmp	r3, #0
    13a8:	d110      	bne.n	13cc <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    13aa:	3301      	adds	r3, #1
    13ac:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    13ae:	7a63      	ldrb	r3, [r4, #9]
    13b0:	2b01      	cmp	r3, #1
    13b2:	d10b      	bne.n	13cc <_spi_interrupt_handler+0x7c>
    13b4:	79e3      	ldrb	r3, [r4, #7]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d108      	bne.n	13cc <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    13ba:	3302      	adds	r3, #2
    13bc:	75b3      	strb	r3, [r6, #22]
    13be:	e005      	b.n	13cc <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    13c0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    13c2:	2b00      	cmp	r3, #0
    13c4:	d040      	beq.n	1448 <_spi_interrupt_handler+0xf8>
			(module->dir != SPI_DIRECTION_READ))
    13c6:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    13c8:	2b00      	cmp	r3, #0
    13ca:	d1d8      	bne.n	137e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    13cc:	076b      	lsls	r3, r5, #29
    13ce:	d513      	bpl.n	13f8 <_spi_interrupt_handler+0xa8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13d0:	8b73      	ldrh	r3, [r6, #26]
    13d2:	075b      	lsls	r3, r3, #29
    13d4:	d553      	bpl.n	147e <_spi_interrupt_handler+0x12e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    13d6:	7a63      	ldrb	r3, [r4, #9]
    13d8:	2b01      	cmp	r3, #1
    13da:	d008      	beq.n	13ee <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    13dc:	221e      	movs	r2, #30
    13de:	2338      	movs	r3, #56	; 0x38
    13e0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    13e2:	3b35      	subs	r3, #53	; 0x35
    13e4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    13e6:	3302      	adds	r3, #2
    13e8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    13ea:	073b      	lsls	r3, r7, #28
    13ec:	d443      	bmi.n	1476 <_spi_interrupt_handler+0x126>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    13ee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    13f0:	8b73      	ldrh	r3, [r6, #26]
    13f2:	2204      	movs	r2, #4
    13f4:	4313      	orrs	r3, r2
    13f6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    13f8:	07ab      	lsls	r3, r5, #30
    13fa:	d515      	bpl.n	1428 <_spi_interrupt_handler+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    13fc:	7963      	ldrb	r3, [r4, #5]
    13fe:	2b00      	cmp	r3, #0
    1400:	d10e      	bne.n	1420 <_spi_interrupt_handler+0xd0>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1402:	3307      	adds	r3, #7
    1404:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1406:	3b05      	subs	r3, #5
    1408:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    140a:	3301      	adds	r3, #1
    140c:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    140e:	2300      	movs	r3, #0
    1410:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1412:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    1414:	3338      	adds	r3, #56	; 0x38
    1416:	2200      	movs	r2, #0
    1418:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    141a:	06fb      	lsls	r3, r7, #27
    141c:	d500      	bpl.n	1420 <_spi_interrupt_handler+0xd0>
    141e:	e07f      	b.n	1520 <_spi_interrupt_handler+0x1d0>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1420:	7963      	ldrb	r3, [r4, #5]
    1422:	2b01      	cmp	r3, #1
    1424:	d100      	bne.n	1428 <_spi_interrupt_handler+0xd8>
    1426:	e07f      	b.n	1528 <_spi_interrupt_handler+0x1d8>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1428:	072b      	lsls	r3, r5, #28
    142a:	d508      	bpl.n	143e <_spi_interrupt_handler+0xee>
			if (module->mode == SPI_MODE_SLAVE) {
    142c:	7963      	ldrb	r3, [r4, #5]
    142e:	2b00      	cmp	r3, #0
    1430:	d105      	bne.n	143e <_spi_interrupt_handler+0xee>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1432:	3308      	adds	r3, #8
    1434:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1436:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1438:	06bb      	lsls	r3, r7, #26
    143a:	d500      	bpl.n	143e <_spi_interrupt_handler+0xee>
    143c:	e08a      	b.n	1554 <_spi_interrupt_handler+0x204>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    143e:	b26d      	sxtb	r5, r5
    1440:	2d00      	cmp	r5, #0
    1442:	da00      	bge.n	1446 <_spi_interrupt_handler+0xf6>
    1444:	e08a      	b.n	155c <_spi_interrupt_handler+0x20c>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1448:	4b4a      	ldr	r3, [pc, #296]	; (1574 <_spi_interrupt_handler+0x224>)
    144a:	881b      	ldrh	r3, [r3, #0]
    144c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    144e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1450:	3b01      	subs	r3, #1
    1452:	b29b      	uxth	r3, r3
    1454:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1456:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1458:	b29b      	uxth	r3, r3
    145a:	2b00      	cmp	r3, #0
    145c:	d101      	bne.n	1462 <_spi_interrupt_handler+0x112>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    145e:	3301      	adds	r3, #1
    1460:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1462:	7963      	ldrb	r3, [r4, #5]
		if (0
    1464:	2b01      	cmp	r3, #1
    1466:	d0ae      	beq.n	13c6 <_spi_interrupt_handler+0x76>
    1468:	e784      	b.n	1374 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    146a:	7850      	ldrb	r0, [r2, #1]
    146c:	0200      	lsls	r0, r0, #8
    146e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1470:	3202      	adds	r2, #2
    1472:	62e2      	str	r2, [r4, #44]	; 0x2c
    1474:	e78e      	b.n	1394 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1476:	0020      	movs	r0, r4
    1478:	69a3      	ldr	r3, [r4, #24]
    147a:	4798      	blx	r3
    147c:	e7b7      	b.n	13ee <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    147e:	7a63      	ldrb	r3, [r4, #9]
    1480:	2b01      	cmp	r3, #1
    1482:	d027      	beq.n	14d4 <_spi_interrupt_handler+0x184>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1484:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1488:	05db      	lsls	r3, r3, #23
    148a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    148c:	b2da      	uxtb	r2, r3
    148e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1490:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1492:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1494:	1c51      	adds	r1, r2, #1
    1496:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1498:	79a1      	ldrb	r1, [r4, #6]
    149a:	2901      	cmp	r1, #1
    149c:	d033      	beq.n	1506 <_spi_interrupt_handler+0x1b6>
	module->remaining_rx_buffer_length--;
    149e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    14a0:	3b01      	subs	r3, #1
    14a2:	b29b      	uxth	r3, r3
    14a4:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    14a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    14a8:	b29b      	uxth	r3, r3
    14aa:	2b00      	cmp	r3, #0
    14ac:	d1a4      	bne.n	13f8 <_spi_interrupt_handler+0xa8>
					module->status = STATUS_OK;
    14ae:	2200      	movs	r2, #0
    14b0:	3338      	adds	r3, #56	; 0x38
    14b2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    14b4:	3b34      	subs	r3, #52	; 0x34
    14b6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    14b8:	7a63      	ldrb	r3, [r4, #9]
    14ba:	2b02      	cmp	r3, #2
    14bc:	d029      	beq.n	1512 <_spi_interrupt_handler+0x1c2>
					} else if (module->dir == SPI_DIRECTION_READ) {
    14be:	7a63      	ldrb	r3, [r4, #9]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d000      	beq.n	14c6 <_spi_interrupt_handler+0x176>
    14c4:	e798      	b.n	13f8 <_spi_interrupt_handler+0xa8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    14c6:	07bb      	lsls	r3, r7, #30
    14c8:	d400      	bmi.n	14cc <_spi_interrupt_handler+0x17c>
    14ca:	e795      	b.n	13f8 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    14cc:	0020      	movs	r0, r4
    14ce:	6923      	ldr	r3, [r4, #16]
    14d0:	4798      	blx	r3
    14d2:	e791      	b.n	13f8 <_spi_interrupt_handler+0xa8>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    14d4:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    14d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    14d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    14da:	3b01      	subs	r3, #1
    14dc:	b29b      	uxth	r3, r3
    14de:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    14e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    14e2:	b29b      	uxth	r3, r3
    14e4:	2b00      	cmp	r3, #0
    14e6:	d000      	beq.n	14ea <_spi_interrupt_handler+0x19a>
    14e8:	e786      	b.n	13f8 <_spi_interrupt_handler+0xa8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    14ea:	3304      	adds	r3, #4
    14ec:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    14ee:	2200      	movs	r2, #0
    14f0:	3334      	adds	r3, #52	; 0x34
    14f2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    14f4:	3b35      	subs	r3, #53	; 0x35
    14f6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    14f8:	07fb      	lsls	r3, r7, #31
    14fa:	d400      	bmi.n	14fe <_spi_interrupt_handler+0x1ae>
    14fc:	e77c      	b.n	13f8 <_spi_interrupt_handler+0xa8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    14fe:	0020      	movs	r0, r4
    1500:	68e3      	ldr	r3, [r4, #12]
    1502:	4798      	blx	r3
    1504:	e778      	b.n	13f8 <_spi_interrupt_handler+0xa8>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1506:	0a1b      	lsrs	r3, r3, #8
    1508:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    150a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    150c:	3301      	adds	r3, #1
    150e:	62a3      	str	r3, [r4, #40]	; 0x28
    1510:	e7c5      	b.n	149e <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1512:	077b      	lsls	r3, r7, #29
    1514:	d400      	bmi.n	1518 <_spi_interrupt_handler+0x1c8>
    1516:	e76f      	b.n	13f8 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1518:	0020      	movs	r0, r4
    151a:	6963      	ldr	r3, [r4, #20]
    151c:	4798      	blx	r3
    151e:	e76b      	b.n	13f8 <_spi_interrupt_handler+0xa8>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1520:	0020      	movs	r0, r4
    1522:	69e3      	ldr	r3, [r4, #28]
    1524:	4798      	blx	r3
    1526:	e77b      	b.n	1420 <_spi_interrupt_handler+0xd0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1528:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    152a:	2b01      	cmp	r3, #1
    152c:	d000      	beq.n	1530 <_spi_interrupt_handler+0x1e0>
    152e:	e786      	b.n	143e <_spi_interrupt_handler+0xee>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1530:	79e3      	ldrb	r3, [r4, #7]
    1532:	2b00      	cmp	r3, #0
    1534:	d000      	beq.n	1538 <_spi_interrupt_handler+0x1e8>
    1536:	e782      	b.n	143e <_spi_interrupt_handler+0xee>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1538:	3302      	adds	r3, #2
    153a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    153c:	3301      	adds	r3, #1
    153e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1540:	2200      	movs	r2, #0
    1542:	3335      	adds	r3, #53	; 0x35
    1544:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1546:	07fb      	lsls	r3, r7, #31
    1548:	d400      	bmi.n	154c <_spi_interrupt_handler+0x1fc>
    154a:	e76d      	b.n	1428 <_spi_interrupt_handler+0xd8>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    154c:	0020      	movs	r0, r4
    154e:	68e3      	ldr	r3, [r4, #12]
    1550:	4798      	blx	r3
    1552:	e769      	b.n	1428 <_spi_interrupt_handler+0xd8>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1554:	0020      	movs	r0, r4
    1556:	6a23      	ldr	r3, [r4, #32]
    1558:	4798      	blx	r3
    155a:	e770      	b.n	143e <_spi_interrupt_handler+0xee>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    155c:	2380      	movs	r3, #128	; 0x80
    155e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1560:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1562:	067b      	lsls	r3, r7, #25
    1564:	d400      	bmi.n	1568 <_spi_interrupt_handler+0x218>
    1566:	e76e      	b.n	1446 <_spi_interrupt_handler+0xf6>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1568:	6a63      	ldr	r3, [r4, #36]	; 0x24
    156a:	0020      	movs	r0, r4
    156c:	4798      	blx	r3
}
    156e:	e76a      	b.n	1446 <_spi_interrupt_handler+0xf6>
    1570:	200001e0 	.word	0x200001e0
    1574:	200001ec 	.word	0x200001ec

00001578 <detect_cube>:
extern volatile bool sensorsUpdate;

#define CUBE_MATCH_THRESHOLD 25


bool detect_cube(bool S0, bool S1, bool S2, uint8_t place) {
    1578:	b510      	push	{r4, lr}
    157a:	001c      	movs	r4, r3
	uint16_t value = 0;
	
	select_mux(S0, S1, S2);
    157c:	4b0f      	ldr	r3, [pc, #60]	; (15bc <detect_cube+0x44>)
    157e:	4798      	blx	r3
	switch (place)
    1580:	2c01      	cmp	r4, #1
    1582:	d00f      	beq.n	15a4 <detect_cube+0x2c>
    1584:	2c00      	cmp	r4, #0
    1586:	d005      	beq.n	1594 <detect_cube+0x1c>
    1588:	2c02      	cmp	r4, #2
    158a:	d00f      	beq.n	15ac <detect_cube+0x34>
    158c:	2c03      	cmp	r4, #3
    158e:	d011      	beq.n	15b4 <detect_cube+0x3c>
	uint16_t value = 0;
    1590:	2300      	movs	r3, #0
    1592:	e002      	b.n	159a <detect_cube+0x22>
	{
		case 0:
			value = read_ones();
    1594:	4b0a      	ldr	r3, [pc, #40]	; (15c0 <detect_cube+0x48>)
    1596:	4798      	blx	r3
    1598:	0003      	movs	r3, r0
    159a:	2032      	movs	r0, #50	; 0x32
    159c:	4298      	cmp	r0, r3
    159e:	4180      	sbcs	r0, r0
    15a0:	4240      	negs	r0, r0
	if (value > CUBE_DETECT_THRESHOLD) {
		return true;
	} else {
		return false;
	}
}
    15a2:	bd10      	pop	{r4, pc}
			value = read_tens();
    15a4:	4b07      	ldr	r3, [pc, #28]	; (15c4 <detect_cube+0x4c>)
    15a6:	4798      	blx	r3
    15a8:	0003      	movs	r3, r0
			break;
    15aa:	e7f6      	b.n	159a <detect_cube+0x22>
			value = read_hndrds();
    15ac:	4b06      	ldr	r3, [pc, #24]	; (15c8 <detect_cube+0x50>)
    15ae:	4798      	blx	r3
    15b0:	0003      	movs	r3, r0
			break;
    15b2:	e7f2      	b.n	159a <detect_cube+0x22>
			value = read_misc();
    15b4:	4b05      	ldr	r3, [pc, #20]	; (15cc <detect_cube+0x54>)
    15b6:	4798      	blx	r3
    15b8:	0003      	movs	r3, r0
			break;
    15ba:	e7ee      	b.n	159a <detect_cube+0x22>
    15bc:	00001a0d 	.word	0x00001a0d
    15c0:	00001a55 	.word	0x00001a55
    15c4:	00001a65 	.word	0x00001a65
    15c8:	00001a75 	.word	0x00001a75
    15cc:	00001a85 	.word	0x00001a85

000015d0 <formatData>:
void formatData(uint32_t cubes_detected)
{
	uint8_t i = 0;
	uint32_t temp = 0;
	
	sensorsUpdate = true;
    15d0:	4908      	ldr	r1, [pc, #32]	; (15f4 <formatData+0x24>)
    15d2:	2301      	movs	r3, #1
    15d4:	700b      	strb	r3, [r1, #0]
	for(i=0;i<4;i++)
	{
		cubeOutputs[i] = (uint8_t)((cubes_detected >> (24 - 8*i)) & 0xFF) ;
    15d6:	0e02      	lsrs	r2, r0, #24
    15d8:	4b07      	ldr	r3, [pc, #28]	; (15f8 <formatData+0x28>)
    15da:	701a      	strb	r2, [r3, #0]
    15dc:	0c02      	lsrs	r2, r0, #16
    15de:	b2d2      	uxtb	r2, r2
    15e0:	705a      	strb	r2, [r3, #1]
    15e2:	0a02      	lsrs	r2, r0, #8
    15e4:	b2d2      	uxtb	r2, r2
    15e6:	709a      	strb	r2, [r3, #2]
    15e8:	b2c0      	uxtb	r0, r0
    15ea:	70d8      	strb	r0, [r3, #3]
	}
	sensorsUpdate = false;
    15ec:	2300      	movs	r3, #0
    15ee:	700b      	strb	r3, [r1, #0]
	
}
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	20000178 	.word	0x20000178
    15f8:	200002c8 	.word	0x200002c8

000015fc <filterData>:
{
	static uint32_t prevCubesDetected = 0;
	static uint16_t cubeMatchCount = 0;
	static uint32_t filteredValue = 0;
	
	if(cubes_detected == prevCubesDetected)
    15fc:	4b0d      	ldr	r3, [pc, #52]	; (1634 <filterData+0x38>)
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	4283      	cmp	r3, r0
    1602:	d007      	beq.n	1614 <filterData+0x18>
			filteredValue = cubes_detected;
		}
	}
	else
	{
		cubeMatchCount = 0;
    1604:	2200      	movs	r2, #0
    1606:	4b0c      	ldr	r3, [pc, #48]	; (1638 <filterData+0x3c>)
    1608:	801a      	strh	r2, [r3, #0]
	}
	prevCubesDetected = cubes_detected;
    160a:	4b0a      	ldr	r3, [pc, #40]	; (1634 <filterData+0x38>)
    160c:	6018      	str	r0, [r3, #0]
	return filteredValue;
    160e:	4b0b      	ldr	r3, [pc, #44]	; (163c <filterData+0x40>)
    1610:	6818      	ldr	r0, [r3, #0]
}
    1612:	4770      	bx	lr
		cubeMatchCount ++;
    1614:	4b08      	ldr	r3, [pc, #32]	; (1638 <filterData+0x3c>)
    1616:	881b      	ldrh	r3, [r3, #0]
    1618:	3301      	adds	r3, #1
    161a:	b29b      	uxth	r3, r3
		if(cubeMatchCount > CUBE_MATCH_THRESHOLD)
    161c:	2b19      	cmp	r3, #25
    161e:	d802      	bhi.n	1626 <filterData+0x2a>
		cubeMatchCount ++;
    1620:	4a05      	ldr	r2, [pc, #20]	; (1638 <filterData+0x3c>)
    1622:	8013      	strh	r3, [r2, #0]
    1624:	e7f1      	b.n	160a <filterData+0xe>
			cubeMatchCount =0;
    1626:	2200      	movs	r2, #0
    1628:	4b03      	ldr	r3, [pc, #12]	; (1638 <filterData+0x3c>)
    162a:	801a      	strh	r2, [r3, #0]
			filteredValue = cubes_detected;
    162c:	4b03      	ldr	r3, [pc, #12]	; (163c <filterData+0x40>)
    162e:	6018      	str	r0, [r3, #0]
    1630:	e7eb      	b.n	160a <filterData+0xe>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	20000134 	.word	0x20000134
    1638:	2000012c 	.word	0x2000012c
    163c:	20000130 	.word	0x20000130

00001640 <read_all_values>:

/*
 * Reads through all different values, detects the cube, 
 * creates an number in the form of the values
 */
void read_all_values(){
    1640:	b5f0      	push	{r4, r5, r6, r7, lr}
    1642:	46de      	mov	lr, fp
    1644:	4657      	mov	r7, sl
    1646:	464e      	mov	r6, r9
    1648:	4645      	mov	r5, r8
    164a:	b5e0      	push	{r5, r6, r7, lr}
    164c:	b085      	sub	sp, #20
	uint8_t i, place;
	uint8_t ind;
	static bool S0;
	static bool S1;
	static bool S2;
    volatile bool cube = false;
    164e:	2200      	movs	r2, #0
    1650:	ab02      	add	r3, sp, #8
    1652:	71da      	strb	r2, [r3, #7]
	uint32_t cubes_detected = 0;
    1654:	2300      	movs	r3, #0
    1656:	4698      	mov	r8, r3
	uint32_t cubes_detected_filtered= 0;
	static uint32_t prev_cubes_detected_filtered = 0;
	
	for (i = 0; i < 8; i++)
    1658:	2600      	movs	r6, #0
    165a:	e023      	b.n	16a4 <read_all_values+0x64>
	{
		S0 = (bool) (i & 0x1);
		S1 = (bool) ((i >> 1) & 0x1);
		S2 = (bool) ((i >> 2) & 0x1);
		for (place = 0; place < 3; place++)
    165c:	3401      	adds	r4, #1
    165e:	b2e4      	uxtb	r4, r4
    1660:	350a      	adds	r5, #10
    1662:	b2ed      	uxtb	r5, r5
    1664:	2c03      	cmp	r4, #3
    1666:	d018      	beq.n	169a <read_all_values+0x5a>
		{
			ind = 2 + i + place*10;
			// Put boolean value from detect cube at place indicated by ind
			//delay_ms(10);
			cube = detect_cube(S0, S1, S2, place);
    1668:	4653      	mov	r3, sl
    166a:	781a      	ldrb	r2, [r3, #0]
    166c:	464b      	mov	r3, r9
    166e:	7819      	ldrb	r1, [r3, #0]
    1670:	7838      	ldrb	r0, [r7, #0]
    1672:	0023      	movs	r3, r4
    1674:	4e33      	ldr	r6, [pc, #204]	; (1744 <read_all_values+0x104>)
    1676:	47b0      	blx	r6
    1678:	ab02      	add	r3, sp, #8
    167a:	71d8      	strb	r0, [r3, #7]
    167c:	3307      	adds	r3, #7
			//delay_ms(10);
			if(cube == true)
    167e:	781b      	ldrb	r3, [r3, #0]
    1680:	2b00      	cmp	r3, #0
    1682:	d0eb      	beq.n	165c <read_all_values+0x1c>
			{
				cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    1684:	ab02      	add	r3, sp, #8
    1686:	1dda      	adds	r2, r3, #7
    1688:	79db      	ldrb	r3, [r3, #7]
    168a:	b2db      	uxtb	r3, r3
    168c:	40ab      	lsls	r3, r5
    168e:	4641      	mov	r1, r8
    1690:	4319      	orrs	r1, r3
    1692:	4688      	mov	r8, r1
				cube = false;
    1694:	2300      	movs	r3, #0
    1696:	7013      	strb	r3, [r2, #0]
    1698:	e7e0      	b.n	165c <read_all_values+0x1c>
    169a:	9e01      	ldr	r6, [sp, #4]
	for (i = 0; i < 8; i++)
    169c:	3601      	adds	r6, #1
    169e:	b2f6      	uxtb	r6, r6
    16a0:	2e08      	cmp	r6, #8
    16a2:	d014      	beq.n	16ce <read_all_values+0x8e>
		S0 = (bool) (i & 0x1);
    16a4:	2301      	movs	r3, #1
    16a6:	001a      	movs	r2, r3
    16a8:	4032      	ands	r2, r6
    16aa:	4927      	ldr	r1, [pc, #156]	; (1748 <read_all_values+0x108>)
    16ac:	700a      	strb	r2, [r1, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    16ae:	0872      	lsrs	r2, r6, #1
    16b0:	401a      	ands	r2, r3
    16b2:	4926      	ldr	r1, [pc, #152]	; (174c <read_all_values+0x10c>)
    16b4:	700a      	strb	r2, [r1, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    16b6:	08b2      	lsrs	r2, r6, #2
    16b8:	4013      	ands	r3, r2
    16ba:	4a25      	ldr	r2, [pc, #148]	; (1750 <read_all_values+0x110>)
    16bc:	7013      	strb	r3, [r2, #0]
    16be:	1cb5      	adds	r5, r6, #2
    16c0:	b2ed      	uxtb	r5, r5
		for (place = 0; place < 3; place++)
    16c2:	2400      	movs	r4, #0
			cube = detect_cube(S0, S1, S2, place);
    16c4:	4692      	mov	sl, r2
    16c6:	4689      	mov	r9, r1
    16c8:	4f1f      	ldr	r7, [pc, #124]	; (1748 <read_all_values+0x108>)
    16ca:	9601      	str	r6, [sp, #4]
    16cc:	e7cc      	b.n	1668 <read_all_values+0x28>
    16ce:	2400      	movs	r4, #0
		}
	}
	
	for (i = 0; i < 6; i++)
	{
		S0 = (bool) (i & 0x1);
    16d0:	4b1d      	ldr	r3, [pc, #116]	; (1748 <read_all_values+0x108>)
    16d2:	4699      	mov	r9, r3
		S1 = (bool) ((i >> 1) & 0x1);
    16d4:	4f1d      	ldr	r7, [pc, #116]	; (174c <read_all_values+0x10c>)
		S2 = (bool) ((i >> 2) & 0x1);
    16d6:	4b1e      	ldr	r3, [pc, #120]	; (1750 <read_all_values+0x110>)
    16d8:	469b      	mov	fp, r3
    16da:	4645      	mov	r5, r8
		S0 = (bool) (i & 0x1);
    16dc:	2201      	movs	r2, #1
    16de:	0010      	movs	r0, r2
    16e0:	4020      	ands	r0, r4
    16e2:	464b      	mov	r3, r9
    16e4:	7018      	strb	r0, [r3, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    16e6:	0863      	lsrs	r3, r4, #1
    16e8:	0011      	movs	r1, r2
    16ea:	4019      	ands	r1, r3
    16ec:	7039      	strb	r1, [r7, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    16ee:	08a6      	lsrs	r6, r4, #2
    16f0:	4032      	ands	r2, r6
    16f2:	465e      	mov	r6, fp
    16f4:	7032      	strb	r2, [r6, #0]
		place = 3;
		ind = i + ((i/2)*8);
    16f6:	00db      	lsls	r3, r3, #3
    16f8:	18e3      	adds	r3, r4, r3
    16fa:	b2db      	uxtb	r3, r3
    16fc:	4698      	mov	r8, r3
		// Put boolean value from detect cube at place indicated by ind
		cube = detect_cube(S0, S1, S2, place);
    16fe:	2303      	movs	r3, #3
    1700:	4e10      	ldr	r6, [pc, #64]	; (1744 <read_all_values+0x104>)
    1702:	47b0      	blx	r6
    1704:	ab02      	add	r3, sp, #8
    1706:	71d8      	strb	r0, [r3, #7]
    1708:	3307      	adds	r3, #7
		cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    170a:	781b      	ldrb	r3, [r3, #0]
    170c:	b2db      	uxtb	r3, r3
    170e:	4642      	mov	r2, r8
    1710:	4093      	lsls	r3, r2
    1712:	431d      	orrs	r5, r3
	for (i = 0; i < 6; i++)
    1714:	3401      	adds	r4, #1
    1716:	b2e4      	uxtb	r4, r4
    1718:	2c06      	cmp	r4, #6
    171a:	d1df      	bne.n	16dc <read_all_values+0x9c>
	}
	
	cubes_detected_filtered = filterData(cubes_detected); // If the cube is placed there for 200 msec than assume that we have a cube there
    171c:	0028      	movs	r0, r5
    171e:	4b0d      	ldr	r3, [pc, #52]	; (1754 <read_all_values+0x114>)
    1720:	4798      	blx	r3
    1722:	0004      	movs	r4, r0
	 
	if(cubes_detected_filtered != prev_cubes_detected_filtered)
    1724:	4b0c      	ldr	r3, [pc, #48]	; (1758 <read_all_values+0x118>)
    1726:	681b      	ldr	r3, [r3, #0]
    1728:	4298      	cmp	r0, r3
    172a:	d001      	beq.n	1730 <read_all_values+0xf0>
	{
		formatData(cubes_detected_filtered);
    172c:	4b0b      	ldr	r3, [pc, #44]	; (175c <read_all_values+0x11c>)
    172e:	4798      	blx	r3
	}
	prev_cubes_detected_filtered = cubes_detected_filtered;
    1730:	4b09      	ldr	r3, [pc, #36]	; (1758 <read_all_values+0x118>)
    1732:	601c      	str	r4, [r3, #0]
}
    1734:	b005      	add	sp, #20
    1736:	bc3c      	pop	{r2, r3, r4, r5}
    1738:	4690      	mov	r8, r2
    173a:	4699      	mov	r9, r3
    173c:	46a2      	mov	sl, r4
    173e:	46ab      	mov	fp, r5
    1740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	00001579 	.word	0x00001579
    1748:	20000128 	.word	0x20000128
    174c:	20000129 	.word	0x20000129
    1750:	2000012a 	.word	0x2000012a
    1754:	000015fd 	.word	0x000015fd
    1758:	20000138 	.word	0x20000138
    175c:	000015d1 	.word	0x000015d1

00001760 <i2c_read_request_callback>:
	state = port_pin_get_input_level(DETECT_PIN);
	return state;
}

void i2c_read_request_callback(struct i2c_slave_module *const module)
{
    1760:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1762:	4b10      	ldr	r3, [pc, #64]	; (17a4 <i2c_read_request_callback+0x44>)
    1764:	6a1b      	ldr	r3, [r3, #32]
	static uint8_t count = 0;
	static uint8_t tempCubeOutputs[4];
	if( port_pin_get_input_level(DETECT_PIN) == false)
    1766:	01db      	lsls	r3, r3, #7
    1768:	d415      	bmi.n	1796 <i2c_read_request_callback+0x36>
	{
		
		//delay_cycles_us(2);
		if(sensorsUpdate == false)
    176a:	4b0f      	ldr	r3, [pc, #60]	; (17a8 <i2c_read_request_callback+0x48>)
    176c:	781b      	ldrb	r3, [r3, #0]
    176e:	2b00      	cmp	r3, #0
    1770:	d109      	bne.n	1786 <i2c_read_request_callback+0x26>
		{
			tempCubeOutputs[0]	   = cubeOutputs[0];
    1772:	4a0e      	ldr	r2, [pc, #56]	; (17ac <i2c_read_request_callback+0x4c>)
    1774:	7811      	ldrb	r1, [r2, #0]
    1776:	4b0e      	ldr	r3, [pc, #56]	; (17b0 <i2c_read_request_callback+0x50>)
    1778:	7019      	strb	r1, [r3, #0]
			tempCubeOutputs[1]	   = cubeOutputs[1];
    177a:	7851      	ldrb	r1, [r2, #1]
    177c:	7059      	strb	r1, [r3, #1]
			tempCubeOutputs[2]	   = cubeOutputs[2];
    177e:	7891      	ldrb	r1, [r2, #2]
    1780:	7099      	strb	r1, [r3, #2]
			tempCubeOutputs[3]	   = cubeOutputs[3];
    1782:	78d2      	ldrb	r2, [r2, #3]
    1784:	70da      	strb	r2, [r3, #3]
			//tempCubeOutputs[2]	   = 0x77;
			//tempCubeOutputs[3]	   = 0x11;
		}
		
		//rd_packet.data_length = DATA_LENGTH_SENSORS;
		rd_packet.data_length = DATA_LENGTH_SENSORS;
    1786:	490b      	ldr	r1, [pc, #44]	; (17b4 <i2c_read_request_callback+0x54>)
    1788:	2304      	movs	r3, #4
    178a:	800b      	strh	r3, [r1, #0]
		rd_packet.data        = tempCubeOutputs;
    178c:	4b08      	ldr	r3, [pc, #32]	; (17b0 <i2c_read_request_callback+0x50>)
    178e:	604b      	str	r3, [r1, #4]
		i2c_slave_write_packet_job(module, &rd_packet);
    1790:	4b09      	ldr	r3, [pc, #36]	; (17b8 <i2c_read_request_callback+0x58>)
    1792:	4798      	blx	r3
		rd_packet.data        = tempCubeOutputs;
		//i2c_slave_write_packet_job(module, &rd_packet);
	}
	
	
}
    1794:	bd10      	pop	{r4, pc}
		rd_packet.data_length = 0;
    1796:	4b07      	ldr	r3, [pc, #28]	; (17b4 <i2c_read_request_callback+0x54>)
    1798:	2200      	movs	r2, #0
    179a:	801a      	strh	r2, [r3, #0]
		rd_packet.data        = tempCubeOutputs;
    179c:	4a04      	ldr	r2, [pc, #16]	; (17b0 <i2c_read_request_callback+0x50>)
    179e:	605a      	str	r2, [r3, #4]
}
    17a0:	e7f8      	b.n	1794 <i2c_read_request_callback+0x34>
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	41004400 	.word	0x41004400
    17a8:	20000178 	.word	0x20000178
    17ac:	200002c8 	.word	0x200002c8
    17b0:	2000013c 	.word	0x2000013c
    17b4:	200001f8 	.word	0x200001f8
    17b8:	00000caf 	.word	0x00000caf

000017bc <configure_i2c_slave>:
	
}

//! [initialize_i2c]
void configure_i2c_slave(void)
{
    17bc:	b530      	push	{r4, r5, lr}
    17be:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    17c0:	2200      	movs	r2, #0
    17c2:	466b      	mov	r3, sp
    17c4:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	039b      	lsls	r3, r3, #14
    17ca:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
    17cc:	2301      	movs	r3, #1
    17ce:	425b      	negs	r3, r3
    17d0:	4669      	mov	r1, sp
    17d2:	810b      	strh	r3, [r1, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    17d4:	2300      	movs	r3, #0
    17d6:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
    17d8:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    17da:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
    17dc:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    17de:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    17e0:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby = false;
    17e2:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    17e4:	2224      	movs	r2, #36	; 0x24
    17e6:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    17e8:	3201      	adds	r2, #1
    17ea:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    17ec:	3201      	adds	r2, #1
    17ee:	548b      	strb	r3, [r1, r2]
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
    
	config_i2c_slave.generator_source = GCLK_GENERATOR_3;
    17f0:	2303      	movs	r3, #3
    17f2:	466a      	mov	r2, sp
    17f4:	764b      	strb	r3, [r1, #25]
	config_i2c_slave.address      = SLAVE_ADDRESS;
    17f6:	330f      	adds	r3, #15
    17f8:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
	
	config_i2c_slave.pinmux_pad0 =  PINMUX_PA22D_SERCOM2_PAD0;
    17fa:	4b0f      	ldr	r3, [pc, #60]	; (1838 <configure_i2c_slave+0x7c>)
    17fc:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 =  PINMUX_PA23D_SERCOM2_PAD1;
    17fe:	4b0f      	ldr	r3, [pc, #60]	; (183c <configure_i2c_slave+0x80>)
    1800:	9308      	str	r3, [sp, #32]
	
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE , &config_i2c_slave);
    1802:	4d0f      	ldr	r5, [pc, #60]	; (1840 <configure_i2c_slave+0x84>)
    1804:	490f      	ldr	r1, [pc, #60]	; (1844 <configure_i2c_slave+0x88>)
    1806:	0028      	movs	r0, r5
    1808:	4b0f      	ldr	r3, [pc, #60]	; (1848 <configure_i2c_slave+0x8c>)
    180a:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    180c:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    180e:	0020      	movs	r0, r4
    1810:	4b0e      	ldr	r3, [pc, #56]	; (184c <configure_i2c_slave+0x90>)
    1812:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1814:	231f      	movs	r3, #31
    1816:	4018      	ands	r0, r3
    1818:	3b1e      	subs	r3, #30
    181a:	4083      	lsls	r3, r0
    181c:	4a0c      	ldr	r2, [pc, #48]	; (1850 <configure_i2c_slave+0x94>)
    181e:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    1820:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    1822:	2203      	movs	r2, #3
    1824:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    1826:	421a      	tst	r2, r3
    1828:	d1fc      	bne.n	1824 <configure_i2c_slave+0x68>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    182a:	6823      	ldr	r3, [r4, #0]
    182c:	2202      	movs	r2, #2
    182e:	4313      	orrs	r3, r2
    1830:	6023      	str	r3, [r4, #0]
	i2c_slave_enable(&i2c_slave_instance);
	
}
    1832:	b00b      	add	sp, #44	; 0x2c
    1834:	bd30      	pop	{r4, r5, pc}
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	00160003 	.word	0x00160003
    183c:	00170003 	.word	0x00170003
    1840:	20000200 	.word	0x20000200
    1844:	42001000 	.word	0x42001000
    1848:	00000b05 	.word	0x00000b05
    184c:	000010ed 	.word	0x000010ed
    1850:	e000e100 	.word	0xe000e100

00001854 <configure_i2c_slave_callbacks>:

void configure_i2c_slave_callbacks(void)
{
    1854:	b510      	push	{r4, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,I2C_SLAVE_CALLBACK_READ_REQUEST);
    1856:	4c07      	ldr	r4, [pc, #28]	; (1874 <configure_i2c_slave_callbacks+0x20>)
    1858:	2202      	movs	r2, #2
    185a:	4907      	ldr	r1, [pc, #28]	; (1878 <configure_i2c_slave_callbacks+0x24>)
    185c:	0020      	movs	r0, r4
    185e:	4b07      	ldr	r3, [pc, #28]	; (187c <configure_i2c_slave_callbacks+0x28>)
    1860:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1862:	2225      	movs	r2, #37	; 0x25
    1864:	5ca3      	ldrb	r3, [r4, r2]
    1866:	2104      	movs	r1, #4
    1868:	430b      	orrs	r3, r1
    186a:	54a3      	strb	r3, [r4, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    186c:	6823      	ldr	r3, [r4, #0]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    186e:	3a23      	subs	r2, #35	; 0x23
    1870:	759a      	strb	r2, [r3, #22]
	i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_READ_REQUEST);
}
    1872:	bd10      	pop	{r4, pc}
    1874:	20000200 	.word	0x20000200
    1878:	00001761 	.word	0x00001761
    187c:	00000c95 	.word	0x00000c95

00001880 <configure_adc>:

struct adc_module adc_instance;
uint16_t* adc_result = NULL;

void configure_adc()
{
    1880:	b510      	push	{r4, lr}
    1882:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1884:	4668      	mov	r0, sp
    1886:	4b1a      	ldr	r3, [pc, #104]	; (18f0 <configure_adc+0x70>)
    1888:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    188a:	2002      	movs	r0, #2
    188c:	4b19      	ldr	r3, [pc, #100]	; (18f4 <configure_adc+0x74>)
    188e:	4798      	blx	r3
    1890:	4b19      	ldr	r3, [pc, #100]	; (18f8 <configure_adc+0x78>)
    1892:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1894:	2301      	movs	r3, #1
    1896:	466a      	mov	r2, sp
    1898:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CTRLB_PRESCALER_DIV16;
    189a:	2280      	movs	r2, #128	; 0x80
    189c:	0092      	lsls	r2, r2, #2
    189e:	4669      	mov	r1, sp
    18a0:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    18a2:	3afb      	subs	r2, #251	; 0xfb
    18a4:	3aff      	subs	r2, #255	; 0xff
    18a6:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    18a8:	22c0      	movs	r2, #192	; 0xc0
    18aa:	0152      	lsls	r2, r2, #5
    18ac:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    18ae:	2230      	movs	r2, #48	; 0x30
    18b0:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    18b2:	466a      	mov	r2, sp
    18b4:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
    18b6:	4c11      	ldr	r4, [pc, #68]	; (18fc <configure_adc+0x7c>)
    18b8:	4911      	ldr	r1, [pc, #68]	; (1900 <configure_adc+0x80>)
    18ba:	0020      	movs	r0, r4
    18bc:	4b11      	ldr	r3, [pc, #68]	; (1904 <configure_adc+0x84>)
    18be:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    18c0:	6822      	ldr	r2, [r4, #0]
    18c2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    18c4:	b25b      	sxtb	r3, r3
    18c6:	2b00      	cmp	r3, #0
    18c8:	dbfb      	blt.n	18c2 <configure_adc+0x42>
    18ca:	2180      	movs	r1, #128	; 0x80
    18cc:	0209      	lsls	r1, r1, #8
    18ce:	4b0e      	ldr	r3, [pc, #56]	; (1908 <configure_adc+0x88>)
    18d0:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    18d2:	230f      	movs	r3, #15
    18d4:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    18d6:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    18d8:	7813      	ldrb	r3, [r2, #0]
    18da:	2102      	movs	r1, #2
    18dc:	430b      	orrs	r3, r1
    18de:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <configure_adc+0x7c>)
    18e2:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    18e4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    18e6:	b25b      	sxtb	r3, r3
    18e8:	2b00      	cmp	r3, #0
    18ea:	dbfb      	blt.n	18e4 <configure_adc+0x64>
	adc_enable(&adc_instance);
}
    18ec:	b00c      	add	sp, #48	; 0x30
    18ee:	bd10      	pop	{r4, pc}
    18f0:	00000245 	.word	0x00000245
    18f4:	000026c1 	.word	0x000026c1
    18f8:	20000140 	.word	0x20000140
    18fc:	20000234 	.word	0x20000234
    1900:	42002000 	.word	0x42002000
    1904:	0000028d 	.word	0x0000028d
    1908:	e000e100 	.word	0xe000e100

0000190c <configure_mux_select>:

void configure_mux_select() {
    190c:	b530      	push	{r4, r5, lr}
    190e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1910:	ac01      	add	r4, sp, #4
    1912:	2301      	movs	r3, #1
    1914:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1916:	2200      	movs	r2, #0
    1918:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    191a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MUX_S0, &config_port_pin);
    191c:	0021      	movs	r1, r4
    191e:	200f      	movs	r0, #15
    1920:	4d04      	ldr	r5, [pc, #16]	; (1934 <configure_mux_select+0x28>)
    1922:	47a8      	blx	r5
	port_pin_set_config(MUX_S1, &config_port_pin);
    1924:	0021      	movs	r1, r4
    1926:	2010      	movs	r0, #16
    1928:	47a8      	blx	r5
	port_pin_set_config(MUX_S2, &config_port_pin);
    192a:	0021      	movs	r1, r4
    192c:	2011      	movs	r0, #17
    192e:	47a8      	blx	r5
}
    1930:	b003      	add	sp, #12
    1932:	bd30      	pop	{r4, r5, pc}
    1934:	00000ae1 	.word	0x00000ae1

00001938 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    1938:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    193a:	4b2d      	ldr	r3, [pc, #180]	; (19f0 <adc_start_read_result+0xb8>)
    193c:	6819      	ldr	r1, [r3, #0]
    193e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1940:	b25b      	sxtb	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	dbfb      	blt.n	193e <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    1946:	690b      	ldr	r3, [r1, #16]
    1948:	221f      	movs	r2, #31
    194a:	4393      	bics	r3, r2
    194c:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    194e:	6108      	str	r0, [r1, #16]
    1950:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1952:	b25b      	sxtb	r3, r3
    1954:	2b00      	cmp	r3, #0
    1956:	dbfb      	blt.n	1950 <adc_start_read_result+0x18>
    1958:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    195a:	b25b      	sxtb	r3, r3
    195c:	2b00      	cmp	r3, #0
    195e:	dbfb      	blt.n	1958 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1960:	7b0b      	ldrb	r3, [r1, #12]
    1962:	2202      	movs	r2, #2
    1964:	4313      	orrs	r3, r2
    1966:	730b      	strb	r3, [r1, #12]
    1968:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    196a:	b25b      	sxtb	r3, r3
    196c:	2b00      	cmp	r3, #0
    196e:	dbfb      	blt.n	1968 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1970:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1972:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1974:	2402      	movs	r4, #2
    1976:	e001      	b.n	197c <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    1978:	4210      	tst	r0, r2
    197a:	d10a      	bne.n	1992 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    197c:	7e0b      	ldrb	r3, [r1, #24]
    197e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1980:	0002      	movs	r2, r0
    1982:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1984:	421d      	tst	r5, r3
    1986:	d000      	beq.n	198a <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    1988:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    198a:	421c      	tst	r4, r3
    198c:	d0f4      	beq.n	1978 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    198e:	432a      	orrs	r2, r5
    1990:	e7f2      	b.n	1978 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1992:	7e0a      	ldrb	r2, [r1, #24]
    1994:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1996:	2301      	movs	r3, #1
    1998:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    199a:	0750      	lsls	r0, r2, #29
    199c:	d501      	bpl.n	19a2 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    199e:	2002      	movs	r0, #2
    19a0:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    19a2:	0792      	lsls	r2, r2, #30
    19a4:	d501      	bpl.n	19aa <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    19a6:	2204      	movs	r2, #4
    19a8:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    19aa:	07db      	lsls	r3, r3, #31
    19ac:	d403      	bmi.n	19b6 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    19ae:	4b11      	ldr	r3, [pc, #68]	; (19f4 <adc_start_read_result+0xbc>)
    19b0:	681b      	ldr	r3, [r3, #0]
	return temp;
    19b2:	8818      	ldrh	r0, [r3, #0]
}
    19b4:	bd30      	pop	{r4, r5, pc}
    19b6:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    19b8:	b25b      	sxtb	r3, r3
    19ba:	2b00      	cmp	r3, #0
    19bc:	dbfb      	blt.n	19b6 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    19be:	4b0d      	ldr	r3, [pc, #52]	; (19f4 <adc_start_read_result+0xbc>)
    19c0:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    19c2:	8b4a      	ldrh	r2, [r1, #26]
    19c4:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    19c6:	4b0a      	ldr	r3, [pc, #40]	; (19f0 <adc_start_read_result+0xb8>)
    19c8:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    19ca:	2301      	movs	r3, #1
    19cc:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    19ce:	7e0a      	ldrb	r2, [r1, #24]
    19d0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    19d2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    19d4:	0750      	lsls	r0, r2, #29
    19d6:	d501      	bpl.n	19dc <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    19d8:	2002      	movs	r0, #2
    19da:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    19dc:	0792      	lsls	r2, r2, #30
    19de:	d501      	bpl.n	19e4 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    19e0:	2204      	movs	r2, #4
    19e2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    19e4:	075b      	lsls	r3, r3, #29
    19e6:	d5e2      	bpl.n	19ae <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    19e8:	2302      	movs	r3, #2
    19ea:	760b      	strb	r3, [r1, #24]
    19ec:	e7df      	b.n	19ae <adc_start_read_result+0x76>
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	20000234 	.word	0x20000234
    19f4:	20000140 	.word	0x20000140

000019f8 <ir_sensor_init>:

void ir_sensor_init()
{
    19f8:	b510      	push	{r4, lr}
	configure_adc();
    19fa:	4b02      	ldr	r3, [pc, #8]	; (1a04 <ir_sensor_init+0xc>)
    19fc:	4798      	blx	r3
	configure_mux_select();
    19fe:	4b02      	ldr	r3, [pc, #8]	; (1a08 <ir_sensor_init+0x10>)
    1a00:	4798      	blx	r3
}
    1a02:	bd10      	pop	{r4, pc}
    1a04:	00001881 	.word	0x00001881
    1a08:	0000190d 	.word	0x0000190d

00001a0c <select_mux>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d010      	beq.n	1a32 <select_mux+0x26>
		port_base->OUTSET.reg = pin_mask;
    1a10:	2080      	movs	r0, #128	; 0x80
    1a12:	0200      	lsls	r0, r0, #8
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <select_mux+0x44>)
    1a16:	6198      	str	r0, [r3, #24]
	if (level) {
    1a18:	2900      	cmp	r1, #0
    1a1a:	d00f      	beq.n	1a3c <select_mux+0x30>
		port_base->OUTSET.reg = pin_mask;
    1a1c:	2180      	movs	r1, #128	; 0x80
    1a1e:	0249      	lsls	r1, r1, #9
    1a20:	4b0b      	ldr	r3, [pc, #44]	; (1a50 <select_mux+0x44>)
    1a22:	6199      	str	r1, [r3, #24]
	if (level) {
    1a24:	2a00      	cmp	r2, #0
    1a26:	d10e      	bne.n	1a46 <select_mux+0x3a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a28:	2280      	movs	r2, #128	; 0x80
    1a2a:	0292      	lsls	r2, r2, #10
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <select_mux+0x44>)
    1a2e:	615a      	str	r2, [r3, #20]

void select_mux(const bool S0, const bool S1, const bool S2) {
	port_pin_set_output_level(MUX_S0, S0);
	port_pin_set_output_level(MUX_S1, S1);
	port_pin_set_output_level(MUX_S2, S2);
}
    1a30:	4770      	bx	lr
    1a32:	2080      	movs	r0, #128	; 0x80
    1a34:	0200      	lsls	r0, r0, #8
    1a36:	4b06      	ldr	r3, [pc, #24]	; (1a50 <select_mux+0x44>)
    1a38:	6158      	str	r0, [r3, #20]
    1a3a:	e7ed      	b.n	1a18 <select_mux+0xc>
    1a3c:	2180      	movs	r1, #128	; 0x80
    1a3e:	0249      	lsls	r1, r1, #9
    1a40:	4b03      	ldr	r3, [pc, #12]	; (1a50 <select_mux+0x44>)
    1a42:	6159      	str	r1, [r3, #20]
    1a44:	e7ee      	b.n	1a24 <select_mux+0x18>
		port_base->OUTSET.reg = pin_mask;
    1a46:	2280      	movs	r2, #128	; 0x80
    1a48:	0292      	lsls	r2, r2, #10
    1a4a:	4b01      	ldr	r3, [pc, #4]	; (1a50 <select_mux+0x44>)
    1a4c:	619a      	str	r2, [r3, #24]
    1a4e:	e7ef      	b.n	1a30 <select_mux+0x24>
    1a50:	41004400 	.word	0x41004400

00001a54 <read_ones>:

uint16_t read_ones() {
    1a54:	b510      	push	{r4, lr}
	return adc_start_read_result(ONES_CHANNEL);
    1a56:	2000      	movs	r0, #0
    1a58:	4b01      	ldr	r3, [pc, #4]	; (1a60 <read_ones+0xc>)
    1a5a:	4798      	blx	r3
}
    1a5c:	bd10      	pop	{r4, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	00001939 	.word	0x00001939

00001a64 <read_tens>:

uint16_t read_tens() {
    1a64:	b510      	push	{r4, lr}
	return adc_start_read_result(TENS_CHANNEL);
    1a66:	2004      	movs	r0, #4
    1a68:	4b01      	ldr	r3, [pc, #4]	; (1a70 <read_tens+0xc>)
    1a6a:	4798      	blx	r3
}
    1a6c:	bd10      	pop	{r4, pc}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	00001939 	.word	0x00001939

00001a74 <read_hndrds>:

uint16_t read_hndrds() {
    1a74:	b510      	push	{r4, lr}
	return adc_start_read_result(HNDRDS_CHANNEL);
    1a76:	2003      	movs	r0, #3
    1a78:	4b01      	ldr	r3, [pc, #4]	; (1a80 <read_hndrds+0xc>)
    1a7a:	4798      	blx	r3
}
    1a7c:	bd10      	pop	{r4, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	00001939 	.word	0x00001939

00001a84 <read_misc>:

uint16_t read_misc() {
    1a84:	b510      	push	{r4, lr}
	return adc_start_read_result(MISC_CHANNEL);
    1a86:	2002      	movs	r0, #2
    1a88:	4b01      	ldr	r3, [pc, #4]	; (1a90 <read_misc+0xc>)
    1a8a:	4798      	blx	r3
    1a8c:	bd10      	pop	{r4, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	00001939 	.word	0x00001939

00001a94 <transfer_done>:
	
}

static void transfer_done(struct dma_resource* const resource )
{
	transferDone = true;
    1a94:	2201      	movs	r2, #1
    1a96:	4b01      	ldr	r3, [pc, #4]	; (1a9c <transfer_done+0x8>)
    1a98:	701a      	strb	r2, [r3, #0]
}
    1a9a:	4770      	bx	lr
    1a9c:	20000179 	.word	0x20000179

00001aa0 <sourceRegisterInit>:
{
    1aa0:	2300      	movs	r3, #0
		DMASourceRegister[i]	=	0x00;
    1aa2:	490a      	ldr	r1, [pc, #40]	; (1acc <sourceRegisterInit+0x2c>)
    1aa4:	2200      	movs	r2, #0
    1aa6:	54ca      	strb	r2, [r1, r3]
    1aa8:	3301      	adds	r3, #1
	for(i=0;i<STARTZEROS;i++)
    1aaa:	2b3c      	cmp	r3, #60	; 0x3c
    1aac:	d1fb      	bne.n	1aa6 <sourceRegisterInit+0x6>
		DMASourceRegister[i]	=	0x88;
    1aae:	4907      	ldr	r1, [pc, #28]	; (1acc <sourceRegisterInit+0x2c>)
    1ab0:	2288      	movs	r2, #136	; 0x88
    1ab2:	54ca      	strb	r2, [r1, r3]
    1ab4:	3301      	adds	r3, #1
	for(i=STARTZEROS;i<STARTZEROS + NOLEDS*NoBytesLED ;i++)
    1ab6:	2b60      	cmp	r3, #96	; 0x60
    1ab8:	d1fb      	bne.n	1ab2 <sourceRegisterInit+0x12>
    1aba:	3b3c      	subs	r3, #60	; 0x3c
		DMASourceRegister[i]    =   0x00;
    1abc:	4903      	ldr	r1, [pc, #12]	; (1acc <sourceRegisterInit+0x2c>)
    1abe:	2200      	movs	r2, #0
    1ac0:	54ca      	strb	r2, [r1, r3]
    1ac2:	3301      	adds	r3, #1
	for(i=NOLEDS*NoBytesLED;i<STARTZEROS;i++)
    1ac4:	2b3c      	cmp	r3, #60	; 0x3c
    1ac6:	d1fb      	bne.n	1ac0 <sourceRegisterInit+0x20>
}
    1ac8:	4770      	bx	lr
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	200002cc 	.word	0x200002cc

00001ad0 <setup_DMA>:
	dma_descriptor_create(descriptor, &descriptor_config);

}

void setup_DMA()
{
    1ad0:	b570      	push	{r4, r5, r6, lr}
    1ad2:	b086      	sub	sp, #24
	dma_get_config_defaults(&config);
    1ad4:	4668      	mov	r0, sp
    1ad6:	4b1a      	ldr	r3, [pc, #104]	; (1b40 <setup_DMA+0x70>)
    1ad8:	4798      	blx	r3
	config.peripheral_trigger = SERCOM0_DMAC_ID_TX;
    1ada:	2302      	movs	r3, #2
    1adc:	2502      	movs	r5, #2
    1ade:	466a      	mov	r2, sp
    1ae0:	7053      	strb	r3, [r2, #1]
	config.trigger_action     = DMA_TRIGGER_ACTON_BEAT;
    1ae2:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    1ae4:	4c17      	ldr	r4, [pc, #92]	; (1b44 <setup_DMA+0x74>)
    1ae6:	4669      	mov	r1, sp
    1ae8:	0020      	movs	r0, r4
    1aea:	4b17      	ldr	r3, [pc, #92]	; (1b48 <setup_DMA+0x78>)
    1aec:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    1aee:	2201      	movs	r2, #1
    1af0:	466b      	mov	r3, sp
    1af2:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1af4:	2300      	movs	r3, #0
    1af6:	4669      	mov	r1, sp
    1af8:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1afa:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1afc:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    1afe:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    1b00:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1b02:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    1b04:	9305      	str	r3, [sp, #20]
	descriptor_config.dst_increment_enable = false;
    1b06:	714b      	strb	r3, [r1, #5]
	descriptor_config.block_transfer_count = blockTransferCount;
    1b08:	339c      	adds	r3, #156	; 0x9c
    1b0a:	810b      	strh	r3, [r1, #8]
	descriptor_config.source_address = (uint32_t)DMASourceRegister+blockTransferCount;
    1b0c:	4b0f      	ldr	r3, [pc, #60]	; (1b4c <setup_DMA+0x7c>)
    1b0e:	339c      	adds	r3, #156	; 0x9c
    1b10:	9303      	str	r3, [sp, #12]
	descriptor_config.destination_address = 0x42000828; //sercom0
    1b12:	4b0f      	ldr	r3, [pc, #60]	; (1b50 <setup_DMA+0x80>)
    1b14:	9304      	str	r3, [sp, #16]
	dma_descriptor_create(descriptor, &descriptor_config);
    1b16:	4e0f      	ldr	r6, [pc, #60]	; (1b54 <setup_DMA+0x84>)
    1b18:	0030      	movs	r0, r6
    1b1a:	4b0f      	ldr	r3, [pc, #60]	; (1b58 <setup_DMA+0x88>)
    1b1c:	4798      	blx	r3
	configure_dma_resource(&example_resource);
	setup_transfer_descriptor(&example_descriptor);
	dma_add_descriptor(&example_resource, &example_descriptor);
    1b1e:	0031      	movs	r1, r6
    1b20:	0020      	movs	r0, r4
    1b22:	4b0e      	ldr	r3, [pc, #56]	; (1b5c <setup_DMA+0x8c>)
    1b24:	4798      	blx	r3
	resource->callback[type] = callback;
    1b26:	4b0e      	ldr	r3, [pc, #56]	; (1b60 <setup_DMA+0x90>)
    1b28:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    1b2a:	7c23      	ldrb	r3, [r4, #16]
    1b2c:	432b      	orrs	r3, r5
    1b2e:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    1b30:	7822      	ldrb	r2, [r4, #0]
    1b32:	490c      	ldr	r1, [pc, #48]	; (1b64 <setup_DMA+0x94>)
    1b34:	5c8b      	ldrb	r3, [r1, r2]
    1b36:	432b      	orrs	r3, r5
    1b38:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&example_resource, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&example_resource, DMA_CALLBACK_TRANSFER_DONE);
}
    1b3a:	b006      	add	sp, #24
    1b3c:	bd70      	pop	{r4, r5, r6, pc}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	0000082d 	.word	0x0000082d
    1b44:	20000270 	.word	0x20000270
    1b48:	0000083d 	.word	0x0000083d
    1b4c:	200002cc 	.word	0x200002cc
    1b50:	42000828 	.word	0x42000828
    1b54:	20000260 	.word	0x20000260
    1b58:	00000a0d 	.word	0x00000a0d
    1b5c:	00000ab5 	.word	0x00000ab5
    1b60:	00001a95 	.word	0x00001a95
    1b64:	20000110 	.word	0x20000110

00001b68 <configureSPIMaster>:

void configureSPIMaster(void)
{
    1b68:	b570      	push	{r4, r5, r6, lr}
    1b6a:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1b6c:	2501      	movs	r5, #1
    1b6e:	466b      	mov	r3, sp
    1b70:	701d      	strb	r5, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1b72:	2400      	movs	r4, #0
    1b74:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1b76:	23c0      	movs	r3, #192	; 0xc0
    1b78:	039b      	lsls	r3, r3, #14
    1b7a:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1b7c:	466b      	mov	r3, sp
    1b7e:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
    1b80:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1b82:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1b84:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1b86:	2324      	movs	r3, #36	; 0x24
    1b88:	466a      	mov	r2, sp
    1b8a:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1b8c:	220c      	movs	r2, #12
    1b8e:	2100      	movs	r1, #0
    1b90:	a806      	add	r0, sp, #24
    1b92:	4b15      	ldr	r3, [pc, #84]	; (1be8 <configureSPIMaster+0x80>)
    1b94:	4798      	blx	r3
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    1b96:	2380      	movs	r3, #128	; 0x80
    1b98:	055b      	lsls	r3, r3, #21
    1b9a:	9302      	str	r3, [sp, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    1b9c:	4b13      	ldr	r3, [pc, #76]	; (1bec <configureSPIMaster+0x84>)
    1b9e:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    1ba0:	4b13      	ldr	r3, [pc, #76]	; (1bf0 <configureSPIMaster+0x88>)
    1ba2:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    1ba4:	2301      	movs	r3, #1
    1ba6:	425b      	negs	r3, r3
    1ba8:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    1baa:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.receiver_enable  = false;
    1bac:	466b      	mov	r3, sp
    1bae:	749c      	strb	r4, [r3, #18]
	config_spi_master.mode_specific.master.baudrate =  SPIBAUDRATE; //2.5MHz  = 400ns per signal
    1bb0:	4b10      	ldr	r3, [pc, #64]	; (1bf4 <configureSPIMaster+0x8c>)
    1bb2:	9306      	str	r3, [sp, #24]
	config_spi_master.generator_source = GCLK_GENERATOR_0;
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    1bb4:	4e10      	ldr	r6, [pc, #64]	; (1bf8 <configureSPIMaster+0x90>)
    1bb6:	466a      	mov	r2, sp
    1bb8:	4910      	ldr	r1, [pc, #64]	; (1bfc <configureSPIMaster+0x94>)
    1bba:	0030      	movs	r0, r6
    1bbc:	4b10      	ldr	r3, [pc, #64]	; (1c00 <configureSPIMaster+0x98>)
    1bbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1bc0:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1bc2:	0020      	movs	r0, r4
    1bc4:	4b0f      	ldr	r3, [pc, #60]	; (1c04 <configureSPIMaster+0x9c>)
    1bc6:	4798      	blx	r3
    1bc8:	231f      	movs	r3, #31
    1bca:	4018      	ands	r0, r3
    1bcc:	4085      	lsls	r5, r0
    1bce:	4b0e      	ldr	r3, [pc, #56]	; (1c08 <configureSPIMaster+0xa0>)
    1bd0:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1bd2:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1bd4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d1fc      	bne.n	1bd4 <configureSPIMaster+0x6c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1bda:	6823      	ldr	r3, [r4, #0]
    1bdc:	2202      	movs	r2, #2
    1bde:	4313      	orrs	r3, r2
    1be0:	6023      	str	r3, [r4, #0]
	spi_enable(&spi_master_instance);
}
    1be2:	b00e      	add	sp, #56	; 0x38
    1be4:	bd70      	pop	{r4, r5, r6, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	000026e7 	.word	0x000026e7
    1bec:	000e0002 	.word	0x000e0002
    1bf0:	000f0002 	.word	0x000f0002
    1bf4:	002625a0 	.word	0x002625a0
    1bf8:	2000028c 	.word	0x2000028c
    1bfc:	42000800 	.word	0x42000800
    1c00:	0000113d 	.word	0x0000113d
    1c04:	000010ed 	.word	0x000010ed
    1c08:	e000e100 	.word	0xe000e100

00001c0c <RGBPI55Init>:
	configureSPIMaster();
	
}

void RGBPI55Init()
{
    1c0c:	b510      	push	{r4, lr}
	sourceRegisterInit();
    1c0e:	4b03      	ldr	r3, [pc, #12]	; (1c1c <RGBPI55Init+0x10>)
    1c10:	4798      	blx	r3
	configureSPIMaster();
    1c12:	4b03      	ldr	r3, [pc, #12]	; (1c20 <RGBPI55Init+0x14>)
    1c14:	4798      	blx	r3
	SPIMasterInit();
	setup_DMA();
    1c16:	4b03      	ldr	r3, [pc, #12]	; (1c24 <RGBPI55Init+0x18>)
    1c18:	4798      	blx	r3
}
    1c1a:	bd10      	pop	{r4, pc}
    1c1c:	00001aa1 	.word	0x00001aa1
    1c20:	00001b69 	.word	0x00001b69
    1c24:	00001ad1 	.word	0x00001ad1

00001c28 <convertColorSPIData>:
#define TWOBITSPIVALUES {0x88,0x8E,0xE8,0xEE}
const	uint8_t SPIDataConertConsArray[] = TWOBITSPIVALUES;


static uint8_t* convertColorSPIData(colorInfo* colorData )
{
    1c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2a:	46d6      	mov	lr, sl
    1c2c:	464f      	mov	r7, r9
    1c2e:	4646      	mov	r6, r8
    1c30:	b5c0      	push	{r6, r7, lr}
    1c32:	b082      	sub	sp, #8
    1c34:	4682      	mov	sl, r0
	volatile static uint8_t SPIData[NoBytesLED];
	volatile uint8_t i =0;
    1c36:	466b      	mov	r3, sp
    1c38:	1dda      	adds	r2, r3, #7
    1c3a:	2300      	movs	r3, #0
    1c3c:	7013      	strb	r3, [r2, #0]
	uint8_t countSPIData = 0;
	volatile uint8_t temp =0;
    1c3e:	4669      	mov	r1, sp
    1c40:	718b      	strb	r3, [r1, #6]
	volatile uint8_t twoBitValue = 0;
    1c42:	4669      	mov	r1, sp
    1c44:	714b      	strb	r3, [r1, #5]
	for(i=0;i<4;i++)
    1c46:	7013      	strb	r3, [r2, #0]
    1c48:	7813      	ldrb	r3, [r2, #0]
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	2b03      	cmp	r3, #3
    1c4e:	d900      	bls.n	1c52 <convertColorSPIData+0x2a>
    1c50:	e089      	b.n	1d66 <convertColorSPIData+0x13e>
    1c52:	2300      	movs	r3, #0
	{
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1c54:	466a      	mov	r2, sp
    1c56:	1dd1      	adds	r1, r2, #7
    1c58:	22c0      	movs	r2, #192	; 0xc0
    1c5a:	4694      	mov	ip, r2
    1c5c:	2703      	movs	r7, #3
    1c5e:	466a      	mov	r2, sp
    1c60:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1c62:	4e42      	ldr	r6, [pc, #264]	; (1d6c <convertColorSPIData+0x144>)
    1c64:	4d42      	ldr	r5, [pc, #264]	; (1d70 <convertColorSPIData+0x148>)
		twoBitValue = (colorData->GBrightness & (0xC0>>i*2))>>(6-2*i);
    1c66:	780a      	ldrb	r2, [r1, #0]
    1c68:	7808      	ldrb	r0, [r1, #0]
    1c6a:	4680      	mov	r8, r0
    1c6c:	0052      	lsls	r2, r2, #1
    1c6e:	4660      	mov	r0, ip
    1c70:	4110      	asrs	r0, r2
    1c72:	4652      	mov	r2, sl
    1c74:	7852      	ldrb	r2, [r2, #1]
    1c76:	4002      	ands	r2, r0
    1c78:	4640      	mov	r0, r8
    1c7a:	1a38      	subs	r0, r7, r0
    1c7c:	0040      	lsls	r0, r0, #1
    1c7e:	4102      	asrs	r2, r0
    1c80:	b2d2      	uxtb	r2, r2
    1c82:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1c84:	7822      	ldrb	r2, [r4, #0]
    1c86:	b2d2      	uxtb	r2, r2
    1c88:	5cb2      	ldrb	r2, [r6, r2]
    1c8a:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    1c8c:	3301      	adds	r3, #1
    1c8e:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    1c90:	780a      	ldrb	r2, [r1, #0]
    1c92:	3201      	adds	r2, #1
    1c94:	b2d2      	uxtb	r2, r2
    1c96:	700a      	strb	r2, [r1, #0]
    1c98:	780a      	ldrb	r2, [r1, #0]
    1c9a:	b2d2      	uxtb	r2, r2
    1c9c:	2a03      	cmp	r2, #3
    1c9e:	d9e2      	bls.n	1c66 <convertColorSPIData+0x3e>
	}
	for(i=0;i<4;i++)
    1ca0:	466a      	mov	r2, sp
    1ca2:	2100      	movs	r1, #0
    1ca4:	71d1      	strb	r1, [r2, #7]
    1ca6:	3207      	adds	r2, #7
    1ca8:	7812      	ldrb	r2, [r2, #0]
    1caa:	b2d2      	uxtb	r2, r2
    1cac:	2a03      	cmp	r2, #3
    1cae:	d825      	bhi.n	1cfc <convertColorSPIData+0xd4>
	{
		//temp = (0x30>>(i*2));
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    1cb0:	466a      	mov	r2, sp
    1cb2:	1dd1      	adds	r1, r2, #7
    1cb4:	22c0      	movs	r2, #192	; 0xc0
    1cb6:	4694      	mov	ip, r2
    1cb8:	2703      	movs	r7, #3
    1cba:	466a      	mov	r2, sp
    1cbc:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1cbe:	4e2b      	ldr	r6, [pc, #172]	; (1d6c <convertColorSPIData+0x144>)
    1cc0:	4d2b      	ldr	r5, [pc, #172]	; (1d70 <convertColorSPIData+0x148>)
		twoBitValue = (colorData->RBrightness & (0xC0>>i*2))>>(6-2*i);
    1cc2:	780a      	ldrb	r2, [r1, #0]
    1cc4:	7808      	ldrb	r0, [r1, #0]
    1cc6:	4680      	mov	r8, r0
    1cc8:	0052      	lsls	r2, r2, #1
    1cca:	4660      	mov	r0, ip
    1ccc:	4110      	asrs	r0, r2
    1cce:	4652      	mov	r2, sl
    1cd0:	7812      	ldrb	r2, [r2, #0]
    1cd2:	4002      	ands	r2, r0
    1cd4:	4640      	mov	r0, r8
    1cd6:	1a38      	subs	r0, r7, r0
    1cd8:	0040      	lsls	r0, r0, #1
    1cda:	4102      	asrs	r2, r0
    1cdc:	b2d2      	uxtb	r2, r2
    1cde:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1ce0:	7822      	ldrb	r2, [r4, #0]
    1ce2:	b2d2      	uxtb	r2, r2
    1ce4:	5cb2      	ldrb	r2, [r6, r2]
    1ce6:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    1ce8:	3301      	adds	r3, #1
    1cea:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    1cec:	780a      	ldrb	r2, [r1, #0]
    1cee:	3201      	adds	r2, #1
    1cf0:	b2d2      	uxtb	r2, r2
    1cf2:	700a      	strb	r2, [r1, #0]
    1cf4:	780a      	ldrb	r2, [r1, #0]
    1cf6:	b2d2      	uxtb	r2, r2
    1cf8:	2a03      	cmp	r2, #3
    1cfa:	d9e2      	bls.n	1cc2 <convertColorSPIData+0x9a>
	}
	for(i=0;i<4;i++)
    1cfc:	466a      	mov	r2, sp
    1cfe:	2100      	movs	r1, #0
    1d00:	71d1      	strb	r1, [r2, #7]
    1d02:	3207      	adds	r2, #7
    1d04:	7812      	ldrb	r2, [r2, #0]
    1d06:	b2d2      	uxtb	r2, r2
    1d08:	2a03      	cmp	r2, #3
    1d0a:	d825      	bhi.n	1d58 <convertColorSPIData+0x130>
	{
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    1d0c:	466a      	mov	r2, sp
    1d0e:	1dd1      	adds	r1, r2, #7
    1d10:	22c0      	movs	r2, #192	; 0xc0
    1d12:	4694      	mov	ip, r2
    1d14:	2703      	movs	r7, #3
    1d16:	466a      	mov	r2, sp
    1d18:	1d54      	adds	r4, r2, #5
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1d1a:	4e14      	ldr	r6, [pc, #80]	; (1d6c <convertColorSPIData+0x144>)
    1d1c:	4d14      	ldr	r5, [pc, #80]	; (1d70 <convertColorSPIData+0x148>)
		twoBitValue = (colorData->BBrightness & (0xC0>>i*2))>>(6-2*i);
    1d1e:	780a      	ldrb	r2, [r1, #0]
    1d20:	7808      	ldrb	r0, [r1, #0]
    1d22:	4680      	mov	r8, r0
    1d24:	0052      	lsls	r2, r2, #1
    1d26:	4660      	mov	r0, ip
    1d28:	4110      	asrs	r0, r2
    1d2a:	4652      	mov	r2, sl
    1d2c:	7892      	ldrb	r2, [r2, #2]
    1d2e:	4002      	ands	r2, r0
    1d30:	4640      	mov	r0, r8
    1d32:	1a38      	subs	r0, r7, r0
    1d34:	0040      	lsls	r0, r0, #1
    1d36:	4102      	asrs	r2, r0
    1d38:	b2d2      	uxtb	r2, r2
    1d3a:	7022      	strb	r2, [r4, #0]
		SPIData[countSPIData] = SPIDataConertConsArray[twoBitValue];
    1d3c:	7822      	ldrb	r2, [r4, #0]
    1d3e:	b2d2      	uxtb	r2, r2
    1d40:	5cb2      	ldrb	r2, [r6, r2]
    1d42:	54ea      	strb	r2, [r5, r3]
		countSPIData++;
    1d44:	3301      	adds	r3, #1
    1d46:	b2db      	uxtb	r3, r3
	for(i=0;i<4;i++)
    1d48:	780a      	ldrb	r2, [r1, #0]
    1d4a:	3201      	adds	r2, #1
    1d4c:	b2d2      	uxtb	r2, r2
    1d4e:	700a      	strb	r2, [r1, #0]
    1d50:	780a      	ldrb	r2, [r1, #0]
    1d52:	b2d2      	uxtb	r2, r2
    1d54:	2a03      	cmp	r2, #3
    1d56:	d9e2      	bls.n	1d1e <convertColorSPIData+0xf6>
	}
	return SPIData;
}
    1d58:	4805      	ldr	r0, [pc, #20]	; (1d70 <convertColorSPIData+0x148>)
    1d5a:	b002      	add	sp, #8
    1d5c:	bc1c      	pop	{r2, r3, r4}
    1d5e:	4690      	mov	r8, r2
    1d60:	4699      	mov	r9, r3
    1d62:	46a2      	mov	sl, r4
    1d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t countSPIData = 0;
    1d66:	2300      	movs	r3, #0
    1d68:	e79a      	b.n	1ca0 <convertColorSPIData+0x78>
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	0000290c 	.word	0x0000290c
    1d70:	20000144 	.word	0x20000144

00001d74 <RGBPI55SetAllLED>:

void RGBPI55SetAllLED(colorInfo*  colorLED)
{
    1d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d76:	46c6      	mov	lr, r8
    1d78:	b500      	push	{lr}
    1d7a:	0006      	movs	r6, r0
    1d7c:	253c      	movs	r5, #60	; 0x3c
	static uint8_t counter = 31;
	uint8_t i,j =0;
	//SPIMasterInit();
	for(j = 0 ; j < NOLEDS ; j++)
	{
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    1d7e:	4b12      	ldr	r3, [pc, #72]	; (1dc8 <RGBPI55SetAllLED+0x54>)
    1d80:	4698      	mov	r8, r3
		startArrayAddress   = j*NoBytesLED + STARTZEROS ;
		for(i = 0 ; i < NoBytesLED ; i++)
		{
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    1d82:	4c12      	ldr	r4, [pc, #72]	; (1dcc <RGBPI55SetAllLED+0x58>)
		LEDSPIData			= convertColorSPIData(&colorLED[j]);
    1d84:	0030      	movs	r0, r6
    1d86:	47c0      	blx	r8
    1d88:	0007      	movs	r7, r0
    1d8a:	370c      	adds	r7, #12
    1d8c:	0003      	movs	r3, r0
    1d8e:	1a28      	subs	r0, r5, r0
    1d90:	18c2      	adds	r2, r0, r3
			DMASourceRegister[i+startArrayAddress]   = LEDSPIData[i] ;
    1d92:	7819      	ldrb	r1, [r3, #0]
    1d94:	54a1      	strb	r1, [r4, r2]
    1d96:	3301      	adds	r3, #1
		for(i = 0 ; i < NoBytesLED ; i++)
    1d98:	42bb      	cmp	r3, r7
    1d9a:	d1f9      	bne.n	1d90 <RGBPI55SetAllLED+0x1c>
    1d9c:	3603      	adds	r6, #3
    1d9e:	350c      	adds	r5, #12
	for(j = 0 ; j < NOLEDS ; j++)
    1da0:	2d60      	cmp	r5, #96	; 0x60
    1da2:	d1ef      	bne.n	1d84 <RGBPI55SetAllLED+0x10>
		}
	}
	
	//port_pin_set_output_level(PROFILE_PIN,true);
	while(transferOngoing == true);
    1da4:	4b0a      	ldr	r3, [pc, #40]	; (1dd0 <RGBPI55SetAllLED+0x5c>)
    1da6:	781b      	ldrb	r3, [r3, #0]
    1da8:	2b00      	cmp	r3, #0
    1daa:	d1fd      	bne.n	1da8 <RGBPI55SetAllLED+0x34>
	while(dma_start_transfer_job(&example_resource) == STATUS_OK);
    1dac:	4d09      	ldr	r5, [pc, #36]	; (1dd4 <RGBPI55SetAllLED+0x60>)
    1dae:	4c0a      	ldr	r4, [pc, #40]	; (1dd8 <RGBPI55SetAllLED+0x64>)
    1db0:	0028      	movs	r0, r5
    1db2:	47a0      	blx	r4
    1db4:	2800      	cmp	r0, #0
    1db6:	d0fb      	beq.n	1db0 <RGBPI55SetAllLED+0x3c>
	//{
	//	 errr= dma_start_transfer_job(&example_resource);
	//	delay_cycles_ms(1);
	//}
	
	transferOngoing = false;
    1db8:	2300      	movs	r3, #0
    1dba:	4a05      	ldr	r2, [pc, #20]	; (1dd0 <RGBPI55SetAllLED+0x5c>)
    1dbc:	7013      	strb	r3, [r2, #0]
	transferDone = false;
    1dbe:	4a07      	ldr	r2, [pc, #28]	; (1ddc <RGBPI55SetAllLED+0x68>)
    1dc0:	7013      	strb	r3, [r2, #0]
}
    1dc2:	bc04      	pop	{r2}
    1dc4:	4690      	mov	r8, r2
    1dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dc8:	00001c29 	.word	0x00001c29
    1dcc:	200002cc 	.word	0x200002cc
    1dd0:	20000150 	.word	0x20000150
    1dd4:	20000270 	.word	0x20000270
    1dd8:	00000985 	.word	0x00000985
    1ddc:	20000179 	.word	0x20000179

00001de0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1de0:	4770      	bx	lr
	...

00001de4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1de4:	4b0c      	ldr	r3, [pc, #48]	; (1e18 <cpu_irq_enter_critical+0x34>)
    1de6:	681b      	ldr	r3, [r3, #0]
    1de8:	2b00      	cmp	r3, #0
    1dea:	d106      	bne.n	1dfa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1dec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1df0:	2b00      	cmp	r3, #0
    1df2:	d007      	beq.n	1e04 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1df4:	2200      	movs	r2, #0
    1df6:	4b09      	ldr	r3, [pc, #36]	; (1e1c <cpu_irq_enter_critical+0x38>)
    1df8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1dfa:	4a07      	ldr	r2, [pc, #28]	; (1e18 <cpu_irq_enter_critical+0x34>)
    1dfc:	6813      	ldr	r3, [r2, #0]
    1dfe:	3301      	adds	r3, #1
    1e00:	6013      	str	r3, [r2, #0]
}
    1e02:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1e04:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e06:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1e0a:	2200      	movs	r2, #0
    1e0c:	4b04      	ldr	r3, [pc, #16]	; (1e20 <cpu_irq_enter_critical+0x3c>)
    1e0e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1e10:	3201      	adds	r2, #1
    1e12:	4b02      	ldr	r3, [pc, #8]	; (1e1c <cpu_irq_enter_critical+0x38>)
    1e14:	701a      	strb	r2, [r3, #0]
    1e16:	e7f0      	b.n	1dfa <cpu_irq_enter_critical+0x16>
    1e18:	20000154 	.word	0x20000154
    1e1c:	20000158 	.word	0x20000158
    1e20:	20000014 	.word	0x20000014

00001e24 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1e24:	4b08      	ldr	r3, [pc, #32]	; (1e48 <cpu_irq_leave_critical+0x24>)
    1e26:	681a      	ldr	r2, [r3, #0]
    1e28:	3a01      	subs	r2, #1
    1e2a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d109      	bne.n	1e46 <cpu_irq_leave_critical+0x22>
    1e32:	4b06      	ldr	r3, [pc, #24]	; (1e4c <cpu_irq_leave_critical+0x28>)
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d005      	beq.n	1e46 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1e3a:	2201      	movs	r2, #1
    1e3c:	4b04      	ldr	r3, [pc, #16]	; (1e50 <cpu_irq_leave_critical+0x2c>)
    1e3e:	701a      	strb	r2, [r3, #0]
    1e40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1e44:	b662      	cpsie	i
	}
}
    1e46:	4770      	bx	lr
    1e48:	20000154 	.word	0x20000154
    1e4c:	20000158 	.word	0x20000158
    1e50:	20000014 	.word	0x20000014

00001e54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1e54:	b510      	push	{r4, lr}
	switch (clock_source) {
    1e56:	2808      	cmp	r0, #8
    1e58:	d803      	bhi.n	1e62 <system_clock_source_get_hz+0xe>
    1e5a:	0080      	lsls	r0, r0, #2
    1e5c:	4b1c      	ldr	r3, [pc, #112]	; (1ed0 <system_clock_source_get_hz+0x7c>)
    1e5e:	581b      	ldr	r3, [r3, r0]
    1e60:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1e62:	2000      	movs	r0, #0
    1e64:	e032      	b.n	1ecc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1e66:	4b1b      	ldr	r3, [pc, #108]	; (1ed4 <system_clock_source_get_hz+0x80>)
    1e68:	6918      	ldr	r0, [r3, #16]
    1e6a:	e02f      	b.n	1ecc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1e6c:	4b1a      	ldr	r3, [pc, #104]	; (1ed8 <system_clock_source_get_hz+0x84>)
    1e6e:	6a1b      	ldr	r3, [r3, #32]
    1e70:	059b      	lsls	r3, r3, #22
    1e72:	0f9b      	lsrs	r3, r3, #30
    1e74:	4819      	ldr	r0, [pc, #100]	; (1edc <system_clock_source_get_hz+0x88>)
    1e76:	40d8      	lsrs	r0, r3
    1e78:	e028      	b.n	1ecc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1e7a:	4b16      	ldr	r3, [pc, #88]	; (1ed4 <system_clock_source_get_hz+0x80>)
    1e7c:	6958      	ldr	r0, [r3, #20]
    1e7e:	e025      	b.n	1ecc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e80:	4b14      	ldr	r3, [pc, #80]	; (1ed4 <system_clock_source_get_hz+0x80>)
    1e82:	681b      	ldr	r3, [r3, #0]
			return 0;
    1e84:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1e86:	079b      	lsls	r3, r3, #30
    1e88:	d520      	bpl.n	1ecc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1e8a:	4913      	ldr	r1, [pc, #76]	; (1ed8 <system_clock_source_get_hz+0x84>)
    1e8c:	2210      	movs	r2, #16
    1e8e:	68cb      	ldr	r3, [r1, #12]
    1e90:	421a      	tst	r2, r3
    1e92:	d0fc      	beq.n	1e8e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1e94:	4b0f      	ldr	r3, [pc, #60]	; (1ed4 <system_clock_source_get_hz+0x80>)
    1e96:	681a      	ldr	r2, [r3, #0]
    1e98:	2324      	movs	r3, #36	; 0x24
    1e9a:	4013      	ands	r3, r2
    1e9c:	2b04      	cmp	r3, #4
    1e9e:	d001      	beq.n	1ea4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1ea0:	480f      	ldr	r0, [pc, #60]	; (1ee0 <system_clock_source_get_hz+0x8c>)
    1ea2:	e013      	b.n	1ecc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ea4:	2000      	movs	r0, #0
    1ea6:	4b0f      	ldr	r3, [pc, #60]	; (1ee4 <system_clock_source_get_hz+0x90>)
    1ea8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1eaa:	4b0a      	ldr	r3, [pc, #40]	; (1ed4 <system_clock_source_get_hz+0x80>)
    1eac:	689b      	ldr	r3, [r3, #8]
    1eae:	041b      	lsls	r3, r3, #16
    1eb0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1eb2:	4358      	muls	r0, r3
    1eb4:	e00a      	b.n	1ecc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1eb6:	2350      	movs	r3, #80	; 0x50
    1eb8:	4a07      	ldr	r2, [pc, #28]	; (1ed8 <system_clock_source_get_hz+0x84>)
    1eba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1ebc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1ebe:	075b      	lsls	r3, r3, #29
    1ec0:	d504      	bpl.n	1ecc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1ec2:	4b04      	ldr	r3, [pc, #16]	; (1ed4 <system_clock_source_get_hz+0x80>)
    1ec4:	68d8      	ldr	r0, [r3, #12]
    1ec6:	e001      	b.n	1ecc <system_clock_source_get_hz+0x78>
		return 32768UL;
    1ec8:	2080      	movs	r0, #128	; 0x80
    1eca:	0200      	lsls	r0, r0, #8
	}
}
    1ecc:	bd10      	pop	{r4, pc}
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	00002910 	.word	0x00002910
    1ed4:	2000015c 	.word	0x2000015c
    1ed8:	40000800 	.word	0x40000800
    1edc:	007a1200 	.word	0x007a1200
    1ee0:	02dc6c00 	.word	0x02dc6c00
    1ee4:	000022b9 	.word	0x000022b9

00001ee8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1ee8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1eea:	490c      	ldr	r1, [pc, #48]	; (1f1c <system_clock_source_osc8m_set_config+0x34>)
    1eec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1eee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ef0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ef2:	7840      	ldrb	r0, [r0, #1]
    1ef4:	2201      	movs	r2, #1
    1ef6:	4010      	ands	r0, r2
    1ef8:	0180      	lsls	r0, r0, #6
    1efa:	2640      	movs	r6, #64	; 0x40
    1efc:	43b3      	bics	r3, r6
    1efe:	4303      	orrs	r3, r0
    1f00:	402a      	ands	r2, r5
    1f02:	01d2      	lsls	r2, r2, #7
    1f04:	2080      	movs	r0, #128	; 0x80
    1f06:	4383      	bics	r3, r0
    1f08:	4313      	orrs	r3, r2
    1f0a:	2203      	movs	r2, #3
    1f0c:	4022      	ands	r2, r4
    1f0e:	0212      	lsls	r2, r2, #8
    1f10:	4803      	ldr	r0, [pc, #12]	; (1f20 <system_clock_source_osc8m_set_config+0x38>)
    1f12:	4003      	ands	r3, r0
    1f14:	4313      	orrs	r3, r2
    1f16:	620b      	str	r3, [r1, #32]
}
    1f18:	bd70      	pop	{r4, r5, r6, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	40000800 	.word	0x40000800
    1f20:	fffffcff 	.word	0xfffffcff

00001f24 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1f24:	2808      	cmp	r0, #8
    1f26:	d803      	bhi.n	1f30 <system_clock_source_enable+0xc>
    1f28:	0080      	lsls	r0, r0, #2
    1f2a:	4b25      	ldr	r3, [pc, #148]	; (1fc0 <system_clock_source_enable+0x9c>)
    1f2c:	581b      	ldr	r3, [r3, r0]
    1f2e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1f30:	2017      	movs	r0, #23
    1f32:	e044      	b.n	1fbe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1f34:	4a23      	ldr	r2, [pc, #140]	; (1fc4 <system_clock_source_enable+0xa0>)
    1f36:	6a13      	ldr	r3, [r2, #32]
    1f38:	2102      	movs	r1, #2
    1f3a:	430b      	orrs	r3, r1
    1f3c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1f3e:	2000      	movs	r0, #0
    1f40:	e03d      	b.n	1fbe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1f42:	4a20      	ldr	r2, [pc, #128]	; (1fc4 <system_clock_source_enable+0xa0>)
    1f44:	6993      	ldr	r3, [r2, #24]
    1f46:	2102      	movs	r1, #2
    1f48:	430b      	orrs	r3, r1
    1f4a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1f4c:	2000      	movs	r0, #0
		break;
    1f4e:	e036      	b.n	1fbe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1f50:	4a1c      	ldr	r2, [pc, #112]	; (1fc4 <system_clock_source_enable+0xa0>)
    1f52:	8a13      	ldrh	r3, [r2, #16]
    1f54:	2102      	movs	r1, #2
    1f56:	430b      	orrs	r3, r1
    1f58:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1f5a:	2000      	movs	r0, #0
		break;
    1f5c:	e02f      	b.n	1fbe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1f5e:	4a19      	ldr	r2, [pc, #100]	; (1fc4 <system_clock_source_enable+0xa0>)
    1f60:	8a93      	ldrh	r3, [r2, #20]
    1f62:	2102      	movs	r1, #2
    1f64:	430b      	orrs	r3, r1
    1f66:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1f68:	2000      	movs	r0, #0
		break;
    1f6a:	e028      	b.n	1fbe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1f6c:	4916      	ldr	r1, [pc, #88]	; (1fc8 <system_clock_source_enable+0xa4>)
    1f6e:	680b      	ldr	r3, [r1, #0]
    1f70:	2202      	movs	r2, #2
    1f72:	4313      	orrs	r3, r2
    1f74:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1f76:	4b13      	ldr	r3, [pc, #76]	; (1fc4 <system_clock_source_enable+0xa0>)
    1f78:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f7a:	0019      	movs	r1, r3
    1f7c:	320e      	adds	r2, #14
    1f7e:	68cb      	ldr	r3, [r1, #12]
    1f80:	421a      	tst	r2, r3
    1f82:	d0fc      	beq.n	1f7e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1f84:	4a10      	ldr	r2, [pc, #64]	; (1fc8 <system_clock_source_enable+0xa4>)
    1f86:	6891      	ldr	r1, [r2, #8]
    1f88:	4b0e      	ldr	r3, [pc, #56]	; (1fc4 <system_clock_source_enable+0xa0>)
    1f8a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1f8c:	6852      	ldr	r2, [r2, #4]
    1f8e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1f90:	2200      	movs	r2, #0
    1f92:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f94:	0019      	movs	r1, r3
    1f96:	3210      	adds	r2, #16
    1f98:	68cb      	ldr	r3, [r1, #12]
    1f9a:	421a      	tst	r2, r3
    1f9c:	d0fc      	beq.n	1f98 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1f9e:	4b0a      	ldr	r3, [pc, #40]	; (1fc8 <system_clock_source_enable+0xa4>)
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	b29b      	uxth	r3, r3
    1fa4:	4a07      	ldr	r2, [pc, #28]	; (1fc4 <system_clock_source_enable+0xa0>)
    1fa6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1fa8:	2000      	movs	r0, #0
    1faa:	e008      	b.n	1fbe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1fac:	4905      	ldr	r1, [pc, #20]	; (1fc4 <system_clock_source_enable+0xa0>)
    1fae:	2244      	movs	r2, #68	; 0x44
    1fb0:	5c8b      	ldrb	r3, [r1, r2]
    1fb2:	2002      	movs	r0, #2
    1fb4:	4303      	orrs	r3, r0
    1fb6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1fb8:	2000      	movs	r0, #0
		break;
    1fba:	e000      	b.n	1fbe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1fbc:	2000      	movs	r0, #0
}
    1fbe:	4770      	bx	lr
    1fc0:	00002934 	.word	0x00002934
    1fc4:	40000800 	.word	0x40000800
    1fc8:	2000015c 	.word	0x2000015c

00001fcc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1fcc:	b530      	push	{r4, r5, lr}
    1fce:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1fd0:	22c2      	movs	r2, #194	; 0xc2
    1fd2:	00d2      	lsls	r2, r2, #3
    1fd4:	4b1a      	ldr	r3, [pc, #104]	; (2040 <system_clock_init+0x74>)
    1fd6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1fd8:	4a1a      	ldr	r2, [pc, #104]	; (2044 <system_clock_init+0x78>)
    1fda:	6853      	ldr	r3, [r2, #4]
    1fdc:	211e      	movs	r1, #30
    1fde:	438b      	bics	r3, r1
    1fe0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1fe2:	2301      	movs	r3, #1
    1fe4:	466a      	mov	r2, sp
    1fe6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1fe8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1fea:	4d17      	ldr	r5, [pc, #92]	; (2048 <system_clock_init+0x7c>)
    1fec:	b2e0      	uxtb	r0, r4
    1fee:	4669      	mov	r1, sp
    1ff0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ff2:	3401      	adds	r4, #1
    1ff4:	2c18      	cmp	r4, #24
    1ff6:	d1f9      	bne.n	1fec <system_clock_init+0x20>
	config->run_in_standby  = false;
    1ff8:	a803      	add	r0, sp, #12
    1ffa:	2400      	movs	r4, #0
    1ffc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1ffe:	2501      	movs	r5, #1
    2000:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2002:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2004:	4b11      	ldr	r3, [pc, #68]	; (204c <system_clock_init+0x80>)
    2006:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2008:	2006      	movs	r0, #6
    200a:	4b11      	ldr	r3, [pc, #68]	; (2050 <system_clock_init+0x84>)
    200c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    200e:	4b11      	ldr	r3, [pc, #68]	; (2054 <system_clock_init+0x88>)
    2010:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2012:	4b11      	ldr	r3, [pc, #68]	; (2058 <system_clock_init+0x8c>)
    2014:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2016:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2018:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    201a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    201c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    201e:	466b      	mov	r3, sp
    2020:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2022:	2306      	movs	r3, #6
    2024:	466a      	mov	r2, sp
    2026:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    2028:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    202a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    202c:	4669      	mov	r1, sp
    202e:	2000      	movs	r0, #0
    2030:	4b0a      	ldr	r3, [pc, #40]	; (205c <system_clock_init+0x90>)
    2032:	4798      	blx	r3
    2034:	2000      	movs	r0, #0
    2036:	4b0a      	ldr	r3, [pc, #40]	; (2060 <system_clock_init+0x94>)
    2038:	4798      	blx	r3
#endif
}
    203a:	b005      	add	sp, #20
    203c:	bd30      	pop	{r4, r5, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	40000800 	.word	0x40000800
    2044:	41004000 	.word	0x41004000
    2048:	0000229d 	.word	0x0000229d
    204c:	00001ee9 	.word	0x00001ee9
    2050:	00001f25 	.word	0x00001f25
    2054:	00002065 	.word	0x00002065
    2058:	40000400 	.word	0x40000400
    205c:	00002089 	.word	0x00002089
    2060:	00002141 	.word	0x00002141

00002064 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2064:	4a06      	ldr	r2, [pc, #24]	; (2080 <system_gclk_init+0x1c>)
    2066:	6993      	ldr	r3, [r2, #24]
    2068:	2108      	movs	r1, #8
    206a:	430b      	orrs	r3, r1
    206c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    206e:	2201      	movs	r2, #1
    2070:	4b04      	ldr	r3, [pc, #16]	; (2084 <system_gclk_init+0x20>)
    2072:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2074:	0019      	movs	r1, r3
    2076:	780b      	ldrb	r3, [r1, #0]
    2078:	4213      	tst	r3, r2
    207a:	d1fc      	bne.n	2076 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    207c:	4770      	bx	lr
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	40000400 	.word	0x40000400
    2084:	40000c00 	.word	0x40000c00

00002088 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2088:	b570      	push	{r4, r5, r6, lr}
    208a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    208c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    208e:	780d      	ldrb	r5, [r1, #0]
    2090:	022d      	lsls	r5, r5, #8
    2092:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2094:	784b      	ldrb	r3, [r1, #1]
    2096:	2b00      	cmp	r3, #0
    2098:	d002      	beq.n	20a0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    209a:	2380      	movs	r3, #128	; 0x80
    209c:	02db      	lsls	r3, r3, #11
    209e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    20a0:	7a4b      	ldrb	r3, [r1, #9]
    20a2:	2b00      	cmp	r3, #0
    20a4:	d002      	beq.n	20ac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    20a6:	2380      	movs	r3, #128	; 0x80
    20a8:	031b      	lsls	r3, r3, #12
    20aa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    20ac:	6848      	ldr	r0, [r1, #4]
    20ae:	2801      	cmp	r0, #1
    20b0:	d910      	bls.n	20d4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    20b2:	1e43      	subs	r3, r0, #1
    20b4:	4218      	tst	r0, r3
    20b6:	d134      	bne.n	2122 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    20b8:	2802      	cmp	r0, #2
    20ba:	d930      	bls.n	211e <system_gclk_gen_set_config+0x96>
    20bc:	2302      	movs	r3, #2
    20be:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    20c0:	3201      	adds	r2, #1
						mask <<= 1) {
    20c2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    20c4:	4298      	cmp	r0, r3
    20c6:	d8fb      	bhi.n	20c0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    20c8:	0212      	lsls	r2, r2, #8
    20ca:	4332      	orrs	r2, r6
    20cc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    20ce:	2380      	movs	r3, #128	; 0x80
    20d0:	035b      	lsls	r3, r3, #13
    20d2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    20d4:	7a0b      	ldrb	r3, [r1, #8]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d002      	beq.n	20e0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    20da:	2380      	movs	r3, #128	; 0x80
    20dc:	039b      	lsls	r3, r3, #14
    20de:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20e0:	4a13      	ldr	r2, [pc, #76]	; (2130 <system_gclk_gen_set_config+0xa8>)
    20e2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    20e4:	b25b      	sxtb	r3, r3
    20e6:	2b00      	cmp	r3, #0
    20e8:	dbfb      	blt.n	20e2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    20ea:	4b12      	ldr	r3, [pc, #72]	; (2134 <system_gclk_gen_set_config+0xac>)
    20ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20ee:	4b12      	ldr	r3, [pc, #72]	; (2138 <system_gclk_gen_set_config+0xb0>)
    20f0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20f2:	4a0f      	ldr	r2, [pc, #60]	; (2130 <system_gclk_gen_set_config+0xa8>)
    20f4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    20f6:	b25b      	sxtb	r3, r3
    20f8:	2b00      	cmp	r3, #0
    20fa:	dbfb      	blt.n	20f4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    20fc:	4b0c      	ldr	r3, [pc, #48]	; (2130 <system_gclk_gen_set_config+0xa8>)
    20fe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2100:	001a      	movs	r2, r3
    2102:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2104:	b25b      	sxtb	r3, r3
    2106:	2b00      	cmp	r3, #0
    2108:	dbfb      	blt.n	2102 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    210a:	4a09      	ldr	r2, [pc, #36]	; (2130 <system_gclk_gen_set_config+0xa8>)
    210c:	6853      	ldr	r3, [r2, #4]
    210e:	2180      	movs	r1, #128	; 0x80
    2110:	0249      	lsls	r1, r1, #9
    2112:	400b      	ands	r3, r1
    2114:	431d      	orrs	r5, r3
    2116:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2118:	4b08      	ldr	r3, [pc, #32]	; (213c <system_gclk_gen_set_config+0xb4>)
    211a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    211c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    211e:	2200      	movs	r2, #0
    2120:	e7d2      	b.n	20c8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2122:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2124:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2126:	2380      	movs	r3, #128	; 0x80
    2128:	029b      	lsls	r3, r3, #10
    212a:	431d      	orrs	r5, r3
    212c:	e7d2      	b.n	20d4 <system_gclk_gen_set_config+0x4c>
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	40000c00 	.word	0x40000c00
    2134:	00001de5 	.word	0x00001de5
    2138:	40000c08 	.word	0x40000c08
    213c:	00001e25 	.word	0x00001e25

00002140 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2140:	b510      	push	{r4, lr}
    2142:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2144:	4a0b      	ldr	r2, [pc, #44]	; (2174 <system_gclk_gen_enable+0x34>)
    2146:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2148:	b25b      	sxtb	r3, r3
    214a:	2b00      	cmp	r3, #0
    214c:	dbfb      	blt.n	2146 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    214e:	4b0a      	ldr	r3, [pc, #40]	; (2178 <system_gclk_gen_enable+0x38>)
    2150:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2152:	4b0a      	ldr	r3, [pc, #40]	; (217c <system_gclk_gen_enable+0x3c>)
    2154:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2156:	4a07      	ldr	r2, [pc, #28]	; (2174 <system_gclk_gen_enable+0x34>)
    2158:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    215a:	b25b      	sxtb	r3, r3
    215c:	2b00      	cmp	r3, #0
    215e:	dbfb      	blt.n	2158 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2160:	4a04      	ldr	r2, [pc, #16]	; (2174 <system_gclk_gen_enable+0x34>)
    2162:	6851      	ldr	r1, [r2, #4]
    2164:	2380      	movs	r3, #128	; 0x80
    2166:	025b      	lsls	r3, r3, #9
    2168:	430b      	orrs	r3, r1
    216a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    216c:	4b04      	ldr	r3, [pc, #16]	; (2180 <system_gclk_gen_enable+0x40>)
    216e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2170:	bd10      	pop	{r4, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	40000c00 	.word	0x40000c00
    2178:	00001de5 	.word	0x00001de5
    217c:	40000c04 	.word	0x40000c04
    2180:	00001e25 	.word	0x00001e25

00002184 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2184:	b570      	push	{r4, r5, r6, lr}
    2186:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2188:	4a1a      	ldr	r2, [pc, #104]	; (21f4 <system_gclk_gen_get_hz+0x70>)
    218a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    218c:	b25b      	sxtb	r3, r3
    218e:	2b00      	cmp	r3, #0
    2190:	dbfb      	blt.n	218a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2192:	4b19      	ldr	r3, [pc, #100]	; (21f8 <system_gclk_gen_get_hz+0x74>)
    2194:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2196:	4b19      	ldr	r3, [pc, #100]	; (21fc <system_gclk_gen_get_hz+0x78>)
    2198:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    219a:	4a16      	ldr	r2, [pc, #88]	; (21f4 <system_gclk_gen_get_hz+0x70>)
    219c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    219e:	b25b      	sxtb	r3, r3
    21a0:	2b00      	cmp	r3, #0
    21a2:	dbfb      	blt.n	219c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    21a4:	4e13      	ldr	r6, [pc, #76]	; (21f4 <system_gclk_gen_get_hz+0x70>)
    21a6:	6870      	ldr	r0, [r6, #4]
    21a8:	04c0      	lsls	r0, r0, #19
    21aa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    21ac:	4b14      	ldr	r3, [pc, #80]	; (2200 <system_gclk_gen_get_hz+0x7c>)
    21ae:	4798      	blx	r3
    21b0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    21b2:	4b12      	ldr	r3, [pc, #72]	; (21fc <system_gclk_gen_get_hz+0x78>)
    21b4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    21b6:	6876      	ldr	r6, [r6, #4]
    21b8:	02f6      	lsls	r6, r6, #11
    21ba:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    21bc:	4b11      	ldr	r3, [pc, #68]	; (2204 <system_gclk_gen_get_hz+0x80>)
    21be:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    21c0:	4a0c      	ldr	r2, [pc, #48]	; (21f4 <system_gclk_gen_get_hz+0x70>)
    21c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    21c4:	b25b      	sxtb	r3, r3
    21c6:	2b00      	cmp	r3, #0
    21c8:	dbfb      	blt.n	21c2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    21ca:	4b0a      	ldr	r3, [pc, #40]	; (21f4 <system_gclk_gen_get_hz+0x70>)
    21cc:	689c      	ldr	r4, [r3, #8]
    21ce:	0224      	lsls	r4, r4, #8
    21d0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    21d2:	4b0d      	ldr	r3, [pc, #52]	; (2208 <system_gclk_gen_get_hz+0x84>)
    21d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    21d6:	2e00      	cmp	r6, #0
    21d8:	d107      	bne.n	21ea <system_gclk_gen_get_hz+0x66>
    21da:	2c01      	cmp	r4, #1
    21dc:	d907      	bls.n	21ee <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    21de:	0021      	movs	r1, r4
    21e0:	0028      	movs	r0, r5
    21e2:	4b0a      	ldr	r3, [pc, #40]	; (220c <system_gclk_gen_get_hz+0x88>)
    21e4:	4798      	blx	r3
    21e6:	0005      	movs	r5, r0
    21e8:	e001      	b.n	21ee <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    21ea:	3401      	adds	r4, #1
    21ec:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    21ee:	0028      	movs	r0, r5
    21f0:	bd70      	pop	{r4, r5, r6, pc}
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	40000c00 	.word	0x40000c00
    21f8:	00001de5 	.word	0x00001de5
    21fc:	40000c04 	.word	0x40000c04
    2200:	00001e55 	.word	0x00001e55
    2204:	40000c08 	.word	0x40000c08
    2208:	00001e25 	.word	0x00001e25
    220c:	00002561 	.word	0x00002561

00002210 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2210:	b510      	push	{r4, lr}
    2212:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2214:	4b06      	ldr	r3, [pc, #24]	; (2230 <system_gclk_chan_enable+0x20>)
    2216:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2218:	4b06      	ldr	r3, [pc, #24]	; (2234 <system_gclk_chan_enable+0x24>)
    221a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    221c:	4a06      	ldr	r2, [pc, #24]	; (2238 <system_gclk_chan_enable+0x28>)
    221e:	8853      	ldrh	r3, [r2, #2]
    2220:	2180      	movs	r1, #128	; 0x80
    2222:	01c9      	lsls	r1, r1, #7
    2224:	430b      	orrs	r3, r1
    2226:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2228:	4b04      	ldr	r3, [pc, #16]	; (223c <system_gclk_chan_enable+0x2c>)
    222a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    222c:	bd10      	pop	{r4, pc}
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	00001de5 	.word	0x00001de5
    2234:	40000c02 	.word	0x40000c02
    2238:	40000c00 	.word	0x40000c00
    223c:	00001e25 	.word	0x00001e25

00002240 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2240:	b510      	push	{r4, lr}
    2242:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2244:	4b0f      	ldr	r3, [pc, #60]	; (2284 <system_gclk_chan_disable+0x44>)
    2246:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2248:	4b0f      	ldr	r3, [pc, #60]	; (2288 <system_gclk_chan_disable+0x48>)
    224a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    224c:	4a0f      	ldr	r2, [pc, #60]	; (228c <system_gclk_chan_disable+0x4c>)
    224e:	8853      	ldrh	r3, [r2, #2]
    2250:	051b      	lsls	r3, r3, #20
    2252:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2254:	8853      	ldrh	r3, [r2, #2]
    2256:	490e      	ldr	r1, [pc, #56]	; (2290 <system_gclk_chan_disable+0x50>)
    2258:	400b      	ands	r3, r1
    225a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    225c:	8853      	ldrh	r3, [r2, #2]
    225e:	490d      	ldr	r1, [pc, #52]	; (2294 <system_gclk_chan_disable+0x54>)
    2260:	400b      	ands	r3, r1
    2262:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2264:	0011      	movs	r1, r2
    2266:	2280      	movs	r2, #128	; 0x80
    2268:	01d2      	lsls	r2, r2, #7
    226a:	884b      	ldrh	r3, [r1, #2]
    226c:	4213      	tst	r3, r2
    226e:	d1fc      	bne.n	226a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2270:	4906      	ldr	r1, [pc, #24]	; (228c <system_gclk_chan_disable+0x4c>)
    2272:	884a      	ldrh	r2, [r1, #2]
    2274:	0203      	lsls	r3, r0, #8
    2276:	4806      	ldr	r0, [pc, #24]	; (2290 <system_gclk_chan_disable+0x50>)
    2278:	4002      	ands	r2, r0
    227a:	4313      	orrs	r3, r2
    227c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    227e:	4b06      	ldr	r3, [pc, #24]	; (2298 <system_gclk_chan_disable+0x58>)
    2280:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2282:	bd10      	pop	{r4, pc}
    2284:	00001de5 	.word	0x00001de5
    2288:	40000c02 	.word	0x40000c02
    228c:	40000c00 	.word	0x40000c00
    2290:	fffff0ff 	.word	0xfffff0ff
    2294:	ffffbfff 	.word	0xffffbfff
    2298:	00001e25 	.word	0x00001e25

0000229c <system_gclk_chan_set_config>:
{
    229c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    229e:	780c      	ldrb	r4, [r1, #0]
    22a0:	0224      	lsls	r4, r4, #8
    22a2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    22a4:	4b02      	ldr	r3, [pc, #8]	; (22b0 <system_gclk_chan_set_config+0x14>)
    22a6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    22a8:	b2a4      	uxth	r4, r4
    22aa:	4b02      	ldr	r3, [pc, #8]	; (22b4 <system_gclk_chan_set_config+0x18>)
    22ac:	805c      	strh	r4, [r3, #2]
}
    22ae:	bd10      	pop	{r4, pc}
    22b0:	00002241 	.word	0x00002241
    22b4:	40000c00 	.word	0x40000c00

000022b8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    22b8:	b510      	push	{r4, lr}
    22ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    22bc:	4b06      	ldr	r3, [pc, #24]	; (22d8 <system_gclk_chan_get_hz+0x20>)
    22be:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    22c0:	4b06      	ldr	r3, [pc, #24]	; (22dc <system_gclk_chan_get_hz+0x24>)
    22c2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    22c4:	4b06      	ldr	r3, [pc, #24]	; (22e0 <system_gclk_chan_get_hz+0x28>)
    22c6:	885c      	ldrh	r4, [r3, #2]
    22c8:	0524      	lsls	r4, r4, #20
    22ca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    22cc:	4b05      	ldr	r3, [pc, #20]	; (22e4 <system_gclk_chan_get_hz+0x2c>)
    22ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    22d0:	0020      	movs	r0, r4
    22d2:	4b05      	ldr	r3, [pc, #20]	; (22e8 <system_gclk_chan_get_hz+0x30>)
    22d4:	4798      	blx	r3
}
    22d6:	bd10      	pop	{r4, pc}
    22d8:	00001de5 	.word	0x00001de5
    22dc:	40000c02 	.word	0x40000c02
    22e0:	40000c00 	.word	0x40000c00
    22e4:	00001e25 	.word	0x00001e25
    22e8:	00002185 	.word	0x00002185

000022ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    22ec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    22ee:	78d3      	ldrb	r3, [r2, #3]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d135      	bne.n	2360 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    22f4:	7813      	ldrb	r3, [r2, #0]
    22f6:	2b80      	cmp	r3, #128	; 0x80
    22f8:	d029      	beq.n	234e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    22fa:	061b      	lsls	r3, r3, #24
    22fc:	2480      	movs	r4, #128	; 0x80
    22fe:	0264      	lsls	r4, r4, #9
    2300:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2302:	7854      	ldrb	r4, [r2, #1]
    2304:	2502      	movs	r5, #2
    2306:	43ac      	bics	r4, r5
    2308:	d106      	bne.n	2318 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    230a:	7894      	ldrb	r4, [r2, #2]
    230c:	2c00      	cmp	r4, #0
    230e:	d120      	bne.n	2352 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2310:	2480      	movs	r4, #128	; 0x80
    2312:	02a4      	lsls	r4, r4, #10
    2314:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2316:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2318:	7854      	ldrb	r4, [r2, #1]
    231a:	3c01      	subs	r4, #1
    231c:	2c01      	cmp	r4, #1
    231e:	d91c      	bls.n	235a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2320:	040d      	lsls	r5, r1, #16
    2322:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2324:	24a0      	movs	r4, #160	; 0xa0
    2326:	05e4      	lsls	r4, r4, #23
    2328:	432c      	orrs	r4, r5
    232a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    232c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    232e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2330:	24d0      	movs	r4, #208	; 0xd0
    2332:	0624      	lsls	r4, r4, #24
    2334:	432c      	orrs	r4, r5
    2336:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2338:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    233a:	78d4      	ldrb	r4, [r2, #3]
    233c:	2c00      	cmp	r4, #0
    233e:	d122      	bne.n	2386 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2340:	035b      	lsls	r3, r3, #13
    2342:	d51c      	bpl.n	237e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2344:	7893      	ldrb	r3, [r2, #2]
    2346:	2b01      	cmp	r3, #1
    2348:	d01e      	beq.n	2388 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    234a:	6141      	str	r1, [r0, #20]
    234c:	e017      	b.n	237e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    234e:	2300      	movs	r3, #0
    2350:	e7d7      	b.n	2302 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2352:	24c0      	movs	r4, #192	; 0xc0
    2354:	02e4      	lsls	r4, r4, #11
    2356:	4323      	orrs	r3, r4
    2358:	e7dd      	b.n	2316 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    235a:	4c0d      	ldr	r4, [pc, #52]	; (2390 <_system_pinmux_config+0xa4>)
    235c:	4023      	ands	r3, r4
    235e:	e7df      	b.n	2320 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2360:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2362:	040c      	lsls	r4, r1, #16
    2364:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2366:	23a0      	movs	r3, #160	; 0xa0
    2368:	05db      	lsls	r3, r3, #23
    236a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    236c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    236e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2370:	23d0      	movs	r3, #208	; 0xd0
    2372:	061b      	lsls	r3, r3, #24
    2374:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2376:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2378:	78d3      	ldrb	r3, [r2, #3]
    237a:	2b00      	cmp	r3, #0
    237c:	d103      	bne.n	2386 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    237e:	7853      	ldrb	r3, [r2, #1]
    2380:	3b01      	subs	r3, #1
    2382:	2b01      	cmp	r3, #1
    2384:	d902      	bls.n	238c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2386:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2388:	6181      	str	r1, [r0, #24]
    238a:	e7f8      	b.n	237e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    238c:	6081      	str	r1, [r0, #8]
}
    238e:	e7fa      	b.n	2386 <_system_pinmux_config+0x9a>
    2390:	fffbffff 	.word	0xfffbffff

00002394 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2394:	b510      	push	{r4, lr}
    2396:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2398:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    239a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    239c:	2900      	cmp	r1, #0
    239e:	d104      	bne.n	23aa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    23a0:	0943      	lsrs	r3, r0, #5
    23a2:	01db      	lsls	r3, r3, #7
    23a4:	4905      	ldr	r1, [pc, #20]	; (23bc <system_pinmux_pin_set_config+0x28>)
    23a6:	468c      	mov	ip, r1
    23a8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    23aa:	241f      	movs	r4, #31
    23ac:	4020      	ands	r0, r4
    23ae:	2101      	movs	r1, #1
    23b0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    23b2:	0018      	movs	r0, r3
    23b4:	4b02      	ldr	r3, [pc, #8]	; (23c0 <system_pinmux_pin_set_config+0x2c>)
    23b6:	4798      	blx	r3
}
    23b8:	bd10      	pop	{r4, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	41004400 	.word	0x41004400
    23c0:	000022ed 	.word	0x000022ed

000023c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    23c4:	4770      	bx	lr
	...

000023c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    23c8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    23ca:	4b05      	ldr	r3, [pc, #20]	; (23e0 <system_init+0x18>)
    23cc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    23ce:	4b05      	ldr	r3, [pc, #20]	; (23e4 <system_init+0x1c>)
    23d0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    23d2:	4b05      	ldr	r3, [pc, #20]	; (23e8 <system_init+0x20>)
    23d4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    23d6:	4b05      	ldr	r3, [pc, #20]	; (23ec <system_init+0x24>)
    23d8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    23da:	4b05      	ldr	r3, [pc, #20]	; (23f0 <system_init+0x28>)
    23dc:	4798      	blx	r3
}
    23de:	bd10      	pop	{r4, pc}
    23e0:	00001fcd 	.word	0x00001fcd
    23e4:	00001de1 	.word	0x00001de1
    23e8:	000023c5 	.word	0x000023c5
    23ec:	000023c5 	.word	0x000023c5
    23f0:	000023c5 	.word	0x000023c5

000023f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    23f4:	e7fe      	b.n	23f4 <Dummy_Handler>
	...

000023f8 <Reset_Handler>:
{
    23f8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    23fa:	4a26      	ldr	r2, [pc, #152]	; (2494 <Reset_Handler+0x9c>)
    23fc:	4b26      	ldr	r3, [pc, #152]	; (2498 <Reset_Handler+0xa0>)
    23fe:	429a      	cmp	r2, r3
    2400:	d011      	beq.n	2426 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2402:	001a      	movs	r2, r3
    2404:	4b25      	ldr	r3, [pc, #148]	; (249c <Reset_Handler+0xa4>)
    2406:	429a      	cmp	r2, r3
    2408:	d20d      	bcs.n	2426 <Reset_Handler+0x2e>
    240a:	4a25      	ldr	r2, [pc, #148]	; (24a0 <Reset_Handler+0xa8>)
    240c:	3303      	adds	r3, #3
    240e:	1a9b      	subs	r3, r3, r2
    2410:	089b      	lsrs	r3, r3, #2
    2412:	3301      	adds	r3, #1
    2414:	009b      	lsls	r3, r3, #2
    2416:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2418:	481f      	ldr	r0, [pc, #124]	; (2498 <Reset_Handler+0xa0>)
    241a:	491e      	ldr	r1, [pc, #120]	; (2494 <Reset_Handler+0x9c>)
    241c:	588c      	ldr	r4, [r1, r2]
    241e:	5084      	str	r4, [r0, r2]
    2420:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2422:	429a      	cmp	r2, r3
    2424:	d1fa      	bne.n	241c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2426:	4a1f      	ldr	r2, [pc, #124]	; (24a4 <Reset_Handler+0xac>)
    2428:	4b1f      	ldr	r3, [pc, #124]	; (24a8 <Reset_Handler+0xb0>)
    242a:	429a      	cmp	r2, r3
    242c:	d20a      	bcs.n	2444 <Reset_Handler+0x4c>
    242e:	43d3      	mvns	r3, r2
    2430:	491d      	ldr	r1, [pc, #116]	; (24a8 <Reset_Handler+0xb0>)
    2432:	185b      	adds	r3, r3, r1
    2434:	2103      	movs	r1, #3
    2436:	438b      	bics	r3, r1
    2438:	3304      	adds	r3, #4
    243a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    243c:	2100      	movs	r1, #0
    243e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2440:	4293      	cmp	r3, r2
    2442:	d1fc      	bne.n	243e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2444:	4a19      	ldr	r2, [pc, #100]	; (24ac <Reset_Handler+0xb4>)
    2446:	21ff      	movs	r1, #255	; 0xff
    2448:	4b19      	ldr	r3, [pc, #100]	; (24b0 <Reset_Handler+0xb8>)
    244a:	438b      	bics	r3, r1
    244c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    244e:	39fd      	subs	r1, #253	; 0xfd
    2450:	2390      	movs	r3, #144	; 0x90
    2452:	005b      	lsls	r3, r3, #1
    2454:	4a17      	ldr	r2, [pc, #92]	; (24b4 <Reset_Handler+0xbc>)
    2456:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2458:	4b17      	ldr	r3, [pc, #92]	; (24b8 <Reset_Handler+0xc0>)
    245a:	7b9a      	ldrb	r2, [r3, #14]
    245c:	312e      	adds	r1, #46	; 0x2e
    245e:	438a      	bics	r2, r1
    2460:	2120      	movs	r1, #32
    2462:	430a      	orrs	r2, r1
    2464:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2466:	7b9a      	ldrb	r2, [r3, #14]
    2468:	210c      	movs	r1, #12
    246a:	438a      	bics	r2, r1
    246c:	2108      	movs	r1, #8
    246e:	430a      	orrs	r2, r1
    2470:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2472:	7b9a      	ldrb	r2, [r3, #14]
    2474:	2103      	movs	r1, #3
    2476:	438a      	bics	r2, r1
    2478:	2102      	movs	r1, #2
    247a:	430a      	orrs	r2, r1
    247c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    247e:	4a0f      	ldr	r2, [pc, #60]	; (24bc <Reset_Handler+0xc4>)
    2480:	6853      	ldr	r3, [r2, #4]
    2482:	2180      	movs	r1, #128	; 0x80
    2484:	430b      	orrs	r3, r1
    2486:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2488:	4b0d      	ldr	r3, [pc, #52]	; (24c0 <Reset_Handler+0xc8>)
    248a:	4798      	blx	r3
        main();
    248c:	4b0d      	ldr	r3, [pc, #52]	; (24c4 <Reset_Handler+0xcc>)
    248e:	4798      	blx	r3
    2490:	e7fe      	b.n	2490 <Reset_Handler+0x98>
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	00002978 	.word	0x00002978
    2498:	20000000 	.word	0x20000000
    249c:	2000007c 	.word	0x2000007c
    24a0:	20000004 	.word	0x20000004
    24a4:	20000080 	.word	0x20000080
    24a8:	20000824 	.word	0x20000824
    24ac:	e000ed00 	.word	0xe000ed00
    24b0:	00000000 	.word	0x00000000
    24b4:	41007000 	.word	0x41007000
    24b8:	41004800 	.word	0x41004800
    24bc:	41004000 	.word	0x41004000
    24c0:	00002679 	.word	0x00002679
    24c4:	00002509 	.word	0x00002509

000024c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    24c8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    24ca:	4a06      	ldr	r2, [pc, #24]	; (24e4 <_sbrk+0x1c>)
    24cc:	6812      	ldr	r2, [r2, #0]
    24ce:	2a00      	cmp	r2, #0
    24d0:	d004      	beq.n	24dc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    24d2:	4a04      	ldr	r2, [pc, #16]	; (24e4 <_sbrk+0x1c>)
    24d4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    24d6:	18c3      	adds	r3, r0, r3
    24d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    24da:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    24dc:	4902      	ldr	r1, [pc, #8]	; (24e8 <_sbrk+0x20>)
    24de:	4a01      	ldr	r2, [pc, #4]	; (24e4 <_sbrk+0x1c>)
    24e0:	6011      	str	r1, [r2, #0]
    24e2:	e7f6      	b.n	24d2 <_sbrk+0xa>
    24e4:	20000174 	.word	0x20000174
    24e8:	20000c28 	.word	0x20000c28

000024ec <setI2CDetect>:
	}

}

void setI2CDetect()
{
    24ec:	b500      	push	{lr}
    24ee:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    24f0:	a901      	add	r1, sp, #4
    24f2:	2300      	movs	r3, #0
    24f4:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    24f6:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    24f8:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(DETECT_PIN, &config_port_pin);
    24fa:	2018      	movs	r0, #24
    24fc:	4b01      	ldr	r3, [pc, #4]	; (2504 <setI2CDetect+0x18>)
    24fe:	4798      	blx	r3
}
    2500:	b003      	add	sp, #12
    2502:	bd00      	pop	{pc}
    2504:	00000ae1 	.word	0x00000ae1

00002508 <main>:


int main (void)
{
    2508:	b570      	push	{r4, r5, r6, lr}
	system_init();
    250a:	4b0b      	ldr	r3, [pc, #44]	; (2538 <main+0x30>)
    250c:	4798      	blx	r3
	delay_init();
    250e:	4b0b      	ldr	r3, [pc, #44]	; (253c <main+0x34>)
    2510:	4798      	blx	r3
	
	ir_sensor_init();
    2512:	4b0b      	ldr	r3, [pc, #44]	; (2540 <main+0x38>)
    2514:	4798      	blx	r3
	RGBPI55Init();
    2516:	4b0b      	ldr	r3, [pc, #44]	; (2544 <main+0x3c>)
    2518:	4798      	blx	r3
	//delay_cycles_ms(1000);
	setI2CDetect();
    251a:	4b0b      	ldr	r3, [pc, #44]	; (2548 <main+0x40>)
    251c:	4798      	blx	r3
	//testTimer();
	
	configure_i2c_slave();
    251e:	4b0b      	ldr	r3, [pc, #44]	; (254c <main+0x44>)
    2520:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    2522:	4b0b      	ldr	r3, [pc, #44]	; (2550 <main+0x48>)
    2524:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	while(true) {
		fadeREDControlled();
    2526:	4e0b      	ldr	r6, [pc, #44]	; (2554 <main+0x4c>)
		read_all_values();
    2528:	4d0b      	ldr	r5, [pc, #44]	; (2558 <main+0x50>)
		//testADDLED();
		//fadeREDControlled();
		//readI2CDetect();
		delay_ms(10);
    252a:	4c0c      	ldr	r4, [pc, #48]	; (255c <main+0x54>)
		fadeREDControlled();
    252c:	47b0      	blx	r6
		read_all_values();
    252e:	47a8      	blx	r5
		delay_ms(10);
    2530:	200a      	movs	r0, #10
    2532:	47a0      	blx	r4
    2534:	e7fa      	b.n	252c <main+0x24>
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	000023c9 	.word	0x000023c9
    253c:	000001d9 	.word	0x000001d9
    2540:	000019f9 	.word	0x000019f9
    2544:	00001c0d 	.word	0x00001c0d
    2548:	000024ed 	.word	0x000024ed
    254c:	000017bd 	.word	0x000017bd
    2550:	00001855 	.word	0x00001855
    2554:	00000171 	.word	0x00000171
    2558:	00001641 	.word	0x00001641
    255c:	00000219 	.word	0x00000219

00002560 <__udivsi3>:
    2560:	2200      	movs	r2, #0
    2562:	0843      	lsrs	r3, r0, #1
    2564:	428b      	cmp	r3, r1
    2566:	d374      	bcc.n	2652 <__udivsi3+0xf2>
    2568:	0903      	lsrs	r3, r0, #4
    256a:	428b      	cmp	r3, r1
    256c:	d35f      	bcc.n	262e <__udivsi3+0xce>
    256e:	0a03      	lsrs	r3, r0, #8
    2570:	428b      	cmp	r3, r1
    2572:	d344      	bcc.n	25fe <__udivsi3+0x9e>
    2574:	0b03      	lsrs	r3, r0, #12
    2576:	428b      	cmp	r3, r1
    2578:	d328      	bcc.n	25cc <__udivsi3+0x6c>
    257a:	0c03      	lsrs	r3, r0, #16
    257c:	428b      	cmp	r3, r1
    257e:	d30d      	bcc.n	259c <__udivsi3+0x3c>
    2580:	22ff      	movs	r2, #255	; 0xff
    2582:	0209      	lsls	r1, r1, #8
    2584:	ba12      	rev	r2, r2
    2586:	0c03      	lsrs	r3, r0, #16
    2588:	428b      	cmp	r3, r1
    258a:	d302      	bcc.n	2592 <__udivsi3+0x32>
    258c:	1212      	asrs	r2, r2, #8
    258e:	0209      	lsls	r1, r1, #8
    2590:	d065      	beq.n	265e <__udivsi3+0xfe>
    2592:	0b03      	lsrs	r3, r0, #12
    2594:	428b      	cmp	r3, r1
    2596:	d319      	bcc.n	25cc <__udivsi3+0x6c>
    2598:	e000      	b.n	259c <__udivsi3+0x3c>
    259a:	0a09      	lsrs	r1, r1, #8
    259c:	0bc3      	lsrs	r3, r0, #15
    259e:	428b      	cmp	r3, r1
    25a0:	d301      	bcc.n	25a6 <__udivsi3+0x46>
    25a2:	03cb      	lsls	r3, r1, #15
    25a4:	1ac0      	subs	r0, r0, r3
    25a6:	4152      	adcs	r2, r2
    25a8:	0b83      	lsrs	r3, r0, #14
    25aa:	428b      	cmp	r3, r1
    25ac:	d301      	bcc.n	25b2 <__udivsi3+0x52>
    25ae:	038b      	lsls	r3, r1, #14
    25b0:	1ac0      	subs	r0, r0, r3
    25b2:	4152      	adcs	r2, r2
    25b4:	0b43      	lsrs	r3, r0, #13
    25b6:	428b      	cmp	r3, r1
    25b8:	d301      	bcc.n	25be <__udivsi3+0x5e>
    25ba:	034b      	lsls	r3, r1, #13
    25bc:	1ac0      	subs	r0, r0, r3
    25be:	4152      	adcs	r2, r2
    25c0:	0b03      	lsrs	r3, r0, #12
    25c2:	428b      	cmp	r3, r1
    25c4:	d301      	bcc.n	25ca <__udivsi3+0x6a>
    25c6:	030b      	lsls	r3, r1, #12
    25c8:	1ac0      	subs	r0, r0, r3
    25ca:	4152      	adcs	r2, r2
    25cc:	0ac3      	lsrs	r3, r0, #11
    25ce:	428b      	cmp	r3, r1
    25d0:	d301      	bcc.n	25d6 <__udivsi3+0x76>
    25d2:	02cb      	lsls	r3, r1, #11
    25d4:	1ac0      	subs	r0, r0, r3
    25d6:	4152      	adcs	r2, r2
    25d8:	0a83      	lsrs	r3, r0, #10
    25da:	428b      	cmp	r3, r1
    25dc:	d301      	bcc.n	25e2 <__udivsi3+0x82>
    25de:	028b      	lsls	r3, r1, #10
    25e0:	1ac0      	subs	r0, r0, r3
    25e2:	4152      	adcs	r2, r2
    25e4:	0a43      	lsrs	r3, r0, #9
    25e6:	428b      	cmp	r3, r1
    25e8:	d301      	bcc.n	25ee <__udivsi3+0x8e>
    25ea:	024b      	lsls	r3, r1, #9
    25ec:	1ac0      	subs	r0, r0, r3
    25ee:	4152      	adcs	r2, r2
    25f0:	0a03      	lsrs	r3, r0, #8
    25f2:	428b      	cmp	r3, r1
    25f4:	d301      	bcc.n	25fa <__udivsi3+0x9a>
    25f6:	020b      	lsls	r3, r1, #8
    25f8:	1ac0      	subs	r0, r0, r3
    25fa:	4152      	adcs	r2, r2
    25fc:	d2cd      	bcs.n	259a <__udivsi3+0x3a>
    25fe:	09c3      	lsrs	r3, r0, #7
    2600:	428b      	cmp	r3, r1
    2602:	d301      	bcc.n	2608 <__udivsi3+0xa8>
    2604:	01cb      	lsls	r3, r1, #7
    2606:	1ac0      	subs	r0, r0, r3
    2608:	4152      	adcs	r2, r2
    260a:	0983      	lsrs	r3, r0, #6
    260c:	428b      	cmp	r3, r1
    260e:	d301      	bcc.n	2614 <__udivsi3+0xb4>
    2610:	018b      	lsls	r3, r1, #6
    2612:	1ac0      	subs	r0, r0, r3
    2614:	4152      	adcs	r2, r2
    2616:	0943      	lsrs	r3, r0, #5
    2618:	428b      	cmp	r3, r1
    261a:	d301      	bcc.n	2620 <__udivsi3+0xc0>
    261c:	014b      	lsls	r3, r1, #5
    261e:	1ac0      	subs	r0, r0, r3
    2620:	4152      	adcs	r2, r2
    2622:	0903      	lsrs	r3, r0, #4
    2624:	428b      	cmp	r3, r1
    2626:	d301      	bcc.n	262c <__udivsi3+0xcc>
    2628:	010b      	lsls	r3, r1, #4
    262a:	1ac0      	subs	r0, r0, r3
    262c:	4152      	adcs	r2, r2
    262e:	08c3      	lsrs	r3, r0, #3
    2630:	428b      	cmp	r3, r1
    2632:	d301      	bcc.n	2638 <__udivsi3+0xd8>
    2634:	00cb      	lsls	r3, r1, #3
    2636:	1ac0      	subs	r0, r0, r3
    2638:	4152      	adcs	r2, r2
    263a:	0883      	lsrs	r3, r0, #2
    263c:	428b      	cmp	r3, r1
    263e:	d301      	bcc.n	2644 <__udivsi3+0xe4>
    2640:	008b      	lsls	r3, r1, #2
    2642:	1ac0      	subs	r0, r0, r3
    2644:	4152      	adcs	r2, r2
    2646:	0843      	lsrs	r3, r0, #1
    2648:	428b      	cmp	r3, r1
    264a:	d301      	bcc.n	2650 <__udivsi3+0xf0>
    264c:	004b      	lsls	r3, r1, #1
    264e:	1ac0      	subs	r0, r0, r3
    2650:	4152      	adcs	r2, r2
    2652:	1a41      	subs	r1, r0, r1
    2654:	d200      	bcs.n	2658 <__udivsi3+0xf8>
    2656:	4601      	mov	r1, r0
    2658:	4152      	adcs	r2, r2
    265a:	4610      	mov	r0, r2
    265c:	4770      	bx	lr
    265e:	e7ff      	b.n	2660 <__udivsi3+0x100>
    2660:	b501      	push	{r0, lr}
    2662:	2000      	movs	r0, #0
    2664:	f000 f806 	bl	2674 <__aeabi_idiv0>
    2668:	bd02      	pop	{r1, pc}
    266a:	46c0      	nop			; (mov r8, r8)

0000266c <__aeabi_uidivmod>:
    266c:	2900      	cmp	r1, #0
    266e:	d0f7      	beq.n	2660 <__udivsi3+0x100>
    2670:	e776      	b.n	2560 <__udivsi3>
    2672:	4770      	bx	lr

00002674 <__aeabi_idiv0>:
    2674:	4770      	bx	lr
    2676:	46c0      	nop			; (mov r8, r8)

00002678 <__libc_init_array>:
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	2600      	movs	r6, #0
    267c:	4d0c      	ldr	r5, [pc, #48]	; (26b0 <__libc_init_array+0x38>)
    267e:	4c0d      	ldr	r4, [pc, #52]	; (26b4 <__libc_init_array+0x3c>)
    2680:	1b64      	subs	r4, r4, r5
    2682:	10a4      	asrs	r4, r4, #2
    2684:	42a6      	cmp	r6, r4
    2686:	d109      	bne.n	269c <__libc_init_array+0x24>
    2688:	2600      	movs	r6, #0
    268a:	f000 f965 	bl	2958 <_init>
    268e:	4d0a      	ldr	r5, [pc, #40]	; (26b8 <__libc_init_array+0x40>)
    2690:	4c0a      	ldr	r4, [pc, #40]	; (26bc <__libc_init_array+0x44>)
    2692:	1b64      	subs	r4, r4, r5
    2694:	10a4      	asrs	r4, r4, #2
    2696:	42a6      	cmp	r6, r4
    2698:	d105      	bne.n	26a6 <__libc_init_array+0x2e>
    269a:	bd70      	pop	{r4, r5, r6, pc}
    269c:	00b3      	lsls	r3, r6, #2
    269e:	58eb      	ldr	r3, [r5, r3]
    26a0:	4798      	blx	r3
    26a2:	3601      	adds	r6, #1
    26a4:	e7ee      	b.n	2684 <__libc_init_array+0xc>
    26a6:	00b3      	lsls	r3, r6, #2
    26a8:	58eb      	ldr	r3, [r5, r3]
    26aa:	4798      	blx	r3
    26ac:	3601      	adds	r6, #1
    26ae:	e7f2      	b.n	2696 <__libc_init_array+0x1e>
    26b0:	00002964 	.word	0x00002964
    26b4:	00002964 	.word	0x00002964
    26b8:	00002964 	.word	0x00002964
    26bc:	00002968 	.word	0x00002968

000026c0 <malloc>:
    26c0:	b510      	push	{r4, lr}
    26c2:	4b03      	ldr	r3, [pc, #12]	; (26d0 <malloc+0x10>)
    26c4:	0001      	movs	r1, r0
    26c6:	6818      	ldr	r0, [r3, #0]
    26c8:	f000 f816 	bl	26f8 <_malloc_r>
    26cc:	bd10      	pop	{r4, pc}
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	20000018 	.word	0x20000018

000026d4 <memcpy>:
    26d4:	2300      	movs	r3, #0
    26d6:	b510      	push	{r4, lr}
    26d8:	429a      	cmp	r2, r3
    26da:	d100      	bne.n	26de <memcpy+0xa>
    26dc:	bd10      	pop	{r4, pc}
    26de:	5ccc      	ldrb	r4, [r1, r3]
    26e0:	54c4      	strb	r4, [r0, r3]
    26e2:	3301      	adds	r3, #1
    26e4:	e7f8      	b.n	26d8 <memcpy+0x4>

000026e6 <memset>:
    26e6:	0003      	movs	r3, r0
    26e8:	1882      	adds	r2, r0, r2
    26ea:	4293      	cmp	r3, r2
    26ec:	d100      	bne.n	26f0 <memset+0xa>
    26ee:	4770      	bx	lr
    26f0:	7019      	strb	r1, [r3, #0]
    26f2:	3301      	adds	r3, #1
    26f4:	e7f9      	b.n	26ea <memset+0x4>
	...

000026f8 <_malloc_r>:
    26f8:	2303      	movs	r3, #3
    26fa:	b570      	push	{r4, r5, r6, lr}
    26fc:	1ccd      	adds	r5, r1, #3
    26fe:	439d      	bics	r5, r3
    2700:	3508      	adds	r5, #8
    2702:	0006      	movs	r6, r0
    2704:	2d0c      	cmp	r5, #12
    2706:	d21e      	bcs.n	2746 <_malloc_r+0x4e>
    2708:	250c      	movs	r5, #12
    270a:	42a9      	cmp	r1, r5
    270c:	d81d      	bhi.n	274a <_malloc_r+0x52>
    270e:	0030      	movs	r0, r6
    2710:	f000 f862 	bl	27d8 <__malloc_lock>
    2714:	4a25      	ldr	r2, [pc, #148]	; (27ac <_malloc_r+0xb4>)
    2716:	6814      	ldr	r4, [r2, #0]
    2718:	0021      	movs	r1, r4
    271a:	2900      	cmp	r1, #0
    271c:	d119      	bne.n	2752 <_malloc_r+0x5a>
    271e:	4c24      	ldr	r4, [pc, #144]	; (27b0 <_malloc_r+0xb8>)
    2720:	6823      	ldr	r3, [r4, #0]
    2722:	2b00      	cmp	r3, #0
    2724:	d103      	bne.n	272e <_malloc_r+0x36>
    2726:	0030      	movs	r0, r6
    2728:	f000 f844 	bl	27b4 <_sbrk_r>
    272c:	6020      	str	r0, [r4, #0]
    272e:	0029      	movs	r1, r5
    2730:	0030      	movs	r0, r6
    2732:	f000 f83f 	bl	27b4 <_sbrk_r>
    2736:	1c43      	adds	r3, r0, #1
    2738:	d12c      	bne.n	2794 <_malloc_r+0x9c>
    273a:	230c      	movs	r3, #12
    273c:	0030      	movs	r0, r6
    273e:	6033      	str	r3, [r6, #0]
    2740:	f000 f84b 	bl	27da <__malloc_unlock>
    2744:	e003      	b.n	274e <_malloc_r+0x56>
    2746:	2d00      	cmp	r5, #0
    2748:	dadf      	bge.n	270a <_malloc_r+0x12>
    274a:	230c      	movs	r3, #12
    274c:	6033      	str	r3, [r6, #0]
    274e:	2000      	movs	r0, #0
    2750:	bd70      	pop	{r4, r5, r6, pc}
    2752:	680b      	ldr	r3, [r1, #0]
    2754:	1b5b      	subs	r3, r3, r5
    2756:	d41a      	bmi.n	278e <_malloc_r+0x96>
    2758:	2b0b      	cmp	r3, #11
    275a:	d903      	bls.n	2764 <_malloc_r+0x6c>
    275c:	600b      	str	r3, [r1, #0]
    275e:	18cc      	adds	r4, r1, r3
    2760:	6025      	str	r5, [r4, #0]
    2762:	e003      	b.n	276c <_malloc_r+0x74>
    2764:	428c      	cmp	r4, r1
    2766:	d10e      	bne.n	2786 <_malloc_r+0x8e>
    2768:	6863      	ldr	r3, [r4, #4]
    276a:	6013      	str	r3, [r2, #0]
    276c:	0030      	movs	r0, r6
    276e:	f000 f834 	bl	27da <__malloc_unlock>
    2772:	0020      	movs	r0, r4
    2774:	2207      	movs	r2, #7
    2776:	300b      	adds	r0, #11
    2778:	1d23      	adds	r3, r4, #4
    277a:	4390      	bics	r0, r2
    277c:	1ac3      	subs	r3, r0, r3
    277e:	d0e7      	beq.n	2750 <_malloc_r+0x58>
    2780:	425a      	negs	r2, r3
    2782:	50e2      	str	r2, [r4, r3]
    2784:	e7e4      	b.n	2750 <_malloc_r+0x58>
    2786:	684b      	ldr	r3, [r1, #4]
    2788:	6063      	str	r3, [r4, #4]
    278a:	000c      	movs	r4, r1
    278c:	e7ee      	b.n	276c <_malloc_r+0x74>
    278e:	000c      	movs	r4, r1
    2790:	6849      	ldr	r1, [r1, #4]
    2792:	e7c2      	b.n	271a <_malloc_r+0x22>
    2794:	2303      	movs	r3, #3
    2796:	1cc4      	adds	r4, r0, #3
    2798:	439c      	bics	r4, r3
    279a:	42a0      	cmp	r0, r4
    279c:	d0e0      	beq.n	2760 <_malloc_r+0x68>
    279e:	1a21      	subs	r1, r4, r0
    27a0:	0030      	movs	r0, r6
    27a2:	f000 f807 	bl	27b4 <_sbrk_r>
    27a6:	1c43      	adds	r3, r0, #1
    27a8:	d1da      	bne.n	2760 <_malloc_r+0x68>
    27aa:	e7c6      	b.n	273a <_malloc_r+0x42>
    27ac:	2000017c 	.word	0x2000017c
    27b0:	20000180 	.word	0x20000180

000027b4 <_sbrk_r>:
    27b4:	2300      	movs	r3, #0
    27b6:	b570      	push	{r4, r5, r6, lr}
    27b8:	4c06      	ldr	r4, [pc, #24]	; (27d4 <_sbrk_r+0x20>)
    27ba:	0005      	movs	r5, r0
    27bc:	0008      	movs	r0, r1
    27be:	6023      	str	r3, [r4, #0]
    27c0:	f7ff fe82 	bl	24c8 <_sbrk>
    27c4:	1c43      	adds	r3, r0, #1
    27c6:	d103      	bne.n	27d0 <_sbrk_r+0x1c>
    27c8:	6823      	ldr	r3, [r4, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d000      	beq.n	27d0 <_sbrk_r+0x1c>
    27ce:	602b      	str	r3, [r5, #0]
    27d0:	bd70      	pop	{r4, r5, r6, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	20000820 	.word	0x20000820

000027d8 <__malloc_lock>:
    27d8:	4770      	bx	lr

000027da <__malloc_unlock>:
    27da:	4770      	bx	lr
    27dc:	00000456 	.word	0x00000456
    27e0:	000006a2 	.word	0x000006a2
    27e4:	000006a2 	.word	0x000006a2
    27e8:	000006a2 	.word	0x000006a2
    27ec:	000006a2 	.word	0x000006a2
    27f0:	000006a2 	.word	0x000006a2
    27f4:	000006a2 	.word	0x000006a2
    27f8:	000006a2 	.word	0x000006a2
    27fc:	000006a2 	.word	0x000006a2
    2800:	000006a2 	.word	0x000006a2
    2804:	000006a2 	.word	0x000006a2
    2808:	000006a2 	.word	0x000006a2
    280c:	000006a2 	.word	0x000006a2
    2810:	000006a2 	.word	0x000006a2
    2814:	000006a2 	.word	0x000006a2
    2818:	000006a2 	.word	0x000006a2
    281c:	0000043e 	.word	0x0000043e
    2820:	000006a2 	.word	0x000006a2
    2824:	000006a2 	.word	0x000006a2
    2828:	000006a2 	.word	0x000006a2
    282c:	000006a2 	.word	0x000006a2
    2830:	000006a2 	.word	0x000006a2
    2834:	000006a2 	.word	0x000006a2
    2838:	000006a2 	.word	0x000006a2
    283c:	000006a2 	.word	0x000006a2
    2840:	000006a2 	.word	0x000006a2
    2844:	000006a2 	.word	0x000006a2
    2848:	000006a2 	.word	0x000006a2
    284c:	000006a2 	.word	0x000006a2
    2850:	000006a2 	.word	0x000006a2
    2854:	000006a2 	.word	0x000006a2
    2858:	000006a2 	.word	0x000006a2
    285c:	0000044e 	.word	0x0000044e
    2860:	000006a2 	.word	0x000006a2
    2864:	000006a2 	.word	0x000006a2
    2868:	000006a2 	.word	0x000006a2
    286c:	000006a2 	.word	0x000006a2
    2870:	000006a2 	.word	0x000006a2
    2874:	000006a2 	.word	0x000006a2
    2878:	000006a2 	.word	0x000006a2
    287c:	000006a2 	.word	0x000006a2
    2880:	000006a2 	.word	0x000006a2
    2884:	000006a2 	.word	0x000006a2
    2888:	000006a2 	.word	0x000006a2
    288c:	000006a2 	.word	0x000006a2
    2890:	000006a2 	.word	0x000006a2
    2894:	000006a2 	.word	0x000006a2
    2898:	000006a2 	.word	0x000006a2
    289c:	00000446 	.word	0x00000446
    28a0:	0000045e 	.word	0x0000045e
    28a4:	00000426 	.word	0x00000426
    28a8:	00000436 	.word	0x00000436
    28ac:	0000042e 	.word	0x0000042e
    28b0:	00000002 	.word	0x00000002
    28b4:	00000003 	.word	0x00000003
    28b8:	00000004 	.word	0x00000004
    28bc:	00000005 	.word	0x00000005
    28c0:	00000006 	.word	0x00000006
    28c4:	00000007 	.word	0x00000007
    28c8:	0000000e 	.word	0x0000000e
    28cc:	0000000f 	.word	0x0000000f
    28d0:	0000000a 	.word	0x0000000a
    28d4:	0000000b 	.word	0x0000000b
    28d8:	0000ffff 	.word	0x0000ffff
    28dc:	0000ffff 	.word	0x0000ffff
    28e0:	0000ffff 	.word	0x0000ffff
    28e4:	0000ffff 	.word	0x0000ffff
    28e8:	0000ffff 	.word	0x0000ffff
    28ec:	0000ffff 	.word	0x0000ffff
    28f0:	0000ffff 	.word	0x0000ffff
    28f4:	0000ffff 	.word	0x0000ffff
    28f8:	0000ffff 	.word	0x0000ffff
    28fc:	0000ffff 	.word	0x0000ffff
    2900:	42000800 	.word	0x42000800
    2904:	42000c00 	.word	0x42000c00
    2908:	42001000 	.word	0x42001000

0000290c <SPIDataConertConsArray>:
    290c:	eee88e88 00001e66 00001e62 00001e62     ....f...b...b...
    291c:	00001ec8 00001ec8 00001e7a 00001e6c     ........z...l...
    292c:	00001e80 00001eb6 00001f50 00001f30     ........P...0...
    293c:	00001f30 00001fbc 00001f42 00001f5e     0.......B...^...
    294c:	00001f34 00001f6c 00001fac              4...l.......

00002958 <_init>:
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    295e:	bc08      	pop	{r3}
    2960:	469e      	mov	lr, r3
    2962:	4770      	bx	lr

00002964 <__init_array_start>:
    2964:	000000b5 	.word	0x000000b5

00002968 <_fini>:
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    296e:	bc08      	pop	{r3}
    2970:	469e      	mov	lr, r3
    2972:	4770      	bx	lr

00002974 <__fini_array_start>:
    2974:	0000008d 	.word	0x0000008d
