
PlaceValueBuckets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001454  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00001454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d8  20000070  000014c4  00020070  2**2
                  ALLOC
  3 .stack        00000400  20000348  0000179c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00019063  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cf4  00000000  00000000  00039154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002d83  00000000  00000000  0003be48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003a8  00000000  00000000  0003ebcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000410  00000000  00000000  0003ef73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001473a  00000000  00000000  0003f383  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000097c7  00000000  00000000  00053abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006d50d  00000000  00000000  0005d284  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000918  00000000  00000000  000ca794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 07 00 20 cd 0e 00 00 c9 0e 00 00 c9 0e 00 00     H.. ............
	...
      2c:	c9 0e 00 00 00 00 00 00 00 00 00 00 c9 0e 00 00     ................
      3c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      4c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      5c:	00 00 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      6c:	c9 0e 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................
      7c:	c9 05 00 00 c9 0e 00 00 c9 0e 00 00 c9 0e 00 00     ................

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000070 	.word	0x20000070
      ac:	00000000 	.word	0x00000000
      b0:	00001454 	.word	0x00001454

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000074 	.word	0x20000074
      e0:	00001454 	.word	0x00001454
      e4:	00001454 	.word	0x00001454
      e8:	00000000 	.word	0x00000000

000000ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
      ee:	2000      	movs	r0, #0
      f0:	4b08      	ldr	r3, [pc, #32]	; (114 <delay_init+0x28>)
      f2:	4798      	blx	r3
      f4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
      f6:	4c08      	ldr	r4, [pc, #32]	; (118 <delay_init+0x2c>)
      f8:	21fa      	movs	r1, #250	; 0xfa
      fa:	0089      	lsls	r1, r1, #2
      fc:	47a0      	blx	r4
      fe:	4b07      	ldr	r3, [pc, #28]	; (11c <delay_init+0x30>)
     100:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     102:	4907      	ldr	r1, [pc, #28]	; (120 <delay_init+0x34>)
     104:	0028      	movs	r0, r5
     106:	47a0      	blx	r4
     108:	4b06      	ldr	r3, [pc, #24]	; (124 <delay_init+0x38>)
     10a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     10c:	2205      	movs	r2, #5
     10e:	4b06      	ldr	r3, [pc, #24]	; (128 <delay_init+0x3c>)
     110:	601a      	str	r2, [r3, #0]
}
     112:	bd70      	pop	{r4, r5, r6, pc}
     114:	00000c59 	.word	0x00000c59
     118:	0000105d 	.word	0x0000105d
     11c:	20000000 	.word	0x20000000
     120:	000f4240 	.word	0x000f4240
     124:	20000004 	.word	0x20000004
     128:	e000e010 	.word	0xe000e010

0000012c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     12c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     12e:	4b08      	ldr	r3, [pc, #32]	; (150 <delay_cycles_ms+0x24>)
     130:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     132:	4a08      	ldr	r2, [pc, #32]	; (154 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     134:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     136:	2180      	movs	r1, #128	; 0x80
     138:	0249      	lsls	r1, r1, #9
	while (n--) {
     13a:	3801      	subs	r0, #1
     13c:	d307      	bcc.n	14e <delay_cycles_ms+0x22>
	if (n > 0) {
     13e:	2c00      	cmp	r4, #0
     140:	d0fb      	beq.n	13a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     142:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     144:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     146:	6813      	ldr	r3, [r2, #0]
     148:	420b      	tst	r3, r1
     14a:	d0fc      	beq.n	146 <delay_cycles_ms+0x1a>
     14c:	e7f5      	b.n	13a <delay_cycles_ms+0xe>
	}
}
     14e:	bd30      	pop	{r4, r5, pc}
     150:	20000000 	.word	0x20000000
     154:	e000e010 	.word	0xe000e010

00000158 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     158:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     15a:	2200      	movs	r2, #0
     15c:	2300      	movs	r3, #0
     15e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     160:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     162:	2100      	movs	r1, #0
     164:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     166:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     168:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     16a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     16c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     16e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     170:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     172:	24c0      	movs	r4, #192	; 0xc0
     174:	0164      	lsls	r4, r4, #5
     176:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     178:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     17a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     17c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     17e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     180:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     182:	242a      	movs	r4, #42	; 0x2a
     184:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     186:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     188:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     18a:	3c06      	subs	r4, #6
     18c:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     18e:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     190:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     192:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     194:	232b      	movs	r3, #43	; 0x2b
     196:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     198:	3301      	adds	r3, #1
     19a:	54c1      	strb	r1, [r0, r3]
}
     19c:	bd10      	pop	{r4, pc}
	...

000001a0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a2:	46d6      	mov	lr, sl
     1a4:	464f      	mov	r7, r9
     1a6:	4646      	mov	r6, r8
     1a8:	b5c0      	push	{r6, r7, lr}
     1aa:	b096      	sub	sp, #88	; 0x58
     1ac:	0007      	movs	r7, r0
     1ae:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1b0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1b2:	4ac6      	ldr	r2, [pc, #792]	; (4cc <STACK_SIZE+0xcc>)
     1b4:	6a10      	ldr	r0, [r2, #32]
     1b6:	2380      	movs	r3, #128	; 0x80
     1b8:	005b      	lsls	r3, r3, #1
     1ba:	4303      	orrs	r3, r0
     1bc:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1be:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1c0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1c2:	07db      	lsls	r3, r3, #31
     1c4:	d505      	bpl.n	1d2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     1c6:	b016      	add	sp, #88	; 0x58
     1c8:	bc1c      	pop	{r2, r3, r4}
     1ca:	4690      	mov	r8, r2
     1cc:	4699      	mov	r9, r3
     1ce:	46a2      	mov	sl, r4
     1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     1d4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4f5      	bmi.n	1c6 <adc_init+0x26>
	module_inst->reference = config->reference;
     1da:	7873      	ldrb	r3, [r6, #1]
     1dc:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     1e2:	4abb      	ldr	r2, [pc, #748]	; (4d0 <STACK_SIZE+0xd0>)
     1e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60bb      	str	r3, [r7, #8]
     1f0:	60fb      	str	r3, [r7, #12]
     1f2:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     1f8:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     1fc:	4bb5      	ldr	r3, [pc, #724]	; (4d4 <STACK_SIZE+0xd4>)
     1fe:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     200:	232a      	movs	r3, #42	; 0x2a
     202:	5cf3      	ldrb	r3, [r6, r3]
     204:	2b00      	cmp	r3, #0
     206:	d105      	bne.n	214 <adc_init+0x74>
     208:	7d33      	ldrb	r3, [r6, #20]
     20a:	2b00      	cmp	r3, #0
     20c:	d102      	bne.n	214 <adc_init+0x74>
		module_inst->software_trigger = true;
     20e:	3301      	adds	r3, #1
     210:	777b      	strb	r3, [r7, #29]
     212:	e001      	b.n	218 <adc_init+0x78>
		module_inst->software_trigger = false;
     214:	2300      	movs	r3, #0
     216:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     218:	683b      	ldr	r3, [r7, #0]
     21a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21c:	7833      	ldrb	r3, [r6, #0]
     21e:	466a      	mov	r2, sp
     220:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     222:	4669      	mov	r1, sp
     224:	2013      	movs	r0, #19
     226:	4bac      	ldr	r3, [pc, #688]	; (4d8 <STACK_SIZE+0xd8>)
     228:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     22a:	2013      	movs	r0, #19
     22c:	4bab      	ldr	r3, [pc, #684]	; (4dc <STACK_SIZE+0xdc>)
     22e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     230:	232c      	movs	r3, #44	; 0x2c
     232:	5cf2      	ldrb	r2, [r6, r3]
     234:	2a00      	cmp	r2, #0
     236:	d054      	beq.n	2e2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     238:	3b01      	subs	r3, #1
     23a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     23c:	7b33      	ldrb	r3, [r6, #12]
     23e:	18eb      	adds	r3, r5, r3
     240:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     242:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     244:	b2c9      	uxtb	r1, r1
     246:	428b      	cmp	r3, r1
     248:	d221      	bcs.n	28e <adc_init+0xee>
     24a:	1952      	adds	r2, r2, r5
     24c:	b2d3      	uxtb	r3, r2
     24e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     250:	4ba3      	ldr	r3, [pc, #652]	; (4e0 <STACK_SIZE+0xe0>)
     252:	469a      	mov	sl, r3
     254:	e003      	b.n	25e <adc_init+0xbe>
			offset++;
     256:	3501      	adds	r5, #1
     258:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     25a:	454d      	cmp	r5, r9
     25c:	d017      	beq.n	28e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     25e:	240f      	movs	r4, #15
     260:	402c      	ands	r4, r5
     262:	7b33      	ldrb	r3, [r6, #12]
     264:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     266:	2250      	movs	r2, #80	; 0x50
     268:	499e      	ldr	r1, [pc, #632]	; (4e4 <STACK_SIZE+0xe4>)
     26a:	a802      	add	r0, sp, #8
     26c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     26e:	2c09      	cmp	r4, #9
     270:	d8f1      	bhi.n	256 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     272:	00a4      	lsls	r4, r4, #2
     274:	ab02      	add	r3, sp, #8
     276:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     278:	a901      	add	r1, sp, #4
     27a:	2300      	movs	r3, #0
     27c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     27e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     280:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     282:	3301      	adds	r3, #1
     284:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     286:	b2c0      	uxtb	r0, r0
     288:	4b97      	ldr	r3, [pc, #604]	; (4e8 <STACK_SIZE+0xe8>)
     28a:	4798      	blx	r3
     28c:	e7e3      	b.n	256 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     28e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     290:	2250      	movs	r2, #80	; 0x50
     292:	4994      	ldr	r1, [pc, #592]	; (4e4 <STACK_SIZE+0xe4>)
     294:	a802      	add	r0, sp, #8
     296:	4b92      	ldr	r3, [pc, #584]	; (4e0 <STACK_SIZE+0xe0>)
     298:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29a:	2c09      	cmp	r4, #9
     29c:	d913      	bls.n	2c6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     29e:	7d73      	ldrb	r3, [r6, #21]
     2a0:	009b      	lsls	r3, r3, #2
     2a2:	b2db      	uxtb	r3, r3
     2a4:	4642      	mov	r2, r8
     2a6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2a8:	7db3      	ldrb	r3, [r6, #22]
     2aa:	01db      	lsls	r3, r3, #7
     2ac:	7872      	ldrb	r2, [r6, #1]
     2ae:	4313      	orrs	r3, r2
     2b0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2b2:	4642      	mov	r2, r8
     2b4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2b6:	7933      	ldrb	r3, [r6, #4]
     2b8:	2b34      	cmp	r3, #52	; 0x34
     2ba:	d900      	bls.n	2be <adc_init+0x11e>
     2bc:	e17b      	b.n	5b6 <STACK_SIZE+0x1b6>
     2be:	009b      	lsls	r3, r3, #2
     2c0:	4a8a      	ldr	r2, [pc, #552]	; (4ec <STACK_SIZE+0xec>)
     2c2:	58d3      	ldr	r3, [r2, r3]
     2c4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2c6:	00a4      	lsls	r4, r4, #2
     2c8:	ab02      	add	r3, sp, #8
     2ca:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2300      	movs	r3, #0
     2d0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     2d2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2d4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2d6:	3301      	adds	r3, #1
     2d8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2da:	b2c0      	uxtb	r0, r0
     2dc:	4b82      	ldr	r3, [pc, #520]	; (4e8 <STACK_SIZE+0xe8>)
     2de:	4798      	blx	r3
     2e0:	e7dd      	b.n	29e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     2e2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     2e4:	2250      	movs	r2, #80	; 0x50
     2e6:	497f      	ldr	r1, [pc, #508]	; (4e4 <STACK_SIZE+0xe4>)
     2e8:	a802      	add	r0, sp, #8
     2ea:	4b7d      	ldr	r3, [pc, #500]	; (4e0 <STACK_SIZE+0xe0>)
     2ec:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2ee:	2c09      	cmp	r4, #9
     2f0:	d915      	bls.n	31e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     2f2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2f4:	2250      	movs	r2, #80	; 0x50
     2f6:	497b      	ldr	r1, [pc, #492]	; (4e4 <STACK_SIZE+0xe4>)
     2f8:	a802      	add	r0, sp, #8
     2fa:	4b79      	ldr	r3, [pc, #484]	; (4e0 <STACK_SIZE+0xe0>)
     2fc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2fe:	2c09      	cmp	r4, #9
     300:	d8cd      	bhi.n	29e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     302:	00a4      	lsls	r4, r4, #2
     304:	ab02      	add	r3, sp, #8
     306:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     308:	a901      	add	r1, sp, #4
     30a:	2300      	movs	r3, #0
     30c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     30e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     310:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     312:	3301      	adds	r3, #1
     314:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     316:	b2c0      	uxtb	r0, r0
     318:	4b73      	ldr	r3, [pc, #460]	; (4e8 <STACK_SIZE+0xe8>)
     31a:	4798      	blx	r3
     31c:	e7bf      	b.n	29e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31e:	00a4      	lsls	r4, r4, #2
     320:	ab02      	add	r3, sp, #8
     322:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     324:	a901      	add	r1, sp, #4
     326:	2300      	movs	r3, #0
     328:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     32a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     32c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     32e:	3301      	adds	r3, #1
     330:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     332:	b2c0      	uxtb	r0, r0
     334:	4b6c      	ldr	r3, [pc, #432]	; (4e8 <STACK_SIZE+0xe8>)
     336:	4798      	blx	r3
     338:	e7db      	b.n	2f2 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     33a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     33c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     33e:	2102      	movs	r1, #2
     340:	e01a      	b.n	378 <adc_init+0x1d8>
		adjres = config->divide_result;
     342:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     344:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     346:	2410      	movs	r4, #16
     348:	e016      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     34a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     34c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     34e:	2101      	movs	r1, #1
     350:	e012      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     352:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     354:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     356:	2100      	movs	r1, #0
     358:	e00e      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     35a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     35c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     35e:	2100      	movs	r1, #0
     360:	e00a      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     362:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     364:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     366:	2100      	movs	r1, #0
     368:	e006      	b.n	378 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     36a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     36c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     36e:	2100      	movs	r1, #0
     370:	e002      	b.n	378 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     372:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     374:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     376:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     378:	0109      	lsls	r1, r1, #4
     37a:	2270      	movs	r2, #112	; 0x70
     37c:	400a      	ands	r2, r1
     37e:	4313      	orrs	r3, r2
     380:	4642      	mov	r2, r8
     382:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     384:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     386:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     388:	2b3f      	cmp	r3, #63	; 0x3f
     38a:	d900      	bls.n	38e <adc_init+0x1ee>
     38c:	e71b      	b.n	1c6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     38e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     390:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     392:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     394:	b25b      	sxtb	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	dbfb      	blt.n	392 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     39a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     39c:	8872      	ldrh	r2, [r6, #2]
     39e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3a0:	2224      	movs	r2, #36	; 0x24
     3a2:	5cb2      	ldrb	r2, [r6, r2]
     3a4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3a6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3a8:	7d32      	ldrb	r2, [r6, #20]
     3aa:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ac:	4313      	orrs	r3, r2
     3ae:	7cb2      	ldrb	r2, [r6, #18]
     3b0:	0052      	lsls	r2, r2, #1
     3b2:	4313      	orrs	r3, r2
     3b4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3b6:	4642      	mov	r2, r8
     3b8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ba:	7e33      	ldrb	r3, [r6, #24]
     3bc:	2b00      	cmp	r3, #0
     3be:	d020      	beq.n	402 <STACK_SIZE+0x2>
		switch (resolution) {
     3c0:	2c10      	cmp	r4, #16
     3c2:	d100      	bne.n	3c6 <adc_init+0x226>
     3c4:	e0d9      	b.n	57a <STACK_SIZE+0x17a>
     3c6:	d800      	bhi.n	3ca <adc_init+0x22a>
     3c8:	e098      	b.n	4fc <STACK_SIZE+0xfc>
     3ca:	2c20      	cmp	r4, #32
     3cc:	d100      	bne.n	3d0 <adc_init+0x230>
     3ce:	e0b6      	b.n	53e <STACK_SIZE+0x13e>
     3d0:	2c30      	cmp	r4, #48	; 0x30
     3d2:	d116      	bne.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     3d4:	7cf2      	ldrb	r2, [r6, #19]
     3d6:	2a00      	cmp	r2, #0
     3d8:	d00a      	beq.n	3f0 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     3da:	69f2      	ldr	r2, [r6, #28]
     3dc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     3de:	2017      	movs	r0, #23
			if (config->differential_mode &&
     3e0:	2aff      	cmp	r2, #255	; 0xff
     3e2:	d900      	bls.n	3e6 <adc_init+0x246>
     3e4:	e6ef      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     3e6:	6a32      	ldr	r2, [r6, #32]
     3e8:	3280      	adds	r2, #128	; 0x80
     3ea:	2aff      	cmp	r2, #255	; 0xff
     3ec:	d900      	bls.n	3f0 <adc_init+0x250>
     3ee:	e6ea      	b.n	1c6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     3f0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     3f2:	69f2      	ldr	r2, [r6, #28]
     3f4:	2aff      	cmp	r2, #255	; 0xff
     3f6:	dd00      	ble.n	3fa <adc_init+0x25a>
     3f8:	e6e5      	b.n	1c6 <adc_init+0x26>
     3fa:	6a32      	ldr	r2, [r6, #32]
     3fc:	2aff      	cmp	r2, #255	; 0xff
     3fe:	dd00      	ble.n	402 <STACK_SIZE+0x2>
     400:	e6e1      	b.n	1c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     402:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     404:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     406:	b252      	sxtb	r2, r2
     408:	2a00      	cmp	r2, #0
     40a:	dbfb      	blt.n	404 <STACK_SIZE+0x4>
	adc_module->WINCTRL.reg = config->window.window_mode;
     40c:	4642      	mov	r2, r8
     40e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     410:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     412:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     414:	b25b      	sxtb	r3, r3
     416:	2b00      	cmp	r3, #0
     418:	dbfb      	blt.n	412 <STACK_SIZE+0x12>
	adc_module->WINLT.reg =
     41a:	8bb3      	ldrh	r3, [r6, #28]
     41c:	4642      	mov	r2, r8
     41e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     420:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     422:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     424:	b25b      	sxtb	r3, r3
     426:	2b00      	cmp	r3, #0
     428:	dbfb      	blt.n	422 <STACK_SIZE+0x22>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     42a:	8c33      	ldrh	r3, [r6, #32]
     42c:	4642      	mov	r2, r8
     42e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     430:	232c      	movs	r3, #44	; 0x2c
     432:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     434:	2b00      	cmp	r3, #0
     436:	d005      	beq.n	444 <STACK_SIZE+0x44>
		inputs_to_scan--;
     438:	3b01      	subs	r3, #1
     43a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     43c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     43e:	2b0f      	cmp	r3, #15
     440:	d900      	bls.n	444 <STACK_SIZE+0x44>
     442:	e6c0      	b.n	1c6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     444:	222b      	movs	r2, #43	; 0x2b
     446:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     448:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     44a:	290f      	cmp	r1, #15
     44c:	d900      	bls.n	450 <STACK_SIZE+0x50>
     44e:	e6ba      	b.n	1c6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     450:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     452:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     454:	b252      	sxtb	r2, r2
     456:	2a00      	cmp	r2, #0
     458:	dbfb      	blt.n	452 <STACK_SIZE+0x52>
			config->negative_input |
     45a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     45c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     45e:	4302      	orrs	r2, r0
     460:	68b0      	ldr	r0, [r6, #8]
     462:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     464:	0509      	lsls	r1, r1, #20
			config->negative_input |
     466:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     468:	041b      	lsls	r3, r3, #16
			config->negative_input |
     46a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     46c:	4642      	mov	r2, r8
     46e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     470:	232a      	movs	r3, #42	; 0x2a
     472:	5cf3      	ldrb	r3, [r6, r3]
     474:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     476:	230f      	movs	r3, #15
     478:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     47a:	3315      	adds	r3, #21
     47c:	5cf3      	ldrb	r3, [r6, r3]
     47e:	2b00      	cmp	r3, #0
     480:	d012      	beq.n	4a8 <STACK_SIZE+0xa8>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     482:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     484:	4a1a      	ldr	r2, [pc, #104]	; (4f0 <STACK_SIZE+0xf0>)
			return STATUS_ERR_INVALID_ARG;
     486:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     488:	4293      	cmp	r3, r2
     48a:	d900      	bls.n	48e <STACK_SIZE+0x8e>
     48c:	e69b      	b.n	1c6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     48e:	4642      	mov	r2, r8
     490:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     492:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     494:	2380      	movs	r3, #128	; 0x80
     496:	011b      	lsls	r3, r3, #4
     498:	18d3      	adds	r3, r2, r3
     49a:	4915      	ldr	r1, [pc, #84]	; (4f0 <STACK_SIZE+0xf0>)
     49c:	b29b      	uxth	r3, r3
     49e:	428b      	cmp	r3, r1
     4a0:	d900      	bls.n	4a4 <STACK_SIZE+0xa4>
     4a2:	e690      	b.n	1c6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4a4:	4643      	mov	r3, r8
     4a6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4a8:	4b12      	ldr	r3, [pc, #72]	; (4f4 <STACK_SIZE+0xf4>)
     4aa:	681b      	ldr	r3, [r3, #0]
     4ac:	015b      	lsls	r3, r3, #5
     4ae:	22e0      	movs	r2, #224	; 0xe0
     4b0:	00d2      	lsls	r2, r2, #3
     4b2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4b4:	4a10      	ldr	r2, [pc, #64]	; (4f8 <STACK_SIZE+0xf8>)
     4b6:	6851      	ldr	r1, [r2, #4]
     4b8:	0149      	lsls	r1, r1, #5
     4ba:	6812      	ldr	r2, [r2, #0]
     4bc:	0ed2      	lsrs	r2, r2, #27
     4be:	430a      	orrs	r2, r1
     4c0:	b2d2      	uxtb	r2, r2
			) |
     4c2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4c4:	4642      	mov	r2, r8
     4c6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     4c8:	2000      	movs	r0, #0
     4ca:	e67c      	b.n	1c6 <adc_init+0x26>
     4cc:	40000400 	.word	0x40000400
     4d0:	40000800 	.word	0x40000800
     4d4:	200000c0 	.word	0x200000c0
     4d8:	00000d71 	.word	0x00000d71
     4dc:	00000ce5 	.word	0x00000ce5
     4e0:	000011d1 	.word	0x000011d1
     4e4:	0000139c 	.word	0x0000139c
     4e8:	00000e69 	.word	0x00000e69
     4ec:	000012c8 	.word	0x000012c8
     4f0:	00000fff 	.word	0x00000fff
     4f4:	00806024 	.word	0x00806024
     4f8:	00806020 	.word	0x00806020
		switch (resolution) {
     4fc:	2c00      	cmp	r4, #0
     4fe:	d000      	beq.n	502 <STACK_SIZE+0x102>
     500:	e77f      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     502:	7cf2      	ldrb	r2, [r6, #19]
     504:	2a00      	cmp	r2, #0
     506:	d00f      	beq.n	528 <STACK_SIZE+0x128>
					(config->window.window_lower_value > 2047 ||
     508:	69f2      	ldr	r2, [r6, #28]
     50a:	2180      	movs	r1, #128	; 0x80
     50c:	0109      	lsls	r1, r1, #4
     50e:	468c      	mov	ip, r1
     510:	4462      	add	r2, ip
			if (config->differential_mode &&
     512:	492a      	ldr	r1, [pc, #168]	; (5bc <STACK_SIZE+0x1bc>)
				return STATUS_ERR_INVALID_ARG;
     514:	2017      	movs	r0, #23
			if (config->differential_mode &&
     516:	428a      	cmp	r2, r1
     518:	d900      	bls.n	51c <STACK_SIZE+0x11c>
     51a:	e654      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     51c:	6a32      	ldr	r2, [r6, #32]
     51e:	4462      	add	r2, ip
     520:	4926      	ldr	r1, [pc, #152]	; (5bc <STACK_SIZE+0x1bc>)
     522:	428a      	cmp	r2, r1
     524:	d900      	bls.n	528 <STACK_SIZE+0x128>
     526:	e64e      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     528:	4a24      	ldr	r2, [pc, #144]	; (5bc <STACK_SIZE+0x1bc>)
				return STATUS_ERR_INVALID_ARG;
     52a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     52c:	69f1      	ldr	r1, [r6, #28]
     52e:	4291      	cmp	r1, r2
     530:	dd00      	ble.n	534 <STACK_SIZE+0x134>
     532:	e648      	b.n	1c6 <adc_init+0x26>
     534:	6a31      	ldr	r1, [r6, #32]
     536:	4291      	cmp	r1, r2
     538:	dd00      	ble.n	53c <STACK_SIZE+0x13c>
     53a:	e644      	b.n	1c6 <adc_init+0x26>
     53c:	e761      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     53e:	7cf2      	ldrb	r2, [r6, #19]
     540:	2a00      	cmp	r2, #0
     542:	d00f      	beq.n	564 <STACK_SIZE+0x164>
					(config->window.window_lower_value > 511 ||
     544:	69f2      	ldr	r2, [r6, #28]
     546:	2180      	movs	r1, #128	; 0x80
     548:	0089      	lsls	r1, r1, #2
     54a:	468c      	mov	ip, r1
     54c:	4462      	add	r2, ip
			if (config->differential_mode &&
     54e:	491c      	ldr	r1, [pc, #112]	; (5c0 <STACK_SIZE+0x1c0>)
				return STATUS_ERR_INVALID_ARG;
     550:	2017      	movs	r0, #23
			if (config->differential_mode &&
     552:	428a      	cmp	r2, r1
     554:	d900      	bls.n	558 <STACK_SIZE+0x158>
     556:	e636      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     558:	6a32      	ldr	r2, [r6, #32]
     55a:	4462      	add	r2, ip
     55c:	4918      	ldr	r1, [pc, #96]	; (5c0 <STACK_SIZE+0x1c0>)
     55e:	428a      	cmp	r2, r1
     560:	d900      	bls.n	564 <STACK_SIZE+0x164>
     562:	e630      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     564:	4a16      	ldr	r2, [pc, #88]	; (5c0 <STACK_SIZE+0x1c0>)
				return STATUS_ERR_INVALID_ARG;
     566:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     568:	69f1      	ldr	r1, [r6, #28]
     56a:	4291      	cmp	r1, r2
     56c:	dd00      	ble.n	570 <STACK_SIZE+0x170>
     56e:	e62a      	b.n	1c6 <adc_init+0x26>
     570:	6a31      	ldr	r1, [r6, #32]
     572:	4291      	cmp	r1, r2
     574:	dd00      	ble.n	578 <STACK_SIZE+0x178>
     576:	e626      	b.n	1c6 <adc_init+0x26>
     578:	e743      	b.n	402 <STACK_SIZE+0x2>
			if (config->differential_mode &&
     57a:	7cf2      	ldrb	r2, [r6, #19]
     57c:	2a00      	cmp	r2, #0
     57e:	d00f      	beq.n	5a0 <STACK_SIZE+0x1a0>
					(config->window.window_lower_value > 32767 ||
     580:	69f2      	ldr	r2, [r6, #28]
     582:	2180      	movs	r1, #128	; 0x80
     584:	0209      	lsls	r1, r1, #8
     586:	468c      	mov	ip, r1
     588:	4462      	add	r2, ip
			if (config->differential_mode &&
     58a:	490e      	ldr	r1, [pc, #56]	; (5c4 <STACK_SIZE+0x1c4>)
				return STATUS_ERR_INVALID_ARG;
     58c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     58e:	428a      	cmp	r2, r1
     590:	d900      	bls.n	594 <STACK_SIZE+0x194>
     592:	e618      	b.n	1c6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     594:	6a32      	ldr	r2, [r6, #32]
     596:	4462      	add	r2, ip
     598:	490a      	ldr	r1, [pc, #40]	; (5c4 <STACK_SIZE+0x1c4>)
     59a:	428a      	cmp	r2, r1
     59c:	d900      	bls.n	5a0 <STACK_SIZE+0x1a0>
     59e:	e612      	b.n	1c6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5a0:	4a08      	ldr	r2, [pc, #32]	; (5c4 <STACK_SIZE+0x1c4>)
				return STATUS_ERR_INVALID_ARG;
     5a2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5a4:	69f1      	ldr	r1, [r6, #28]
     5a6:	4291      	cmp	r1, r2
     5a8:	dd00      	ble.n	5ac <STACK_SIZE+0x1ac>
     5aa:	e60c      	b.n	1c6 <adc_init+0x26>
     5ac:	6a31      	ldr	r1, [r6, #32]
     5ae:	4291      	cmp	r1, r2
     5b0:	dd00      	ble.n	5b4 <STACK_SIZE+0x1b4>
     5b2:	e608      	b.n	1c6 <adc_init+0x26>
     5b4:	e725      	b.n	402 <STACK_SIZE+0x2>
		return STATUS_ERR_INVALID_ARG;
     5b6:	2017      	movs	r0, #23
     5b8:	e605      	b.n	1c6 <adc_init+0x26>
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000fff 	.word	0x00000fff
     5c0:	000003ff 	.word	0x000003ff
     5c4:	0000ffff 	.word	0x0000ffff

000005c8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     5c8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     5ca:	4b2f      	ldr	r3, [pc, #188]	; (688 <ADC_Handler+0xc0>)
     5cc:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     5ce:	682b      	ldr	r3, [r5, #0]
     5d0:	7e1a      	ldrb	r2, [r3, #24]
     5d2:	7ddc      	ldrb	r4, [r3, #23]
     5d4:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     5d6:	07e2      	lsls	r2, r4, #31
     5d8:	d416      	bmi.n	608 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     5da:	0763      	lsls	r3, r4, #29
     5dc:	d508      	bpl.n	5f0 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     5de:	2304      	movs	r3, #4
     5e0:	682a      	ldr	r2, [r5, #0]
     5e2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5e4:	7eeb      	ldrb	r3, [r5, #27]
     5e6:	079b      	lsls	r3, r3, #30
     5e8:	d502      	bpl.n	5f0 <ADC_Handler+0x28>
     5ea:	7eab      	ldrb	r3, [r5, #26]
     5ec:	079b      	lsls	r3, r3, #30
     5ee:	d442      	bmi.n	676 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5f0:	07a3      	lsls	r3, r4, #30
     5f2:	d508      	bpl.n	606 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5f4:	2302      	movs	r3, #2
     5f6:	682a      	ldr	r2, [r5, #0]
     5f8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5fa:	7eeb      	ldrb	r3, [r5, #27]
     5fc:	075b      	lsls	r3, r3, #29
     5fe:	d502      	bpl.n	606 <ADC_Handler+0x3e>
     600:	7eab      	ldrb	r3, [r5, #26]
     602:	075b      	lsls	r3, r3, #29
     604:	d43b      	bmi.n	67e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     606:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     608:	2201      	movs	r2, #1
     60a:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     60c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     60e:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     610:	b25b      	sxtb	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	dbfb      	blt.n	60e <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     616:	6969      	ldr	r1, [r5, #20]
     618:	1c8b      	adds	r3, r1, #2
     61a:	616b      	str	r3, [r5, #20]
     61c:	8b53      	ldrh	r3, [r2, #26]
     61e:	b29b      	uxth	r3, r3
     620:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     622:	8b2b      	ldrh	r3, [r5, #24]
     624:	3b01      	subs	r3, #1
     626:	b29b      	uxth	r3, r3
     628:	832b      	strh	r3, [r5, #24]
     62a:	2b00      	cmp	r3, #0
     62c:	d011      	beq.n	652 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     62e:	7f6b      	ldrb	r3, [r5, #29]
     630:	2b00      	cmp	r3, #0
     632:	d0d2      	beq.n	5da <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     634:	682a      	ldr	r2, [r5, #0]
     636:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     638:	b25b      	sxtb	r3, r3
     63a:	2b00      	cmp	r3, #0
     63c:	dbfb      	blt.n	636 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     63e:	7b13      	ldrb	r3, [r2, #12]
     640:	2102      	movs	r1, #2
     642:	430b      	orrs	r3, r1
     644:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     646:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     648:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     64a:	b25b      	sxtb	r3, r3
     64c:	2b00      	cmp	r3, #0
     64e:	dbfb      	blt.n	648 <ADC_Handler+0x80>
     650:	e7c3      	b.n	5da <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     652:	2301      	movs	r3, #1
     654:	682a      	ldr	r2, [r5, #0]
     656:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     658:	7f2b      	ldrb	r3, [r5, #28]
     65a:	2b05      	cmp	r3, #5
     65c:	d1bd      	bne.n	5da <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     65e:	2300      	movs	r3, #0
     660:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     662:	7eeb      	ldrb	r3, [r5, #27]
     664:	07db      	lsls	r3, r3, #31
     666:	d5b8      	bpl.n	5da <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     668:	7eab      	ldrb	r3, [r5, #26]
     66a:	07db      	lsls	r3, r3, #31
     66c:	d5b5      	bpl.n	5da <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     66e:	0028      	movs	r0, r5
     670:	68ab      	ldr	r3, [r5, #8]
     672:	4798      	blx	r3
     674:	e7b1      	b.n	5da <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     676:	0028      	movs	r0, r5
     678:	68eb      	ldr	r3, [r5, #12]
     67a:	4798      	blx	r3
     67c:	e7b8      	b.n	5f0 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     67e:	692b      	ldr	r3, [r5, #16]
     680:	0028      	movs	r0, r5
     682:	4798      	blx	r3
}
     684:	e7bf      	b.n	606 <ADC_Handler+0x3e>
     686:	46c0      	nop			; (mov r8, r8)
     688:	200000c0 	.word	0x200000c0

0000068c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     68c:	b500      	push	{lr}
     68e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     690:	ab01      	add	r3, sp, #4
     692:	2280      	movs	r2, #128	; 0x80
     694:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     696:	780a      	ldrb	r2, [r1, #0]
     698:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     69a:	784a      	ldrb	r2, [r1, #1]
     69c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     69e:	788a      	ldrb	r2, [r1, #2]
     6a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6a2:	0019      	movs	r1, r3
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <port_pin_set_config+0x20>)
     6a6:	4798      	blx	r3
}
     6a8:	b003      	add	sp, #12
     6aa:	bd00      	pop	{pc}
     6ac:	00000e69 	.word	0x00000e69

000006b0 <configure_adc>:

struct adc_module adc_instance;
uint16_t* adc_result = NULL;

void configure_adc()
{
     6b0:	b510      	push	{r4, lr}
     6b2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
     6b4:	4668      	mov	r0, sp
     6b6:	4b1a      	ldr	r3, [pc, #104]	; (720 <configure_adc+0x70>)
     6b8:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
     6ba:	2002      	movs	r0, #2
     6bc:	4b19      	ldr	r3, [pc, #100]	; (724 <configure_adc+0x74>)
     6be:	4798      	blx	r3
     6c0:	4b19      	ldr	r3, [pc, #100]	; (728 <configure_adc+0x78>)
     6c2:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
     6c4:	2301      	movs	r3, #1
     6c6:	466a      	mov	r2, sp
     6c8:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CTRLB_PRESCALER_DIV16;
     6ca:	2280      	movs	r2, #128	; 0x80
     6cc:	0092      	lsls	r2, r2, #2
     6ce:	4669      	mov	r1, sp
     6d0:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
     6d2:	3afb      	subs	r2, #251	; 0xfb
     6d4:	3aff      	subs	r2, #255	; 0xff
     6d6:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
     6d8:	22c0      	movs	r2, #192	; 0xc0
     6da:	0152      	lsls	r2, r2, #5
     6dc:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
     6de:	2230      	movs	r2, #48	; 0x30
     6e0:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
     6e2:	466a      	mov	r2, sp
     6e4:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
     6e6:	4c11      	ldr	r4, [pc, #68]	; (72c <configure_adc+0x7c>)
     6e8:	4911      	ldr	r1, [pc, #68]	; (730 <configure_adc+0x80>)
     6ea:	0020      	movs	r0, r4
     6ec:	4b11      	ldr	r3, [pc, #68]	; (734 <configure_adc+0x84>)
     6ee:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
     6f0:	6822      	ldr	r2, [r4, #0]
     6f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     6f4:	b25b      	sxtb	r3, r3
     6f6:	2b00      	cmp	r3, #0
     6f8:	dbfb      	blt.n	6f2 <configure_adc+0x42>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6fa:	2180      	movs	r1, #128	; 0x80
     6fc:	0209      	lsls	r1, r1, #8
     6fe:	4b0e      	ldr	r3, [pc, #56]	; (738 <configure_adc+0x88>)
     700:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     702:	230f      	movs	r3, #15
     704:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     706:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     708:	7813      	ldrb	r3, [r2, #0]
     70a:	2102      	movs	r1, #2
     70c:	430b      	orrs	r3, r1
     70e:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     710:	4b06      	ldr	r3, [pc, #24]	; (72c <configure_adc+0x7c>)
     712:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     714:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     716:	b25b      	sxtb	r3, r3
     718:	2b00      	cmp	r3, #0
     71a:	dbfb      	blt.n	714 <configure_adc+0x64>
	adc_enable(&adc_instance);
}
     71c:	b00c      	add	sp, #48	; 0x30
     71e:	bd10      	pop	{r4, pc}
     720:	00000159 	.word	0x00000159
     724:	000011bd 	.word	0x000011bd
     728:	2000008c 	.word	0x2000008c
     72c:	200000c4 	.word	0x200000c4
     730:	42002000 	.word	0x42002000
     734:	000001a1 	.word	0x000001a1
     738:	e000e100 	.word	0xe000e100

0000073c <configure_mux_select>:

void configure_mux_select() {
     73c:	b530      	push	{r4, r5, lr}
     73e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     740:	ac01      	add	r4, sp, #4
     742:	2301      	movs	r3, #1
     744:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     746:	2200      	movs	r2, #0
     748:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     74a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MUX_S0, &config_port_pin);
     74c:	0021      	movs	r1, r4
     74e:	200f      	movs	r0, #15
     750:	4d04      	ldr	r5, [pc, #16]	; (764 <configure_mux_select+0x28>)
     752:	47a8      	blx	r5
	port_pin_set_config(MUX_S1, &config_port_pin);
     754:	0021      	movs	r1, r4
     756:	2010      	movs	r0, #16
     758:	47a8      	blx	r5
	port_pin_set_config(MUX_S2, &config_port_pin);
     75a:	0021      	movs	r1, r4
     75c:	2011      	movs	r0, #17
     75e:	47a8      	blx	r5
}
     760:	b003      	add	sp, #12
     762:	bd30      	pop	{r4, r5, pc}
     764:	0000068d 	.word	0x0000068d

00000768 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
     768:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
     76a:	4b2d      	ldr	r3, [pc, #180]	; (820 <adc_start_read_result+0xb8>)
     76c:	6819      	ldr	r1, [r3, #0]
     76e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     770:	b25b      	sxtb	r3, r3
     772:	2b00      	cmp	r3, #0
     774:	dbfb      	blt.n	76e <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
     776:	690b      	ldr	r3, [r1, #16]
     778:	221f      	movs	r2, #31
     77a:	4393      	bics	r3, r2
     77c:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
     77e:	6108      	str	r0, [r1, #16]
     780:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     782:	b25b      	sxtb	r3, r3
     784:	2b00      	cmp	r3, #0
     786:	dbfb      	blt.n	780 <adc_start_read_result+0x18>
     788:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     78a:	b25b      	sxtb	r3, r3
     78c:	2b00      	cmp	r3, #0
     78e:	dbfb      	blt.n	788 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     790:	7b0b      	ldrb	r3, [r1, #12]
     792:	2202      	movs	r2, #2
     794:	4313      	orrs	r3, r2
     796:	730b      	strb	r3, [r1, #12]
     798:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     79a:	b25b      	sxtb	r3, r3
     79c:	2b00      	cmp	r3, #0
     79e:	dbfb      	blt.n	798 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
     7a0:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     7a2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
     7a4:	2402      	movs	r4, #2
     7a6:	e001      	b.n	7ac <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
     7a8:	4210      	tst	r0, r2
     7aa:	d10a      	bne.n	7c2 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     7ac:	7e0b      	ldrb	r3, [r1, #24]
     7ae:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     7b0:	0002      	movs	r2, r0
     7b2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     7b4:	421d      	tst	r5, r3
     7b6:	d000      	beq.n	7ba <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
     7b8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     7ba:	421c      	tst	r4, r3
     7bc:	d0f4      	beq.n	7a8 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
     7be:	432a      	orrs	r2, r5
     7c0:	e7f2      	b.n	7a8 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     7c2:	7e0a      	ldrb	r2, [r1, #24]
     7c4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     7c6:	2301      	movs	r3, #1
     7c8:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     7ca:	0750      	lsls	r0, r2, #29
     7cc:	d501      	bpl.n	7d2 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
     7ce:	2002      	movs	r0, #2
     7d0:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     7d2:	0792      	lsls	r2, r2, #30
     7d4:	d501      	bpl.n	7da <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
     7d6:	2204      	movs	r2, #4
     7d8:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     7da:	07db      	lsls	r3, r3, #31
     7dc:	d403      	bmi.n	7e6 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
     7de:	4b11      	ldr	r3, [pc, #68]	; (824 <adc_start_read_result+0xbc>)
     7e0:	681b      	ldr	r3, [r3, #0]
	return temp;
     7e2:	8818      	ldrh	r0, [r3, #0]
}
     7e4:	bd30      	pop	{r4, r5, pc}
     7e6:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     7e8:	b25b      	sxtb	r3, r3
     7ea:	2b00      	cmp	r3, #0
     7ec:	dbfb      	blt.n	7e6 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
     7ee:	4b0d      	ldr	r3, [pc, #52]	; (824 <adc_start_read_result+0xbc>)
     7f0:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
     7f2:	8b4a      	ldrh	r2, [r1, #26]
     7f4:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
     7f6:	4b0a      	ldr	r3, [pc, #40]	; (820 <adc_start_read_result+0xb8>)
     7f8:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     7fa:	2301      	movs	r3, #1
     7fc:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     7fe:	7e0a      	ldrb	r2, [r1, #24]
     800:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     802:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     804:	0750      	lsls	r0, r2, #29
     806:	d501      	bpl.n	80c <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
     808:	2002      	movs	r0, #2
     80a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     80c:	0792      	lsls	r2, r2, #30
     80e:	d501      	bpl.n	814 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
     810:	2204      	movs	r2, #4
     812:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     814:	075b      	lsls	r3, r3, #29
     816:	d5e2      	bpl.n	7de <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
     818:	2302      	movs	r3, #2
     81a:	760b      	strb	r3, [r1, #24]
     81c:	e7df      	b.n	7de <adc_start_read_result+0x76>
     81e:	46c0      	nop			; (mov r8, r8)
     820:	200000c4 	.word	0x200000c4
     824:	2000008c 	.word	0x2000008c

00000828 <ir_sensor_init>:

void ir_sensor_init()
{
     828:	b510      	push	{r4, lr}
	configure_adc();
     82a:	4b02      	ldr	r3, [pc, #8]	; (834 <ir_sensor_init+0xc>)
     82c:	4798      	blx	r3
	configure_mux_select();
     82e:	4b02      	ldr	r3, [pc, #8]	; (838 <ir_sensor_init+0x10>)
     830:	4798      	blx	r3
}
     832:	bd10      	pop	{r4, pc}
     834:	000006b1 	.word	0x000006b1
     838:	0000073d 	.word	0x0000073d

0000083c <select_mux>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     83c:	2a00      	cmp	r2, #0
     83e:	d010      	beq.n	862 <select_mux+0x26>
		port_base->OUTSET.reg = pin_mask;
     840:	2280      	movs	r2, #128	; 0x80
     842:	0212      	lsls	r2, r2, #8
     844:	4b0e      	ldr	r3, [pc, #56]	; (880 <select_mux+0x44>)
     846:	619a      	str	r2, [r3, #24]
	if (level) {
     848:	2900      	cmp	r1, #0
     84a:	d00f      	beq.n	86c <select_mux+0x30>
		port_base->OUTSET.reg = pin_mask;
     84c:	2280      	movs	r2, #128	; 0x80
     84e:	0252      	lsls	r2, r2, #9
     850:	4b0b      	ldr	r3, [pc, #44]	; (880 <select_mux+0x44>)
     852:	619a      	str	r2, [r3, #24]
	if (level) {
     854:	2800      	cmp	r0, #0
     856:	d10e      	bne.n	876 <select_mux+0x3a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     858:	2280      	movs	r2, #128	; 0x80
     85a:	0292      	lsls	r2, r2, #10
     85c:	4b08      	ldr	r3, [pc, #32]	; (880 <select_mux+0x44>)
     85e:	615a      	str	r2, [r3, #20]

void select_mux(const bool S2, const bool S1, const bool S0) {
	port_pin_set_output_level(MUX_S0, S0);
	port_pin_set_output_level(MUX_S1, S1);
	port_pin_set_output_level(MUX_S2, S2);
}
     860:	4770      	bx	lr
     862:	2280      	movs	r2, #128	; 0x80
     864:	0212      	lsls	r2, r2, #8
     866:	4b06      	ldr	r3, [pc, #24]	; (880 <select_mux+0x44>)
     868:	615a      	str	r2, [r3, #20]
     86a:	e7ed      	b.n	848 <select_mux+0xc>
     86c:	2280      	movs	r2, #128	; 0x80
     86e:	0252      	lsls	r2, r2, #9
     870:	4b03      	ldr	r3, [pc, #12]	; (880 <select_mux+0x44>)
     872:	615a      	str	r2, [r3, #20]
     874:	e7ee      	b.n	854 <select_mux+0x18>
		port_base->OUTSET.reg = pin_mask;
     876:	2280      	movs	r2, #128	; 0x80
     878:	0292      	lsls	r2, r2, #10
     87a:	4b01      	ldr	r3, [pc, #4]	; (880 <select_mux+0x44>)
     87c:	619a      	str	r2, [r3, #24]
     87e:	e7ef      	b.n	860 <select_mux+0x24>
     880:	41004400 	.word	0x41004400

00000884 <read_ones>:

uint16_t read_ones() {
     884:	b510      	push	{r4, lr}
	return adc_start_read_result(ONES_CHANNEL);
     886:	2000      	movs	r0, #0
     888:	4b01      	ldr	r3, [pc, #4]	; (890 <read_ones+0xc>)
     88a:	4798      	blx	r3
}
     88c:	bd10      	pop	{r4, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	00000769 	.word	0x00000769

00000894 <read_tens>:

uint16_t read_tens() {
     894:	b510      	push	{r4, lr}
	return adc_start_read_result(TENS_CHANNEL);
     896:	2004      	movs	r0, #4
     898:	4b01      	ldr	r3, [pc, #4]	; (8a0 <read_tens+0xc>)
     89a:	4798      	blx	r3
}
     89c:	bd10      	pop	{r4, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000769 	.word	0x00000769

000008a4 <read_hndrds>:

uint16_t read_hndrds() {
     8a4:	b510      	push	{r4, lr}
	return adc_start_read_result(HNDRDS_CHANNEL);
     8a6:	2003      	movs	r0, #3
     8a8:	4b01      	ldr	r3, [pc, #4]	; (8b0 <read_hndrds+0xc>)
     8aa:	4798      	blx	r3
}
     8ac:	bd10      	pop	{r4, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00000769 	.word	0x00000769

000008b4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     8b4:	4770      	bx	lr
	...

000008b8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8b8:	4b0c      	ldr	r3, [pc, #48]	; (8ec <cpu_irq_enter_critical+0x34>)
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	2b00      	cmp	r3, #0
     8be:	d106      	bne.n	8ce <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8c0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     8c4:	2b00      	cmp	r3, #0
     8c6:	d007      	beq.n	8d8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8c8:	2200      	movs	r2, #0
     8ca:	4b09      	ldr	r3, [pc, #36]	; (8f0 <cpu_irq_enter_critical+0x38>)
     8cc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     8ce:	4a07      	ldr	r2, [pc, #28]	; (8ec <cpu_irq_enter_critical+0x34>)
     8d0:	6813      	ldr	r3, [r2, #0]
     8d2:	3301      	adds	r3, #1
     8d4:	6013      	str	r3, [r2, #0]
}
     8d6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     8d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     8da:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     8de:	2200      	movs	r2, #0
     8e0:	4b04      	ldr	r3, [pc, #16]	; (8f4 <cpu_irq_enter_critical+0x3c>)
     8e2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     8e4:	3201      	adds	r2, #1
     8e6:	4b02      	ldr	r3, [pc, #8]	; (8f0 <cpu_irq_enter_critical+0x38>)
     8e8:	701a      	strb	r2, [r3, #0]
     8ea:	e7f0      	b.n	8ce <cpu_irq_enter_critical+0x16>
     8ec:	20000090 	.word	0x20000090
     8f0:	20000094 	.word	0x20000094
     8f4:	20000008 	.word	0x20000008

000008f8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     8f8:	4b08      	ldr	r3, [pc, #32]	; (91c <cpu_irq_leave_critical+0x24>)
     8fa:	681a      	ldr	r2, [r3, #0]
     8fc:	3a01      	subs	r2, #1
     8fe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     900:	681b      	ldr	r3, [r3, #0]
     902:	2b00      	cmp	r3, #0
     904:	d109      	bne.n	91a <cpu_irq_leave_critical+0x22>
     906:	4b06      	ldr	r3, [pc, #24]	; (920 <cpu_irq_leave_critical+0x28>)
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	2b00      	cmp	r3, #0
     90c:	d005      	beq.n	91a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     90e:	2201      	movs	r2, #1
     910:	4b04      	ldr	r3, [pc, #16]	; (924 <cpu_irq_leave_critical+0x2c>)
     912:	701a      	strb	r2, [r3, #0]
     914:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     918:	b662      	cpsie	i
	}
}
     91a:	4770      	bx	lr
     91c:	20000090 	.word	0x20000090
     920:	20000094 	.word	0x20000094
     924:	20000008 	.word	0x20000008

00000928 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     928:	b510      	push	{r4, lr}
	switch (clock_source) {
     92a:	2808      	cmp	r0, #8
     92c:	d803      	bhi.n	936 <system_clock_source_get_hz+0xe>
     92e:	0080      	lsls	r0, r0, #2
     930:	4b1c      	ldr	r3, [pc, #112]	; (9a4 <system_clock_source_get_hz+0x7c>)
     932:	581b      	ldr	r3, [r3, r0]
     934:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     936:	2000      	movs	r0, #0
     938:	e032      	b.n	9a0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     93a:	4b1b      	ldr	r3, [pc, #108]	; (9a8 <system_clock_source_get_hz+0x80>)
     93c:	6918      	ldr	r0, [r3, #16]
     93e:	e02f      	b.n	9a0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     940:	4b1a      	ldr	r3, [pc, #104]	; (9ac <system_clock_source_get_hz+0x84>)
     942:	6a1b      	ldr	r3, [r3, #32]
     944:	059b      	lsls	r3, r3, #22
     946:	0f9b      	lsrs	r3, r3, #30
     948:	4819      	ldr	r0, [pc, #100]	; (9b0 <system_clock_source_get_hz+0x88>)
     94a:	40d8      	lsrs	r0, r3
     94c:	e028      	b.n	9a0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     94e:	4b16      	ldr	r3, [pc, #88]	; (9a8 <system_clock_source_get_hz+0x80>)
     950:	6958      	ldr	r0, [r3, #20]
     952:	e025      	b.n	9a0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     954:	4b14      	ldr	r3, [pc, #80]	; (9a8 <system_clock_source_get_hz+0x80>)
     956:	681b      	ldr	r3, [r3, #0]
			return 0;
     958:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     95a:	079b      	lsls	r3, r3, #30
     95c:	d520      	bpl.n	9a0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     95e:	4913      	ldr	r1, [pc, #76]	; (9ac <system_clock_source_get_hz+0x84>)
     960:	2210      	movs	r2, #16
     962:	68cb      	ldr	r3, [r1, #12]
     964:	421a      	tst	r2, r3
     966:	d0fc      	beq.n	962 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     968:	4b0f      	ldr	r3, [pc, #60]	; (9a8 <system_clock_source_get_hz+0x80>)
     96a:	681a      	ldr	r2, [r3, #0]
     96c:	2324      	movs	r3, #36	; 0x24
     96e:	4013      	ands	r3, r2
     970:	2b04      	cmp	r3, #4
     972:	d001      	beq.n	978 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     974:	480f      	ldr	r0, [pc, #60]	; (9b4 <system_clock_source_get_hz+0x8c>)
     976:	e013      	b.n	9a0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     978:	2000      	movs	r0, #0
     97a:	4b0f      	ldr	r3, [pc, #60]	; (9b8 <system_clock_source_get_hz+0x90>)
     97c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <system_clock_source_get_hz+0x80>)
     980:	689b      	ldr	r3, [r3, #8]
     982:	041b      	lsls	r3, r3, #16
     984:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     986:	4358      	muls	r0, r3
     988:	e00a      	b.n	9a0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     98a:	2350      	movs	r3, #80	; 0x50
     98c:	4a07      	ldr	r2, [pc, #28]	; (9ac <system_clock_source_get_hz+0x84>)
     98e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     990:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     992:	075b      	lsls	r3, r3, #29
     994:	d504      	bpl.n	9a0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <system_clock_source_get_hz+0x80>)
     998:	68d8      	ldr	r0, [r3, #12]
     99a:	e001      	b.n	9a0 <system_clock_source_get_hz+0x78>
		return 32768UL;
     99c:	2080      	movs	r0, #128	; 0x80
     99e:	0200      	lsls	r0, r0, #8
	}
}
     9a0:	bd10      	pop	{r4, pc}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	000013ec 	.word	0x000013ec
     9a8:	20000098 	.word	0x20000098
     9ac:	40000800 	.word	0x40000800
     9b0:	007a1200 	.word	0x007a1200
     9b4:	02dc6c00 	.word	0x02dc6c00
     9b8:	00000d8d 	.word	0x00000d8d

000009bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     9bc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     9be:	490c      	ldr	r1, [pc, #48]	; (9f0 <system_clock_source_osc8m_set_config+0x34>)
     9c0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     9c2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     9c4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     9c6:	7840      	ldrb	r0, [r0, #1]
     9c8:	2201      	movs	r2, #1
     9ca:	4010      	ands	r0, r2
     9cc:	0180      	lsls	r0, r0, #6
     9ce:	2640      	movs	r6, #64	; 0x40
     9d0:	43b3      	bics	r3, r6
     9d2:	4303      	orrs	r3, r0
     9d4:	402a      	ands	r2, r5
     9d6:	01d2      	lsls	r2, r2, #7
     9d8:	2080      	movs	r0, #128	; 0x80
     9da:	4383      	bics	r3, r0
     9dc:	4313      	orrs	r3, r2
     9de:	2203      	movs	r2, #3
     9e0:	4022      	ands	r2, r4
     9e2:	0212      	lsls	r2, r2, #8
     9e4:	4803      	ldr	r0, [pc, #12]	; (9f4 <system_clock_source_osc8m_set_config+0x38>)
     9e6:	4003      	ands	r3, r0
     9e8:	4313      	orrs	r3, r2
     9ea:	620b      	str	r3, [r1, #32]
}
     9ec:	bd70      	pop	{r4, r5, r6, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	40000800 	.word	0x40000800
     9f4:	fffffcff 	.word	0xfffffcff

000009f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     9f8:	2808      	cmp	r0, #8
     9fa:	d803      	bhi.n	a04 <system_clock_source_enable+0xc>
     9fc:	0080      	lsls	r0, r0, #2
     9fe:	4b25      	ldr	r3, [pc, #148]	; (a94 <system_clock_source_enable+0x9c>)
     a00:	581b      	ldr	r3, [r3, r0]
     a02:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     a04:	2017      	movs	r0, #23
     a06:	e044      	b.n	a92 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     a08:	4a23      	ldr	r2, [pc, #140]	; (a98 <system_clock_source_enable+0xa0>)
     a0a:	6a13      	ldr	r3, [r2, #32]
     a0c:	2102      	movs	r1, #2
     a0e:	430b      	orrs	r3, r1
     a10:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     a12:	2000      	movs	r0, #0
     a14:	e03d      	b.n	a92 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     a16:	4a20      	ldr	r2, [pc, #128]	; (a98 <system_clock_source_enable+0xa0>)
     a18:	6993      	ldr	r3, [r2, #24]
     a1a:	2102      	movs	r1, #2
     a1c:	430b      	orrs	r3, r1
     a1e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     a20:	2000      	movs	r0, #0
		break;
     a22:	e036      	b.n	a92 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     a24:	4a1c      	ldr	r2, [pc, #112]	; (a98 <system_clock_source_enable+0xa0>)
     a26:	8a13      	ldrh	r3, [r2, #16]
     a28:	2102      	movs	r1, #2
     a2a:	430b      	orrs	r3, r1
     a2c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     a2e:	2000      	movs	r0, #0
		break;
     a30:	e02f      	b.n	a92 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     a32:	4a19      	ldr	r2, [pc, #100]	; (a98 <system_clock_source_enable+0xa0>)
     a34:	8a93      	ldrh	r3, [r2, #20]
     a36:	2102      	movs	r1, #2
     a38:	430b      	orrs	r3, r1
     a3a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     a3c:	2000      	movs	r0, #0
		break;
     a3e:	e028      	b.n	a92 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     a40:	4916      	ldr	r1, [pc, #88]	; (a9c <system_clock_source_enable+0xa4>)
     a42:	680b      	ldr	r3, [r1, #0]
     a44:	2202      	movs	r2, #2
     a46:	4313      	orrs	r3, r2
     a48:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     a4a:	4b13      	ldr	r3, [pc, #76]	; (a98 <system_clock_source_enable+0xa0>)
     a4c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     a4e:	0019      	movs	r1, r3
     a50:	320e      	adds	r2, #14
     a52:	68cb      	ldr	r3, [r1, #12]
     a54:	421a      	tst	r2, r3
     a56:	d0fc      	beq.n	a52 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     a58:	4a10      	ldr	r2, [pc, #64]	; (a9c <system_clock_source_enable+0xa4>)
     a5a:	6891      	ldr	r1, [r2, #8]
     a5c:	4b0e      	ldr	r3, [pc, #56]	; (a98 <system_clock_source_enable+0xa0>)
     a5e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     a60:	6852      	ldr	r2, [r2, #4]
     a62:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     a64:	2200      	movs	r2, #0
     a66:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     a68:	0019      	movs	r1, r3
     a6a:	3210      	adds	r2, #16
     a6c:	68cb      	ldr	r3, [r1, #12]
     a6e:	421a      	tst	r2, r3
     a70:	d0fc      	beq.n	a6c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     a72:	4b0a      	ldr	r3, [pc, #40]	; (a9c <system_clock_source_enable+0xa4>)
     a74:	681b      	ldr	r3, [r3, #0]
     a76:	b29b      	uxth	r3, r3
     a78:	4a07      	ldr	r2, [pc, #28]	; (a98 <system_clock_source_enable+0xa0>)
     a7a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     a7c:	2000      	movs	r0, #0
     a7e:	e008      	b.n	a92 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     a80:	4905      	ldr	r1, [pc, #20]	; (a98 <system_clock_source_enable+0xa0>)
     a82:	2244      	movs	r2, #68	; 0x44
     a84:	5c8b      	ldrb	r3, [r1, r2]
     a86:	2002      	movs	r0, #2
     a88:	4303      	orrs	r3, r0
     a8a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     a8c:	2000      	movs	r0, #0
		break;
     a8e:	e000      	b.n	a92 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     a90:	2000      	movs	r0, #0
}
     a92:	4770      	bx	lr
     a94:	00001410 	.word	0x00001410
     a98:	40000800 	.word	0x40000800
     a9c:	20000098 	.word	0x20000098

00000aa0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     aa0:	b530      	push	{r4, r5, lr}
     aa2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     aa4:	22c2      	movs	r2, #194	; 0xc2
     aa6:	00d2      	lsls	r2, r2, #3
     aa8:	4b1a      	ldr	r3, [pc, #104]	; (b14 <system_clock_init+0x74>)
     aaa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     aac:	4a1a      	ldr	r2, [pc, #104]	; (b18 <system_clock_init+0x78>)
     aae:	6853      	ldr	r3, [r2, #4]
     ab0:	211e      	movs	r1, #30
     ab2:	438b      	bics	r3, r1
     ab4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     ab6:	2301      	movs	r3, #1
     ab8:	466a      	mov	r2, sp
     aba:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     abc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     abe:	4d17      	ldr	r5, [pc, #92]	; (b1c <system_clock_init+0x7c>)
     ac0:	b2e0      	uxtb	r0, r4
     ac2:	4669      	mov	r1, sp
     ac4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ac6:	3401      	adds	r4, #1
     ac8:	2c18      	cmp	r4, #24
     aca:	d1f9      	bne.n	ac0 <system_clock_init+0x20>
	config->run_in_standby  = false;
     acc:	a803      	add	r0, sp, #12
     ace:	2400      	movs	r4, #0
     ad0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     ad2:	2501      	movs	r5, #1
     ad4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ad6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ad8:	4b11      	ldr	r3, [pc, #68]	; (b20 <system_clock_init+0x80>)
     ada:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     adc:	2006      	movs	r0, #6
     ade:	4b11      	ldr	r3, [pc, #68]	; (b24 <system_clock_init+0x84>)
     ae0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     ae2:	4b11      	ldr	r3, [pc, #68]	; (b28 <system_clock_init+0x88>)
     ae4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     ae6:	4b11      	ldr	r3, [pc, #68]	; (b2c <system_clock_init+0x8c>)
     ae8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     aea:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     aec:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     aee:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     af0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     af2:	466b      	mov	r3, sp
     af4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     af6:	2306      	movs	r3, #6
     af8:	466a      	mov	r2, sp
     afa:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     afc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     afe:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     b00:	4669      	mov	r1, sp
     b02:	2000      	movs	r0, #0
     b04:	4b0a      	ldr	r3, [pc, #40]	; (b30 <system_clock_init+0x90>)
     b06:	4798      	blx	r3
     b08:	2000      	movs	r0, #0
     b0a:	4b0a      	ldr	r3, [pc, #40]	; (b34 <system_clock_init+0x94>)
     b0c:	4798      	blx	r3
#endif
}
     b0e:	b005      	add	sp, #20
     b10:	bd30      	pop	{r4, r5, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	40000800 	.word	0x40000800
     b18:	41004000 	.word	0x41004000
     b1c:	00000d71 	.word	0x00000d71
     b20:	000009bd 	.word	0x000009bd
     b24:	000009f9 	.word	0x000009f9
     b28:	00000b39 	.word	0x00000b39
     b2c:	40000400 	.word	0x40000400
     b30:	00000b5d 	.word	0x00000b5d
     b34:	00000c15 	.word	0x00000c15

00000b38 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     b38:	4a06      	ldr	r2, [pc, #24]	; (b54 <system_gclk_init+0x1c>)
     b3a:	6993      	ldr	r3, [r2, #24]
     b3c:	2108      	movs	r1, #8
     b3e:	430b      	orrs	r3, r1
     b40:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     b42:	2201      	movs	r2, #1
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <system_gclk_init+0x20>)
     b46:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     b48:	0019      	movs	r1, r3
     b4a:	780b      	ldrb	r3, [r1, #0]
     b4c:	4213      	tst	r3, r2
     b4e:	d1fc      	bne.n	b4a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     b50:	4770      	bx	lr
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	40000400 	.word	0x40000400
     b58:	40000c00 	.word	0x40000c00

00000b5c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     b60:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     b62:	780d      	ldrb	r5, [r1, #0]
     b64:	022d      	lsls	r5, r5, #8
     b66:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     b68:	784b      	ldrb	r3, [r1, #1]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d002      	beq.n	b74 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     b6e:	2380      	movs	r3, #128	; 0x80
     b70:	02db      	lsls	r3, r3, #11
     b72:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     b74:	7a4b      	ldrb	r3, [r1, #9]
     b76:	2b00      	cmp	r3, #0
     b78:	d002      	beq.n	b80 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     b7a:	2380      	movs	r3, #128	; 0x80
     b7c:	031b      	lsls	r3, r3, #12
     b7e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     b80:	6848      	ldr	r0, [r1, #4]
     b82:	2801      	cmp	r0, #1
     b84:	d910      	bls.n	ba8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     b86:	1e43      	subs	r3, r0, #1
     b88:	4218      	tst	r0, r3
     b8a:	d134      	bne.n	bf6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     b8c:	2802      	cmp	r0, #2
     b8e:	d930      	bls.n	bf2 <system_gclk_gen_set_config+0x96>
     b90:	2302      	movs	r3, #2
     b92:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     b94:	3201      	adds	r2, #1
						mask <<= 1) {
     b96:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     b98:	4298      	cmp	r0, r3
     b9a:	d8fb      	bhi.n	b94 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     b9c:	0212      	lsls	r2, r2, #8
     b9e:	4332      	orrs	r2, r6
     ba0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     ba2:	2380      	movs	r3, #128	; 0x80
     ba4:	035b      	lsls	r3, r3, #13
     ba6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     ba8:	7a0b      	ldrb	r3, [r1, #8]
     baa:	2b00      	cmp	r3, #0
     bac:	d002      	beq.n	bb4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     bae:	2380      	movs	r3, #128	; 0x80
     bb0:	039b      	lsls	r3, r3, #14
     bb2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bb4:	4a13      	ldr	r2, [pc, #76]	; (c04 <system_gclk_gen_set_config+0xa8>)
     bb6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     bb8:	b25b      	sxtb	r3, r3
     bba:	2b00      	cmp	r3, #0
     bbc:	dbfb      	blt.n	bb6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     bbe:	4b12      	ldr	r3, [pc, #72]	; (c08 <system_gclk_gen_set_config+0xac>)
     bc0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     bc2:	4b12      	ldr	r3, [pc, #72]	; (c0c <system_gclk_gen_set_config+0xb0>)
     bc4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bc6:	4a0f      	ldr	r2, [pc, #60]	; (c04 <system_gclk_gen_set_config+0xa8>)
     bc8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     bca:	b25b      	sxtb	r3, r3
     bcc:	2b00      	cmp	r3, #0
     bce:	dbfb      	blt.n	bc8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     bd0:	4b0c      	ldr	r3, [pc, #48]	; (c04 <system_gclk_gen_set_config+0xa8>)
     bd2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     bd4:	001a      	movs	r2, r3
     bd6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     bd8:	b25b      	sxtb	r3, r3
     bda:	2b00      	cmp	r3, #0
     bdc:	dbfb      	blt.n	bd6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     bde:	4a09      	ldr	r2, [pc, #36]	; (c04 <system_gclk_gen_set_config+0xa8>)
     be0:	6853      	ldr	r3, [r2, #4]
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	0249      	lsls	r1, r1, #9
     be6:	400b      	ands	r3, r1
     be8:	431d      	orrs	r5, r3
     bea:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     bec:	4b08      	ldr	r3, [pc, #32]	; (c10 <system_gclk_gen_set_config+0xb4>)
     bee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bf0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     bf2:	2200      	movs	r2, #0
     bf4:	e7d2      	b.n	b9c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     bf6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     bf8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     bfa:	2380      	movs	r3, #128	; 0x80
     bfc:	029b      	lsls	r3, r3, #10
     bfe:	431d      	orrs	r5, r3
     c00:	e7d2      	b.n	ba8 <system_gclk_gen_set_config+0x4c>
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	40000c00 	.word	0x40000c00
     c08:	000008b9 	.word	0x000008b9
     c0c:	40000c08 	.word	0x40000c08
     c10:	000008f9 	.word	0x000008f9

00000c14 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     c14:	b510      	push	{r4, lr}
     c16:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c18:	4a0b      	ldr	r2, [pc, #44]	; (c48 <system_gclk_gen_enable+0x34>)
     c1a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c1c:	b25b      	sxtb	r3, r3
     c1e:	2b00      	cmp	r3, #0
     c20:	dbfb      	blt.n	c1a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     c22:	4b0a      	ldr	r3, [pc, #40]	; (c4c <system_gclk_gen_enable+0x38>)
     c24:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c26:	4b0a      	ldr	r3, [pc, #40]	; (c50 <system_gclk_gen_enable+0x3c>)
     c28:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c2a:	4a07      	ldr	r2, [pc, #28]	; (c48 <system_gclk_gen_enable+0x34>)
     c2c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c2e:	b25b      	sxtb	r3, r3
     c30:	2b00      	cmp	r3, #0
     c32:	dbfb      	blt.n	c2c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     c34:	4a04      	ldr	r2, [pc, #16]	; (c48 <system_gclk_gen_enable+0x34>)
     c36:	6851      	ldr	r1, [r2, #4]
     c38:	2380      	movs	r3, #128	; 0x80
     c3a:	025b      	lsls	r3, r3, #9
     c3c:	430b      	orrs	r3, r1
     c3e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <system_gclk_gen_enable+0x40>)
     c42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     c44:	bd10      	pop	{r4, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	40000c00 	.word	0x40000c00
     c4c:	000008b9 	.word	0x000008b9
     c50:	40000c04 	.word	0x40000c04
     c54:	000008f9 	.word	0x000008f9

00000c58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     c58:	b570      	push	{r4, r5, r6, lr}
     c5a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c5c:	4a1a      	ldr	r2, [pc, #104]	; (cc8 <system_gclk_gen_get_hz+0x70>)
     c5e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c60:	b25b      	sxtb	r3, r3
     c62:	2b00      	cmp	r3, #0
     c64:	dbfb      	blt.n	c5e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     c66:	4b19      	ldr	r3, [pc, #100]	; (ccc <system_gclk_gen_get_hz+0x74>)
     c68:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c6a:	4b19      	ldr	r3, [pc, #100]	; (cd0 <system_gclk_gen_get_hz+0x78>)
     c6c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c6e:	4a16      	ldr	r2, [pc, #88]	; (cc8 <system_gclk_gen_get_hz+0x70>)
     c70:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c72:	b25b      	sxtb	r3, r3
     c74:	2b00      	cmp	r3, #0
     c76:	dbfb      	blt.n	c70 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     c78:	4e13      	ldr	r6, [pc, #76]	; (cc8 <system_gclk_gen_get_hz+0x70>)
     c7a:	6870      	ldr	r0, [r6, #4]
     c7c:	04c0      	lsls	r0, r0, #19
     c7e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     c80:	4b14      	ldr	r3, [pc, #80]	; (cd4 <system_gclk_gen_get_hz+0x7c>)
     c82:	4798      	blx	r3
     c84:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     c86:	4b12      	ldr	r3, [pc, #72]	; (cd0 <system_gclk_gen_get_hz+0x78>)
     c88:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     c8a:	6876      	ldr	r6, [r6, #4]
     c8c:	02f6      	lsls	r6, r6, #11
     c8e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     c90:	4b11      	ldr	r3, [pc, #68]	; (cd8 <system_gclk_gen_get_hz+0x80>)
     c92:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     c94:	4a0c      	ldr	r2, [pc, #48]	; (cc8 <system_gclk_gen_get_hz+0x70>)
     c96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     c98:	b25b      	sxtb	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	dbfb      	blt.n	c96 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     c9e:	4b0a      	ldr	r3, [pc, #40]	; (cc8 <system_gclk_gen_get_hz+0x70>)
     ca0:	689c      	ldr	r4, [r3, #8]
     ca2:	0224      	lsls	r4, r4, #8
     ca4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     ca6:	4b0d      	ldr	r3, [pc, #52]	; (cdc <system_gclk_gen_get_hz+0x84>)
     ca8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     caa:	2e00      	cmp	r6, #0
     cac:	d107      	bne.n	cbe <system_gclk_gen_get_hz+0x66>
     cae:	2c01      	cmp	r4, #1
     cb0:	d907      	bls.n	cc2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     cb2:	0021      	movs	r1, r4
     cb4:	0028      	movs	r0, r5
     cb6:	4b0a      	ldr	r3, [pc, #40]	; (ce0 <system_gclk_gen_get_hz+0x88>)
     cb8:	4798      	blx	r3
     cba:	0005      	movs	r5, r0
     cbc:	e001      	b.n	cc2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     cbe:	3401      	adds	r4, #1
     cc0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     cc2:	0028      	movs	r0, r5
     cc4:	bd70      	pop	{r4, r5, r6, pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	40000c00 	.word	0x40000c00
     ccc:	000008b9 	.word	0x000008b9
     cd0:	40000c04 	.word	0x40000c04
     cd4:	00000929 	.word	0x00000929
     cd8:	40000c08 	.word	0x40000c08
     cdc:	000008f9 	.word	0x000008f9
     ce0:	0000105d 	.word	0x0000105d

00000ce4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     ce4:	b510      	push	{r4, lr}
     ce6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     ce8:	4b06      	ldr	r3, [pc, #24]	; (d04 <system_gclk_chan_enable+0x20>)
     cea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     cec:	4b06      	ldr	r3, [pc, #24]	; (d08 <system_gclk_chan_enable+0x24>)
     cee:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     cf0:	4a06      	ldr	r2, [pc, #24]	; (d0c <system_gclk_chan_enable+0x28>)
     cf2:	8853      	ldrh	r3, [r2, #2]
     cf4:	2180      	movs	r1, #128	; 0x80
     cf6:	01c9      	lsls	r1, r1, #7
     cf8:	430b      	orrs	r3, r1
     cfa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <system_gclk_chan_enable+0x2c>)
     cfe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d00:	bd10      	pop	{r4, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	000008b9 	.word	0x000008b9
     d08:	40000c02 	.word	0x40000c02
     d0c:	40000c00 	.word	0x40000c00
     d10:	000008f9 	.word	0x000008f9

00000d14 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     d14:	b510      	push	{r4, lr}
     d16:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d18:	4b0f      	ldr	r3, [pc, #60]	; (d58 <system_gclk_chan_disable+0x44>)
     d1a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     d1c:	4b0f      	ldr	r3, [pc, #60]	; (d5c <system_gclk_chan_disable+0x48>)
     d1e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     d20:	4a0f      	ldr	r2, [pc, #60]	; (d60 <system_gclk_chan_disable+0x4c>)
     d22:	8853      	ldrh	r3, [r2, #2]
     d24:	051b      	lsls	r3, r3, #20
     d26:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     d28:	8853      	ldrh	r3, [r2, #2]
     d2a:	490e      	ldr	r1, [pc, #56]	; (d64 <system_gclk_chan_disable+0x50>)
     d2c:	400b      	ands	r3, r1
     d2e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     d30:	8853      	ldrh	r3, [r2, #2]
     d32:	490d      	ldr	r1, [pc, #52]	; (d68 <system_gclk_chan_disable+0x54>)
     d34:	400b      	ands	r3, r1
     d36:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     d38:	0011      	movs	r1, r2
     d3a:	2280      	movs	r2, #128	; 0x80
     d3c:	01d2      	lsls	r2, r2, #7
     d3e:	884b      	ldrh	r3, [r1, #2]
     d40:	4213      	tst	r3, r2
     d42:	d1fc      	bne.n	d3e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     d44:	4906      	ldr	r1, [pc, #24]	; (d60 <system_gclk_chan_disable+0x4c>)
     d46:	884a      	ldrh	r2, [r1, #2]
     d48:	0203      	lsls	r3, r0, #8
     d4a:	4806      	ldr	r0, [pc, #24]	; (d64 <system_gclk_chan_disable+0x50>)
     d4c:	4002      	ands	r2, r0
     d4e:	4313      	orrs	r3, r2
     d50:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <system_gclk_chan_disable+0x58>)
     d54:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     d56:	bd10      	pop	{r4, pc}
     d58:	000008b9 	.word	0x000008b9
     d5c:	40000c02 	.word	0x40000c02
     d60:	40000c00 	.word	0x40000c00
     d64:	fffff0ff 	.word	0xfffff0ff
     d68:	ffffbfff 	.word	0xffffbfff
     d6c:	000008f9 	.word	0x000008f9

00000d70 <system_gclk_chan_set_config>:
{
     d70:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     d72:	780c      	ldrb	r4, [r1, #0]
     d74:	0224      	lsls	r4, r4, #8
     d76:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     d78:	4b02      	ldr	r3, [pc, #8]	; (d84 <system_gclk_chan_set_config+0x14>)
     d7a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     d7c:	b2a4      	uxth	r4, r4
     d7e:	4b02      	ldr	r3, [pc, #8]	; (d88 <system_gclk_chan_set_config+0x18>)
     d80:	805c      	strh	r4, [r3, #2]
}
     d82:	bd10      	pop	{r4, pc}
     d84:	00000d15 	.word	0x00000d15
     d88:	40000c00 	.word	0x40000c00

00000d8c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     d8c:	b510      	push	{r4, lr}
     d8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     d90:	4b06      	ldr	r3, [pc, #24]	; (dac <system_gclk_chan_get_hz+0x20>)
     d92:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     d94:	4b06      	ldr	r3, [pc, #24]	; (db0 <system_gclk_chan_get_hz+0x24>)
     d96:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     d98:	4b06      	ldr	r3, [pc, #24]	; (db4 <system_gclk_chan_get_hz+0x28>)
     d9a:	885c      	ldrh	r4, [r3, #2]
     d9c:	0524      	lsls	r4, r4, #20
     d9e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     da0:	4b05      	ldr	r3, [pc, #20]	; (db8 <system_gclk_chan_get_hz+0x2c>)
     da2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     da4:	0020      	movs	r0, r4
     da6:	4b05      	ldr	r3, [pc, #20]	; (dbc <system_gclk_chan_get_hz+0x30>)
     da8:	4798      	blx	r3
}
     daa:	bd10      	pop	{r4, pc}
     dac:	000008b9 	.word	0x000008b9
     db0:	40000c02 	.word	0x40000c02
     db4:	40000c00 	.word	0x40000c00
     db8:	000008f9 	.word	0x000008f9
     dbc:	00000c59 	.word	0x00000c59

00000dc0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     dc0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     dc2:	78d3      	ldrb	r3, [r2, #3]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d135      	bne.n	e34 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     dc8:	7813      	ldrb	r3, [r2, #0]
     dca:	2b80      	cmp	r3, #128	; 0x80
     dcc:	d029      	beq.n	e22 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     dce:	061b      	lsls	r3, r3, #24
     dd0:	2480      	movs	r4, #128	; 0x80
     dd2:	0264      	lsls	r4, r4, #9
     dd4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     dd6:	7854      	ldrb	r4, [r2, #1]
     dd8:	2502      	movs	r5, #2
     dda:	43ac      	bics	r4, r5
     ddc:	d106      	bne.n	dec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     dde:	7894      	ldrb	r4, [r2, #2]
     de0:	2c00      	cmp	r4, #0
     de2:	d120      	bne.n	e26 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     de4:	2480      	movs	r4, #128	; 0x80
     de6:	02a4      	lsls	r4, r4, #10
     de8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     dea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     dec:	7854      	ldrb	r4, [r2, #1]
     dee:	3c01      	subs	r4, #1
     df0:	2c01      	cmp	r4, #1
     df2:	d91c      	bls.n	e2e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     df4:	040d      	lsls	r5, r1, #16
     df6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     df8:	24a0      	movs	r4, #160	; 0xa0
     dfa:	05e4      	lsls	r4, r4, #23
     dfc:	432c      	orrs	r4, r5
     dfe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e00:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e02:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e04:	24d0      	movs	r4, #208	; 0xd0
     e06:	0624      	lsls	r4, r4, #24
     e08:	432c      	orrs	r4, r5
     e0a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e0c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     e0e:	78d4      	ldrb	r4, [r2, #3]
     e10:	2c00      	cmp	r4, #0
     e12:	d122      	bne.n	e5a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     e14:	035b      	lsls	r3, r3, #13
     e16:	d51c      	bpl.n	e52 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     e18:	7893      	ldrb	r3, [r2, #2]
     e1a:	2b01      	cmp	r3, #1
     e1c:	d01e      	beq.n	e5c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     e1e:	6141      	str	r1, [r0, #20]
     e20:	e017      	b.n	e52 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     e22:	2300      	movs	r3, #0
     e24:	e7d7      	b.n	dd6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     e26:	24c0      	movs	r4, #192	; 0xc0
     e28:	02e4      	lsls	r4, r4, #11
     e2a:	4323      	orrs	r3, r4
     e2c:	e7dd      	b.n	dea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     e2e:	4c0d      	ldr	r4, [pc, #52]	; (e64 <_system_pinmux_config+0xa4>)
     e30:	4023      	ands	r3, r4
     e32:	e7df      	b.n	df4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     e34:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     e36:	040c      	lsls	r4, r1, #16
     e38:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     e3a:	23a0      	movs	r3, #160	; 0xa0
     e3c:	05db      	lsls	r3, r3, #23
     e3e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e40:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     e42:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     e44:	23d0      	movs	r3, #208	; 0xd0
     e46:	061b      	lsls	r3, r3, #24
     e48:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     e4a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     e4c:	78d3      	ldrb	r3, [r2, #3]
     e4e:	2b00      	cmp	r3, #0
     e50:	d103      	bne.n	e5a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     e52:	7853      	ldrb	r3, [r2, #1]
     e54:	3b01      	subs	r3, #1
     e56:	2b01      	cmp	r3, #1
     e58:	d902      	bls.n	e60 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     e5a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     e5c:	6181      	str	r1, [r0, #24]
     e5e:	e7f8      	b.n	e52 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     e60:	6081      	str	r1, [r0, #8]
}
     e62:	e7fa      	b.n	e5a <_system_pinmux_config+0x9a>
     e64:	fffbffff 	.word	0xfffbffff

00000e68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     e68:	b510      	push	{r4, lr}
     e6a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e6c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e70:	2900      	cmp	r1, #0
     e72:	d104      	bne.n	e7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     e74:	0943      	lsrs	r3, r0, #5
     e76:	01db      	lsls	r3, r3, #7
     e78:	4905      	ldr	r1, [pc, #20]	; (e90 <system_pinmux_pin_set_config+0x28>)
     e7a:	468c      	mov	ip, r1
     e7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     e7e:	241f      	movs	r4, #31
     e80:	4020      	ands	r0, r4
     e82:	2101      	movs	r1, #1
     e84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     e86:	0018      	movs	r0, r3
     e88:	4b02      	ldr	r3, [pc, #8]	; (e94 <system_pinmux_pin_set_config+0x2c>)
     e8a:	4798      	blx	r3
}
     e8c:	bd10      	pop	{r4, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	41004400 	.word	0x41004400
     e94:	00000dc1 	.word	0x00000dc1

00000e98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     e98:	4770      	bx	lr
	...

00000e9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     e9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <system_init+0x18>)
     ea0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     ea2:	4b05      	ldr	r3, [pc, #20]	; (eb8 <system_init+0x1c>)
     ea4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     ea6:	4b05      	ldr	r3, [pc, #20]	; (ebc <system_init+0x20>)
     ea8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     eaa:	4b05      	ldr	r3, [pc, #20]	; (ec0 <system_init+0x24>)
     eac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     eae:	4b05      	ldr	r3, [pc, #20]	; (ec4 <system_init+0x28>)
     eb0:	4798      	blx	r3
}
     eb2:	bd10      	pop	{r4, pc}
     eb4:	00000aa1 	.word	0x00000aa1
     eb8:	000008b5 	.word	0x000008b5
     ebc:	00000e99 	.word	0x00000e99
     ec0:	00000e99 	.word	0x00000e99
     ec4:	00000e99 	.word	0x00000e99

00000ec8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ec8:	e7fe      	b.n	ec8 <Dummy_Handler>
	...

00000ecc <Reset_Handler>:
{
     ecc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     ece:	4a26      	ldr	r2, [pc, #152]	; (f68 <Reset_Handler+0x9c>)
     ed0:	4b26      	ldr	r3, [pc, #152]	; (f6c <Reset_Handler+0xa0>)
     ed2:	429a      	cmp	r2, r3
     ed4:	d011      	beq.n	efa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     ed6:	001a      	movs	r2, r3
     ed8:	4b25      	ldr	r3, [pc, #148]	; (f70 <Reset_Handler+0xa4>)
     eda:	429a      	cmp	r2, r3
     edc:	d20d      	bcs.n	efa <Reset_Handler+0x2e>
     ede:	4a25      	ldr	r2, [pc, #148]	; (f74 <Reset_Handler+0xa8>)
     ee0:	3303      	adds	r3, #3
     ee2:	1a9b      	subs	r3, r3, r2
     ee4:	089b      	lsrs	r3, r3, #2
     ee6:	3301      	adds	r3, #1
     ee8:	009b      	lsls	r3, r3, #2
     eea:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     eec:	481f      	ldr	r0, [pc, #124]	; (f6c <Reset_Handler+0xa0>)
     eee:	491e      	ldr	r1, [pc, #120]	; (f68 <Reset_Handler+0x9c>)
     ef0:	588c      	ldr	r4, [r1, r2]
     ef2:	5084      	str	r4, [r0, r2]
     ef4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     ef6:	429a      	cmp	r2, r3
     ef8:	d1fa      	bne.n	ef0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     efa:	4a1f      	ldr	r2, [pc, #124]	; (f78 <Reset_Handler+0xac>)
     efc:	4b1f      	ldr	r3, [pc, #124]	; (f7c <Reset_Handler+0xb0>)
     efe:	429a      	cmp	r2, r3
     f00:	d20a      	bcs.n	f18 <Reset_Handler+0x4c>
     f02:	43d3      	mvns	r3, r2
     f04:	491d      	ldr	r1, [pc, #116]	; (f7c <Reset_Handler+0xb0>)
     f06:	185b      	adds	r3, r3, r1
     f08:	2103      	movs	r1, #3
     f0a:	438b      	bics	r3, r1
     f0c:	3304      	adds	r3, #4
     f0e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     f10:	2100      	movs	r1, #0
     f12:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     f14:	4293      	cmp	r3, r2
     f16:	d1fc      	bne.n	f12 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f18:	4a19      	ldr	r2, [pc, #100]	; (f80 <Reset_Handler+0xb4>)
     f1a:	21ff      	movs	r1, #255	; 0xff
     f1c:	4b19      	ldr	r3, [pc, #100]	; (f84 <Reset_Handler+0xb8>)
     f1e:	438b      	bics	r3, r1
     f20:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     f22:	39fd      	subs	r1, #253	; 0xfd
     f24:	2390      	movs	r3, #144	; 0x90
     f26:	005b      	lsls	r3, r3, #1
     f28:	4a17      	ldr	r2, [pc, #92]	; (f88 <Reset_Handler+0xbc>)
     f2a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     f2c:	4b17      	ldr	r3, [pc, #92]	; (f8c <Reset_Handler+0xc0>)
     f2e:	7b9a      	ldrb	r2, [r3, #14]
     f30:	312e      	adds	r1, #46	; 0x2e
     f32:	438a      	bics	r2, r1
     f34:	2120      	movs	r1, #32
     f36:	430a      	orrs	r2, r1
     f38:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     f3a:	7b9a      	ldrb	r2, [r3, #14]
     f3c:	210c      	movs	r1, #12
     f3e:	438a      	bics	r2, r1
     f40:	2108      	movs	r1, #8
     f42:	430a      	orrs	r2, r1
     f44:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     f46:	7b9a      	ldrb	r2, [r3, #14]
     f48:	2103      	movs	r1, #3
     f4a:	438a      	bics	r2, r1
     f4c:	2102      	movs	r1, #2
     f4e:	430a      	orrs	r2, r1
     f50:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     f52:	4a0f      	ldr	r2, [pc, #60]	; (f90 <Reset_Handler+0xc4>)
     f54:	6853      	ldr	r3, [r2, #4]
     f56:	2180      	movs	r1, #128	; 0x80
     f58:	430b      	orrs	r3, r1
     f5a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     f5c:	4b0d      	ldr	r3, [pc, #52]	; (f94 <Reset_Handler+0xc8>)
     f5e:	4798      	blx	r3
        main();
     f60:	4b0d      	ldr	r3, [pc, #52]	; (f98 <Reset_Handler+0xcc>)
     f62:	4798      	blx	r3
     f64:	e7fe      	b.n	f64 <Reset_Handler+0x98>
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	00001454 	.word	0x00001454
     f6c:	20000000 	.word	0x20000000
     f70:	20000070 	.word	0x20000070
     f74:	20000004 	.word	0x20000004
     f78:	20000070 	.word	0x20000070
     f7c:	20000348 	.word	0x20000348
     f80:	e000ed00 	.word	0xe000ed00
     f84:	00000000 	.word	0x00000000
     f88:	41007000 	.word	0x41007000
     f8c:	41004800 	.word	0x41004800
     f90:	41004000 	.word	0x41004000
     f94:	00001175 	.word	0x00001175
     f98:	0000102d 	.word	0x0000102d

00000f9c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     f9c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     f9e:	4a06      	ldr	r2, [pc, #24]	; (fb8 <_sbrk+0x1c>)
     fa0:	6812      	ldr	r2, [r2, #0]
     fa2:	2a00      	cmp	r2, #0
     fa4:	d004      	beq.n	fb0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     fa6:	4a04      	ldr	r2, [pc, #16]	; (fb8 <_sbrk+0x1c>)
     fa8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     faa:	18c3      	adds	r3, r0, r3
     fac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     fae:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     fb0:	4902      	ldr	r1, [pc, #8]	; (fbc <_sbrk+0x20>)
     fb2:	4a01      	ldr	r2, [pc, #4]	; (fb8 <_sbrk+0x1c>)
     fb4:	6011      	str	r1, [r2, #0]
     fb6:	e7f6      	b.n	fa6 <_sbrk+0xa>
     fb8:	200000b0 	.word	0x200000b0
     fbc:	20000748 	.word	0x20000748

00000fc0 <test>:
volatile uint16_t tens_array[100];
volatile uint16_t hndrds_array[100];
volatile bool temp_cube = false;

void test() 
{
     fc0:	b570      	push	{r4, r5, r6, lr}
	uint32_t readALL[200];
	
	//select_mux(false, false, true);
	static uint16_t temp = 0;
	//temp_cube           = detect_cube(false, false, false, 0);
	select_mux(false, false, false);
     fc2:	2200      	movs	r2, #0
     fc4:	2100      	movs	r1, #0
     fc6:	2000      	movs	r0, #0
     fc8:	4b10      	ldr	r3, [pc, #64]	; (100c <test+0x4c>)
     fca:	4798      	blx	r3
	//delay_ms(10);
	ones_array[temp]    = read_ones();
     fcc:	4c10      	ldr	r4, [pc, #64]	; (1010 <test+0x50>)
     fce:	8825      	ldrh	r5, [r4, #0]
     fd0:	4b10      	ldr	r3, [pc, #64]	; (1014 <test+0x54>)
     fd2:	4798      	blx	r3
     fd4:	006d      	lsls	r5, r5, #1
     fd6:	4b10      	ldr	r3, [pc, #64]	; (1018 <test+0x58>)
     fd8:	52e8      	strh	r0, [r5, r3]
	tens_array[temp]    = read_tens();
     fda:	8825      	ldrh	r5, [r4, #0]
     fdc:	4b0f      	ldr	r3, [pc, #60]	; (101c <test+0x5c>)
     fde:	4798      	blx	r3
     fe0:	006d      	lsls	r5, r5, #1
     fe2:	4b0f      	ldr	r3, [pc, #60]	; (1020 <test+0x60>)
     fe4:	52e8      	strh	r0, [r5, r3]
	hndrds_array[temp]  = read_hndrds();
     fe6:	8825      	ldrh	r5, [r4, #0]
     fe8:	4b0e      	ldr	r3, [pc, #56]	; (1024 <test+0x64>)
     fea:	4798      	blx	r3
     fec:	006d      	lsls	r5, r5, #1
     fee:	4b0e      	ldr	r3, [pc, #56]	; (1028 <test+0x68>)
     ff0:	52e8      	strh	r0, [r5, r3]
	temp++;
     ff2:	8823      	ldrh	r3, [r4, #0]
     ff4:	3301      	adds	r3, #1
     ff6:	b29b      	uxth	r3, r3
	//read_all_values();
	if(temp > 200)
     ff8:	2bc8      	cmp	r3, #200	; 0xc8
     ffa:	d903      	bls.n	1004 <test+0x44>
	{
		
		temp =0;
     ffc:	2200      	movs	r2, #0
     ffe:	4b04      	ldr	r3, [pc, #16]	; (1010 <test+0x50>)
    1000:	801a      	strh	r2, [r3, #0]
	if(tempCount == 200)
	{
		tempCount = 0;
	}
	*/
}
    1002:	bd70      	pop	{r4, r5, r6, pc}
	temp++;
    1004:	4a02      	ldr	r2, [pc, #8]	; (1010 <test+0x50>)
    1006:	8013      	strh	r3, [r2, #0]
    1008:	e7fb      	b.n	1002 <test+0x42>
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	0000083d 	.word	0x0000083d
    1010:	200000b4 	.word	0x200000b4
    1014:	00000885 	.word	0x00000885
    1018:	200000e8 	.word	0x200000e8
    101c:	00000895 	.word	0x00000895
    1020:	200001b0 	.word	0x200001b0
    1024:	000008a5 	.word	0x000008a5
    1028:	2000027c 	.word	0x2000027c

0000102c <main>:

int main (void)
{
    102c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    102e:	4b06      	ldr	r3, [pc, #24]	; (1048 <main+0x1c>)
    1030:	4798      	blx	r3
	delay_init();
    1032:	4b06      	ldr	r3, [pc, #24]	; (104c <main+0x20>)
    1034:	4798      	blx	r3
	ir_sensor_init();
    1036:	4b06      	ldr	r3, [pc, #24]	; (1050 <main+0x24>)
    1038:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	while(true) {
		test();
    103a:	4d06      	ldr	r5, [pc, #24]	; (1054 <main+0x28>)
		delay_ms(10);
    103c:	4c06      	ldr	r4, [pc, #24]	; (1058 <main+0x2c>)
		test();
    103e:	47a8      	blx	r5
		delay_ms(10);
    1040:	200a      	movs	r0, #10
    1042:	47a0      	blx	r4
    1044:	e7fb      	b.n	103e <main+0x12>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	00000e9d 	.word	0x00000e9d
    104c:	000000ed 	.word	0x000000ed
    1050:	00000829 	.word	0x00000829
    1054:	00000fc1 	.word	0x00000fc1
    1058:	0000012d 	.word	0x0000012d

0000105c <__udivsi3>:
    105c:	2200      	movs	r2, #0
    105e:	0843      	lsrs	r3, r0, #1
    1060:	428b      	cmp	r3, r1
    1062:	d374      	bcc.n	114e <__udivsi3+0xf2>
    1064:	0903      	lsrs	r3, r0, #4
    1066:	428b      	cmp	r3, r1
    1068:	d35f      	bcc.n	112a <__udivsi3+0xce>
    106a:	0a03      	lsrs	r3, r0, #8
    106c:	428b      	cmp	r3, r1
    106e:	d344      	bcc.n	10fa <__udivsi3+0x9e>
    1070:	0b03      	lsrs	r3, r0, #12
    1072:	428b      	cmp	r3, r1
    1074:	d328      	bcc.n	10c8 <__udivsi3+0x6c>
    1076:	0c03      	lsrs	r3, r0, #16
    1078:	428b      	cmp	r3, r1
    107a:	d30d      	bcc.n	1098 <__udivsi3+0x3c>
    107c:	22ff      	movs	r2, #255	; 0xff
    107e:	0209      	lsls	r1, r1, #8
    1080:	ba12      	rev	r2, r2
    1082:	0c03      	lsrs	r3, r0, #16
    1084:	428b      	cmp	r3, r1
    1086:	d302      	bcc.n	108e <__udivsi3+0x32>
    1088:	1212      	asrs	r2, r2, #8
    108a:	0209      	lsls	r1, r1, #8
    108c:	d065      	beq.n	115a <__udivsi3+0xfe>
    108e:	0b03      	lsrs	r3, r0, #12
    1090:	428b      	cmp	r3, r1
    1092:	d319      	bcc.n	10c8 <__udivsi3+0x6c>
    1094:	e000      	b.n	1098 <__udivsi3+0x3c>
    1096:	0a09      	lsrs	r1, r1, #8
    1098:	0bc3      	lsrs	r3, r0, #15
    109a:	428b      	cmp	r3, r1
    109c:	d301      	bcc.n	10a2 <__udivsi3+0x46>
    109e:	03cb      	lsls	r3, r1, #15
    10a0:	1ac0      	subs	r0, r0, r3
    10a2:	4152      	adcs	r2, r2
    10a4:	0b83      	lsrs	r3, r0, #14
    10a6:	428b      	cmp	r3, r1
    10a8:	d301      	bcc.n	10ae <__udivsi3+0x52>
    10aa:	038b      	lsls	r3, r1, #14
    10ac:	1ac0      	subs	r0, r0, r3
    10ae:	4152      	adcs	r2, r2
    10b0:	0b43      	lsrs	r3, r0, #13
    10b2:	428b      	cmp	r3, r1
    10b4:	d301      	bcc.n	10ba <__udivsi3+0x5e>
    10b6:	034b      	lsls	r3, r1, #13
    10b8:	1ac0      	subs	r0, r0, r3
    10ba:	4152      	adcs	r2, r2
    10bc:	0b03      	lsrs	r3, r0, #12
    10be:	428b      	cmp	r3, r1
    10c0:	d301      	bcc.n	10c6 <__udivsi3+0x6a>
    10c2:	030b      	lsls	r3, r1, #12
    10c4:	1ac0      	subs	r0, r0, r3
    10c6:	4152      	adcs	r2, r2
    10c8:	0ac3      	lsrs	r3, r0, #11
    10ca:	428b      	cmp	r3, r1
    10cc:	d301      	bcc.n	10d2 <__udivsi3+0x76>
    10ce:	02cb      	lsls	r3, r1, #11
    10d0:	1ac0      	subs	r0, r0, r3
    10d2:	4152      	adcs	r2, r2
    10d4:	0a83      	lsrs	r3, r0, #10
    10d6:	428b      	cmp	r3, r1
    10d8:	d301      	bcc.n	10de <__udivsi3+0x82>
    10da:	028b      	lsls	r3, r1, #10
    10dc:	1ac0      	subs	r0, r0, r3
    10de:	4152      	adcs	r2, r2
    10e0:	0a43      	lsrs	r3, r0, #9
    10e2:	428b      	cmp	r3, r1
    10e4:	d301      	bcc.n	10ea <__udivsi3+0x8e>
    10e6:	024b      	lsls	r3, r1, #9
    10e8:	1ac0      	subs	r0, r0, r3
    10ea:	4152      	adcs	r2, r2
    10ec:	0a03      	lsrs	r3, r0, #8
    10ee:	428b      	cmp	r3, r1
    10f0:	d301      	bcc.n	10f6 <__udivsi3+0x9a>
    10f2:	020b      	lsls	r3, r1, #8
    10f4:	1ac0      	subs	r0, r0, r3
    10f6:	4152      	adcs	r2, r2
    10f8:	d2cd      	bcs.n	1096 <__udivsi3+0x3a>
    10fa:	09c3      	lsrs	r3, r0, #7
    10fc:	428b      	cmp	r3, r1
    10fe:	d301      	bcc.n	1104 <__udivsi3+0xa8>
    1100:	01cb      	lsls	r3, r1, #7
    1102:	1ac0      	subs	r0, r0, r3
    1104:	4152      	adcs	r2, r2
    1106:	0983      	lsrs	r3, r0, #6
    1108:	428b      	cmp	r3, r1
    110a:	d301      	bcc.n	1110 <__udivsi3+0xb4>
    110c:	018b      	lsls	r3, r1, #6
    110e:	1ac0      	subs	r0, r0, r3
    1110:	4152      	adcs	r2, r2
    1112:	0943      	lsrs	r3, r0, #5
    1114:	428b      	cmp	r3, r1
    1116:	d301      	bcc.n	111c <__udivsi3+0xc0>
    1118:	014b      	lsls	r3, r1, #5
    111a:	1ac0      	subs	r0, r0, r3
    111c:	4152      	adcs	r2, r2
    111e:	0903      	lsrs	r3, r0, #4
    1120:	428b      	cmp	r3, r1
    1122:	d301      	bcc.n	1128 <__udivsi3+0xcc>
    1124:	010b      	lsls	r3, r1, #4
    1126:	1ac0      	subs	r0, r0, r3
    1128:	4152      	adcs	r2, r2
    112a:	08c3      	lsrs	r3, r0, #3
    112c:	428b      	cmp	r3, r1
    112e:	d301      	bcc.n	1134 <__udivsi3+0xd8>
    1130:	00cb      	lsls	r3, r1, #3
    1132:	1ac0      	subs	r0, r0, r3
    1134:	4152      	adcs	r2, r2
    1136:	0883      	lsrs	r3, r0, #2
    1138:	428b      	cmp	r3, r1
    113a:	d301      	bcc.n	1140 <__udivsi3+0xe4>
    113c:	008b      	lsls	r3, r1, #2
    113e:	1ac0      	subs	r0, r0, r3
    1140:	4152      	adcs	r2, r2
    1142:	0843      	lsrs	r3, r0, #1
    1144:	428b      	cmp	r3, r1
    1146:	d301      	bcc.n	114c <__udivsi3+0xf0>
    1148:	004b      	lsls	r3, r1, #1
    114a:	1ac0      	subs	r0, r0, r3
    114c:	4152      	adcs	r2, r2
    114e:	1a41      	subs	r1, r0, r1
    1150:	d200      	bcs.n	1154 <__udivsi3+0xf8>
    1152:	4601      	mov	r1, r0
    1154:	4152      	adcs	r2, r2
    1156:	4610      	mov	r0, r2
    1158:	4770      	bx	lr
    115a:	e7ff      	b.n	115c <__udivsi3+0x100>
    115c:	b501      	push	{r0, lr}
    115e:	2000      	movs	r0, #0
    1160:	f000 f806 	bl	1170 <__aeabi_idiv0>
    1164:	bd02      	pop	{r1, pc}
    1166:	46c0      	nop			; (mov r8, r8)

00001168 <__aeabi_uidivmod>:
    1168:	2900      	cmp	r1, #0
    116a:	d0f7      	beq.n	115c <__udivsi3+0x100>
    116c:	e776      	b.n	105c <__udivsi3>
    116e:	4770      	bx	lr

00001170 <__aeabi_idiv0>:
    1170:	4770      	bx	lr
    1172:	46c0      	nop			; (mov r8, r8)

00001174 <__libc_init_array>:
    1174:	b570      	push	{r4, r5, r6, lr}
    1176:	2600      	movs	r6, #0
    1178:	4d0c      	ldr	r5, [pc, #48]	; (11ac <__libc_init_array+0x38>)
    117a:	4c0d      	ldr	r4, [pc, #52]	; (11b0 <__libc_init_array+0x3c>)
    117c:	1b64      	subs	r4, r4, r5
    117e:	10a4      	asrs	r4, r4, #2
    1180:	42a6      	cmp	r6, r4
    1182:	d109      	bne.n	1198 <__libc_init_array+0x24>
    1184:	2600      	movs	r6, #0
    1186:	f000 f955 	bl	1434 <_init>
    118a:	4d0a      	ldr	r5, [pc, #40]	; (11b4 <__libc_init_array+0x40>)
    118c:	4c0a      	ldr	r4, [pc, #40]	; (11b8 <__libc_init_array+0x44>)
    118e:	1b64      	subs	r4, r4, r5
    1190:	10a4      	asrs	r4, r4, #2
    1192:	42a6      	cmp	r6, r4
    1194:	d105      	bne.n	11a2 <__libc_init_array+0x2e>
    1196:	bd70      	pop	{r4, r5, r6, pc}
    1198:	00b3      	lsls	r3, r6, #2
    119a:	58eb      	ldr	r3, [r5, r3]
    119c:	4798      	blx	r3
    119e:	3601      	adds	r6, #1
    11a0:	e7ee      	b.n	1180 <__libc_init_array+0xc>
    11a2:	00b3      	lsls	r3, r6, #2
    11a4:	58eb      	ldr	r3, [r5, r3]
    11a6:	4798      	blx	r3
    11a8:	3601      	adds	r6, #1
    11aa:	e7f2      	b.n	1192 <__libc_init_array+0x1e>
    11ac:	00001440 	.word	0x00001440
    11b0:	00001440 	.word	0x00001440
    11b4:	00001440 	.word	0x00001440
    11b8:	00001444 	.word	0x00001444

000011bc <malloc>:
    11bc:	b510      	push	{r4, lr}
    11be:	4b03      	ldr	r3, [pc, #12]	; (11cc <malloc+0x10>)
    11c0:	0001      	movs	r1, r0
    11c2:	6818      	ldr	r0, [r3, #0]
    11c4:	f000 f80e 	bl	11e4 <_malloc_r>
    11c8:	bd10      	pop	{r4, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	2000000c 	.word	0x2000000c

000011d0 <memcpy>:
    11d0:	2300      	movs	r3, #0
    11d2:	b510      	push	{r4, lr}
    11d4:	429a      	cmp	r2, r3
    11d6:	d100      	bne.n	11da <memcpy+0xa>
    11d8:	bd10      	pop	{r4, pc}
    11da:	5ccc      	ldrb	r4, [r1, r3]
    11dc:	54c4      	strb	r4, [r0, r3]
    11de:	3301      	adds	r3, #1
    11e0:	e7f8      	b.n	11d4 <memcpy+0x4>
	...

000011e4 <_malloc_r>:
    11e4:	2303      	movs	r3, #3
    11e6:	b570      	push	{r4, r5, r6, lr}
    11e8:	1ccd      	adds	r5, r1, #3
    11ea:	439d      	bics	r5, r3
    11ec:	3508      	adds	r5, #8
    11ee:	0006      	movs	r6, r0
    11f0:	2d0c      	cmp	r5, #12
    11f2:	d21e      	bcs.n	1232 <_malloc_r+0x4e>
    11f4:	250c      	movs	r5, #12
    11f6:	42a9      	cmp	r1, r5
    11f8:	d81d      	bhi.n	1236 <_malloc_r+0x52>
    11fa:	0030      	movs	r0, r6
    11fc:	f000 f862 	bl	12c4 <__malloc_lock>
    1200:	4a25      	ldr	r2, [pc, #148]	; (1298 <_malloc_r+0xb4>)
    1202:	6814      	ldr	r4, [r2, #0]
    1204:	0021      	movs	r1, r4
    1206:	2900      	cmp	r1, #0
    1208:	d119      	bne.n	123e <_malloc_r+0x5a>
    120a:	4c24      	ldr	r4, [pc, #144]	; (129c <_malloc_r+0xb8>)
    120c:	6823      	ldr	r3, [r4, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	d103      	bne.n	121a <_malloc_r+0x36>
    1212:	0030      	movs	r0, r6
    1214:	f000 f844 	bl	12a0 <_sbrk_r>
    1218:	6020      	str	r0, [r4, #0]
    121a:	0029      	movs	r1, r5
    121c:	0030      	movs	r0, r6
    121e:	f000 f83f 	bl	12a0 <_sbrk_r>
    1222:	1c43      	adds	r3, r0, #1
    1224:	d12c      	bne.n	1280 <_malloc_r+0x9c>
    1226:	230c      	movs	r3, #12
    1228:	0030      	movs	r0, r6
    122a:	6033      	str	r3, [r6, #0]
    122c:	f000 f84b 	bl	12c6 <__malloc_unlock>
    1230:	e003      	b.n	123a <_malloc_r+0x56>
    1232:	2d00      	cmp	r5, #0
    1234:	dadf      	bge.n	11f6 <_malloc_r+0x12>
    1236:	230c      	movs	r3, #12
    1238:	6033      	str	r3, [r6, #0]
    123a:	2000      	movs	r0, #0
    123c:	bd70      	pop	{r4, r5, r6, pc}
    123e:	680b      	ldr	r3, [r1, #0]
    1240:	1b5b      	subs	r3, r3, r5
    1242:	d41a      	bmi.n	127a <_malloc_r+0x96>
    1244:	2b0b      	cmp	r3, #11
    1246:	d903      	bls.n	1250 <_malloc_r+0x6c>
    1248:	600b      	str	r3, [r1, #0]
    124a:	18cc      	adds	r4, r1, r3
    124c:	6025      	str	r5, [r4, #0]
    124e:	e003      	b.n	1258 <_malloc_r+0x74>
    1250:	428c      	cmp	r4, r1
    1252:	d10e      	bne.n	1272 <_malloc_r+0x8e>
    1254:	6863      	ldr	r3, [r4, #4]
    1256:	6013      	str	r3, [r2, #0]
    1258:	0030      	movs	r0, r6
    125a:	f000 f834 	bl	12c6 <__malloc_unlock>
    125e:	0020      	movs	r0, r4
    1260:	2207      	movs	r2, #7
    1262:	300b      	adds	r0, #11
    1264:	1d23      	adds	r3, r4, #4
    1266:	4390      	bics	r0, r2
    1268:	1ac3      	subs	r3, r0, r3
    126a:	d0e7      	beq.n	123c <_malloc_r+0x58>
    126c:	425a      	negs	r2, r3
    126e:	50e2      	str	r2, [r4, r3]
    1270:	e7e4      	b.n	123c <_malloc_r+0x58>
    1272:	684b      	ldr	r3, [r1, #4]
    1274:	6063      	str	r3, [r4, #4]
    1276:	000c      	movs	r4, r1
    1278:	e7ee      	b.n	1258 <_malloc_r+0x74>
    127a:	000c      	movs	r4, r1
    127c:	6849      	ldr	r1, [r1, #4]
    127e:	e7c2      	b.n	1206 <_malloc_r+0x22>
    1280:	2303      	movs	r3, #3
    1282:	1cc4      	adds	r4, r0, #3
    1284:	439c      	bics	r4, r3
    1286:	42a0      	cmp	r0, r4
    1288:	d0e0      	beq.n	124c <_malloc_r+0x68>
    128a:	1a21      	subs	r1, r4, r0
    128c:	0030      	movs	r0, r6
    128e:	f000 f807 	bl	12a0 <_sbrk_r>
    1292:	1c43      	adds	r3, r0, #1
    1294:	d1da      	bne.n	124c <_malloc_r+0x68>
    1296:	e7c6      	b.n	1226 <_malloc_r+0x42>
    1298:	200000b8 	.word	0x200000b8
    129c:	200000bc 	.word	0x200000bc

000012a0 <_sbrk_r>:
    12a0:	2300      	movs	r3, #0
    12a2:	b570      	push	{r4, r5, r6, lr}
    12a4:	4c06      	ldr	r4, [pc, #24]	; (12c0 <_sbrk_r+0x20>)
    12a6:	0005      	movs	r5, r0
    12a8:	0008      	movs	r0, r1
    12aa:	6023      	str	r3, [r4, #0]
    12ac:	f7ff fe76 	bl	f9c <_sbrk>
    12b0:	1c43      	adds	r3, r0, #1
    12b2:	d103      	bne.n	12bc <_sbrk_r+0x1c>
    12b4:	6823      	ldr	r3, [r4, #0]
    12b6:	2b00      	cmp	r3, #0
    12b8:	d000      	beq.n	12bc <_sbrk_r+0x1c>
    12ba:	602b      	str	r3, [r5, #0]
    12bc:	bd70      	pop	{r4, r5, r6, pc}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	20000344 	.word	0x20000344

000012c4 <__malloc_lock>:
    12c4:	4770      	bx	lr

000012c6 <__malloc_unlock>:
    12c6:	4770      	bx	lr
    12c8:	0000036a 	.word	0x0000036a
    12cc:	000005b6 	.word	0x000005b6
    12d0:	000005b6 	.word	0x000005b6
    12d4:	000005b6 	.word	0x000005b6
    12d8:	000005b6 	.word	0x000005b6
    12dc:	000005b6 	.word	0x000005b6
    12e0:	000005b6 	.word	0x000005b6
    12e4:	000005b6 	.word	0x000005b6
    12e8:	000005b6 	.word	0x000005b6
    12ec:	000005b6 	.word	0x000005b6
    12f0:	000005b6 	.word	0x000005b6
    12f4:	000005b6 	.word	0x000005b6
    12f8:	000005b6 	.word	0x000005b6
    12fc:	000005b6 	.word	0x000005b6
    1300:	000005b6 	.word	0x000005b6
    1304:	000005b6 	.word	0x000005b6
    1308:	00000352 	.word	0x00000352
    130c:	000005b6 	.word	0x000005b6
    1310:	000005b6 	.word	0x000005b6
    1314:	000005b6 	.word	0x000005b6
    1318:	000005b6 	.word	0x000005b6
    131c:	000005b6 	.word	0x000005b6
    1320:	000005b6 	.word	0x000005b6
    1324:	000005b6 	.word	0x000005b6
    1328:	000005b6 	.word	0x000005b6
    132c:	000005b6 	.word	0x000005b6
    1330:	000005b6 	.word	0x000005b6
    1334:	000005b6 	.word	0x000005b6
    1338:	000005b6 	.word	0x000005b6
    133c:	000005b6 	.word	0x000005b6
    1340:	000005b6 	.word	0x000005b6
    1344:	000005b6 	.word	0x000005b6
    1348:	00000362 	.word	0x00000362
    134c:	000005b6 	.word	0x000005b6
    1350:	000005b6 	.word	0x000005b6
    1354:	000005b6 	.word	0x000005b6
    1358:	000005b6 	.word	0x000005b6
    135c:	000005b6 	.word	0x000005b6
    1360:	000005b6 	.word	0x000005b6
    1364:	000005b6 	.word	0x000005b6
    1368:	000005b6 	.word	0x000005b6
    136c:	000005b6 	.word	0x000005b6
    1370:	000005b6 	.word	0x000005b6
    1374:	000005b6 	.word	0x000005b6
    1378:	000005b6 	.word	0x000005b6
    137c:	000005b6 	.word	0x000005b6
    1380:	000005b6 	.word	0x000005b6
    1384:	000005b6 	.word	0x000005b6
    1388:	0000035a 	.word	0x0000035a
    138c:	00000372 	.word	0x00000372
    1390:	0000033a 	.word	0x0000033a
    1394:	0000034a 	.word	0x0000034a
    1398:	00000342 	.word	0x00000342
    139c:	00000002 	.word	0x00000002
    13a0:	00000003 	.word	0x00000003
    13a4:	00000004 	.word	0x00000004
    13a8:	00000005 	.word	0x00000005
    13ac:	00000006 	.word	0x00000006
    13b0:	00000007 	.word	0x00000007
    13b4:	0000000e 	.word	0x0000000e
    13b8:	0000000f 	.word	0x0000000f
    13bc:	0000000a 	.word	0x0000000a
    13c0:	0000000b 	.word	0x0000000b
    13c4:	0000ffff 	.word	0x0000ffff
    13c8:	0000ffff 	.word	0x0000ffff
    13cc:	0000ffff 	.word	0x0000ffff
    13d0:	0000ffff 	.word	0x0000ffff
    13d4:	0000ffff 	.word	0x0000ffff
    13d8:	0000ffff 	.word	0x0000ffff
    13dc:	0000ffff 	.word	0x0000ffff
    13e0:	0000ffff 	.word	0x0000ffff
    13e4:	0000ffff 	.word	0x0000ffff
    13e8:	0000ffff 	.word	0x0000ffff
    13ec:	0000093a 	.word	0x0000093a
    13f0:	00000936 	.word	0x00000936
    13f4:	00000936 	.word	0x00000936
    13f8:	0000099c 	.word	0x0000099c
    13fc:	0000099c 	.word	0x0000099c
    1400:	0000094e 	.word	0x0000094e
    1404:	00000940 	.word	0x00000940
    1408:	00000954 	.word	0x00000954
    140c:	0000098a 	.word	0x0000098a
    1410:	00000a24 	.word	0x00000a24
    1414:	00000a04 	.word	0x00000a04
    1418:	00000a04 	.word	0x00000a04
    141c:	00000a90 	.word	0x00000a90
    1420:	00000a16 	.word	0x00000a16
    1424:	00000a32 	.word	0x00000a32
    1428:	00000a08 	.word	0x00000a08
    142c:	00000a40 	.word	0x00000a40
    1430:	00000a80 	.word	0x00000a80

00001434 <_init>:
    1434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	bcf8      	pop	{r3, r4, r5, r6, r7}
    143a:	bc08      	pop	{r3}
    143c:	469e      	mov	lr, r3
    143e:	4770      	bx	lr

00001440 <__init_array_start>:
    1440:	000000b5 	.word	0x000000b5

00001444 <_fini>:
    1444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	bcf8      	pop	{r3, r4, r5, r6, r7}
    144a:	bc08      	pop	{r3}
    144c:	469e      	mov	lr, r3
    144e:	4770      	bx	lr

00001450 <__fini_array_start>:
    1450:	0000008d 	.word	0x0000008d
