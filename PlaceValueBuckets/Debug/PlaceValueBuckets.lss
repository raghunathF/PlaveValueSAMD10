
PlaceValueBuckets.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000264c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  0000264c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000774  20000080  000026d0  00020080  2**4
                  ALLOC
  3 .stack        00000404  200007f4  00002e44  00020080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   000428ba  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000058e9  00000000  00000000  000629b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000867b  00000000  00000000  000682a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000718  00000000  00000000  0007091b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c08  00000000  00000000  00071033  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018a71  00000000  00000000  00071c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001325a  00000000  00000000  0008a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000710f4  00000000  00000000  0009d906  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011a0  00000000  00000000  0010e9fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 0b 00 20 d9 20 00 00 d5 20 00 00 d5 20 00 00     ... . ... ... ..
	...
      2c:	d5 20 00 00 00 00 00 00 00 00 00 00 d5 20 00 00     . ........... ..
      3c:	d5 20 00 00 d5 20 00 00 d5 20 00 00 d5 20 00 00     . ... ... ... ..
      4c:	d5 20 00 00 d5 20 00 00 d5 20 00 00 11 07 00 00     . ... ... ......
      5c:	00 00 00 00 d5 20 00 00 35 10 00 00 45 10 00 00     ..... ..5...E...
      6c:	55 10 00 00 d5 20 00 00 51 01 00 00 61 01 00 00     U.... ..Q...a...
      7c:	4d 06 00 00 d5 20 00 00 d5 20 00 00 d5 20 00 00     M.... ... ... ..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000080 	.word	0x20000080
      ac:	00000000 	.word	0x00000000
      b0:	0000264c 	.word	0x0000264c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000084 	.word	0x20000084
      e0:	0000264c 	.word	0x0000264c
      e4:	0000264c 	.word	0x0000264c
      e8:	00000000 	.word	0x00000000

000000ec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
      ee:	0080      	lsls	r0, r0, #2
      f0:	4b16      	ldr	r3, [pc, #88]	; (14c <_tc_interrupt_handler+0x60>)
      f2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
      f4:	6823      	ldr	r3, [r4, #0]
      f6:	7b9d      	ldrb	r5, [r3, #14]
      f8:	7e22      	ldrb	r2, [r4, #24]
      fa:	7e63      	ldrb	r3, [r4, #25]
      fc:	4013      	ands	r3, r2
      fe:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     100:	07eb      	lsls	r3, r5, #31
     102:	d406      	bmi.n	112 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     104:	07ab      	lsls	r3, r5, #30
     106:	d40b      	bmi.n	120 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     108:	06eb      	lsls	r3, r5, #27
     10a:	d410      	bmi.n	12e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     10c:	06ab      	lsls	r3, r5, #26
     10e:	d415      	bmi.n	13c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     110:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     112:	0020      	movs	r0, r4
     114:	68a3      	ldr	r3, [r4, #8]
     116:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     118:	2301      	movs	r3, #1
     11a:	6822      	ldr	r2, [r4, #0]
     11c:	7393      	strb	r3, [r2, #14]
     11e:	e7f1      	b.n	104 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     120:	0020      	movs	r0, r4
     122:	68e3      	ldr	r3, [r4, #12]
     124:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     126:	2302      	movs	r3, #2
     128:	6822      	ldr	r2, [r4, #0]
     12a:	7393      	strb	r3, [r2, #14]
     12c:	e7ec      	b.n	108 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     12e:	0020      	movs	r0, r4
     130:	6923      	ldr	r3, [r4, #16]
     132:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     134:	2310      	movs	r3, #16
     136:	6822      	ldr	r2, [r4, #0]
     138:	7393      	strb	r3, [r2, #14]
     13a:	e7e7      	b.n	10c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     13c:	0020      	movs	r0, r4
     13e:	6963      	ldr	r3, [r4, #20]
     140:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     142:	6823      	ldr	r3, [r4, #0]
     144:	2220      	movs	r2, #32
     146:	739a      	strb	r2, [r3, #14]
}
     148:	e7e2      	b.n	110 <_tc_interrupt_handler+0x24>
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	20000154 	.word	0x20000154

00000150 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     150:	b510      	push	{r4, lr}
     152:	2000      	movs	r0, #0
     154:	4b01      	ldr	r3, [pc, #4]	; (15c <TC1_Handler+0xc>)
     156:	4798      	blx	r3
     158:	bd10      	pop	{r4, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	000000ed 	.word	0x000000ed

00000160 <TC2_Handler>:
     160:	b510      	push	{r4, lr}
     162:	2001      	movs	r0, #1
     164:	4b01      	ldr	r3, [pc, #4]	; (16c <TC2_Handler+0xc>)
     166:	4798      	blx	r3
     168:	bd10      	pop	{r4, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	000000ed 	.word	0x000000ed

00000170 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     170:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     172:	2000      	movs	r0, #0
     174:	4b08      	ldr	r3, [pc, #32]	; (198 <delay_init+0x28>)
     176:	4798      	blx	r3
     178:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     17a:	4c08      	ldr	r4, [pc, #32]	; (19c <delay_init+0x2c>)
     17c:	21fa      	movs	r1, #250	; 0xfa
     17e:	0089      	lsls	r1, r1, #2
     180:	47a0      	blx	r4
     182:	4b07      	ldr	r3, [pc, #28]	; (1a0 <delay_init+0x30>)
     184:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     186:	4907      	ldr	r1, [pc, #28]	; (1a4 <delay_init+0x34>)
     188:	0028      	movs	r0, r5
     18a:	47a0      	blx	r4
     18c:	4b06      	ldr	r3, [pc, #24]	; (1a8 <delay_init+0x38>)
     18e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     190:	2205      	movs	r2, #5
     192:	4b06      	ldr	r3, [pc, #24]	; (1ac <delay_init+0x3c>)
     194:	601a      	str	r2, [r3, #0]
}
     196:	bd70      	pop	{r4, r5, r6, pc}
     198:	00001e65 	.word	0x00001e65
     19c:	00002239 	.word	0x00002239
     1a0:	20000000 	.word	0x20000000
     1a4:	000f4240 	.word	0x000f4240
     1a8:	20000004 	.word	0x20000004
     1ac:	e000e010 	.word	0xe000e010

000001b0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1b0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1b2:	4b08      	ldr	r3, [pc, #32]	; (1d4 <delay_cycles_ms+0x24>)
     1b4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     1b6:	4a08      	ldr	r2, [pc, #32]	; (1d8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     1b8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1ba:	2180      	movs	r1, #128	; 0x80
     1bc:	0249      	lsls	r1, r1, #9
	while (n--) {
     1be:	3801      	subs	r0, #1
     1c0:	d307      	bcc.n	1d2 <delay_cycles_ms+0x22>
	if (n > 0) {
     1c2:	2c00      	cmp	r4, #0
     1c4:	d0fb      	beq.n	1be <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     1c6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     1c8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1ca:	6813      	ldr	r3, [r2, #0]
     1cc:	420b      	tst	r3, r1
     1ce:	d0fc      	beq.n	1ca <delay_cycles_ms+0x1a>
     1d0:	e7f5      	b.n	1be <delay_cycles_ms+0xe>
	}
}
     1d2:	bd30      	pop	{r4, r5, pc}
     1d4:	20000000 	.word	0x20000000
     1d8:	e000e010 	.word	0xe000e010

000001dc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1dc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1de:	2200      	movs	r2, #0
     1e0:	2300      	movs	r3, #0
     1e2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1e4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1e6:	2100      	movs	r1, #0
     1e8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1ea:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1ec:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1ee:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1f0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1f2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1f4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1f6:	24c0      	movs	r4, #192	; 0xc0
     1f8:	0164      	lsls	r4, r4, #5
     1fa:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1fc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1fe:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     200:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     202:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     204:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     206:	242a      	movs	r4, #42	; 0x2a
     208:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     20a:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     20c:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     20e:	3c06      	subs	r4, #6
     210:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     212:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     214:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     216:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     218:	232b      	movs	r3, #43	; 0x2b
     21a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     21c:	3301      	adds	r3, #1
     21e:	54c1      	strb	r1, [r0, r3]
}
     220:	bd10      	pop	{r4, pc}
	...

00000224 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	46d6      	mov	lr, sl
     228:	464f      	mov	r7, r9
     22a:	4646      	mov	r6, r8
     22c:	b5c0      	push	{r6, r7, lr}
     22e:	b096      	sub	sp, #88	; 0x58
     230:	0007      	movs	r7, r0
     232:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     234:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     236:	4ac6      	ldr	r2, [pc, #792]	; (550 <STACK_SIZE+0x150>)
     238:	6a10      	ldr	r0, [r2, #32]
     23a:	2380      	movs	r3, #128	; 0x80
     23c:	005b      	lsls	r3, r3, #1
     23e:	4303      	orrs	r3, r0
     240:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     242:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     244:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     246:	07db      	lsls	r3, r3, #31
     248:	d505      	bpl.n	256 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     24a:	b016      	add	sp, #88	; 0x58
     24c:	bc1c      	pop	{r2, r3, r4}
     24e:	4690      	mov	r8, r2
     250:	4699      	mov	r9, r3
     252:	46a2      	mov	sl, r4
     254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     256:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     258:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     25a:	079b      	lsls	r3, r3, #30
     25c:	d4f5      	bmi.n	24a <adc_init+0x26>
	module_inst->reference = config->reference;
     25e:	7873      	ldrb	r3, [r6, #1]
     260:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     262:	2b00      	cmp	r3, #0
     264:	d104      	bne.n	270 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     266:	4abb      	ldr	r2, [pc, #748]	; (554 <STACK_SIZE+0x154>)
     268:	6c13      	ldr	r3, [r2, #64]	; 0x40
     26a:	2104      	movs	r1, #4
     26c:	430b      	orrs	r3, r1
     26e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     270:	2300      	movs	r3, #0
     272:	60bb      	str	r3, [r7, #8]
     274:	60fb      	str	r3, [r7, #12]
     276:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     278:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     27a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     27c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     27e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     280:	4bb5      	ldr	r3, [pc, #724]	; (558 <STACK_SIZE+0x158>)
     282:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     284:	232a      	movs	r3, #42	; 0x2a
     286:	5cf3      	ldrb	r3, [r6, r3]
     288:	2b00      	cmp	r3, #0
     28a:	d105      	bne.n	298 <adc_init+0x74>
     28c:	7d33      	ldrb	r3, [r6, #20]
     28e:	2b00      	cmp	r3, #0
     290:	d102      	bne.n	298 <adc_init+0x74>
		module_inst->software_trigger = true;
     292:	3301      	adds	r3, #1
     294:	777b      	strb	r3, [r7, #29]
     296:	e001      	b.n	29c <adc_init+0x78>
		module_inst->software_trigger = false;
     298:	2300      	movs	r3, #0
     29a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     29c:	683b      	ldr	r3, [r7, #0]
     29e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     2a0:	7833      	ldrb	r3, [r6, #0]
     2a2:	466a      	mov	r2, sp
     2a4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     2a6:	4669      	mov	r1, sp
     2a8:	2013      	movs	r0, #19
     2aa:	4bac      	ldr	r3, [pc, #688]	; (55c <STACK_SIZE+0x15c>)
     2ac:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     2ae:	2013      	movs	r0, #19
     2b0:	4bab      	ldr	r3, [pc, #684]	; (560 <STACK_SIZE+0x160>)
     2b2:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     2b4:	232c      	movs	r3, #44	; 0x2c
     2b6:	5cf2      	ldrb	r2, [r6, r3]
     2b8:	2a00      	cmp	r2, #0
     2ba:	d054      	beq.n	366 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     2bc:	3b01      	subs	r3, #1
     2be:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     2c0:	7b33      	ldrb	r3, [r6, #12]
     2c2:	18eb      	adds	r3, r5, r3
     2c4:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     2c6:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     2c8:	b2c9      	uxtb	r1, r1
     2ca:	428b      	cmp	r3, r1
     2cc:	d221      	bcs.n	312 <adc_init+0xee>
     2ce:	1952      	adds	r2, r2, r5
     2d0:	b2d3      	uxtb	r3, r2
     2d2:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     2d4:	4ba3      	ldr	r3, [pc, #652]	; (564 <STACK_SIZE+0x164>)
     2d6:	469a      	mov	sl, r3
     2d8:	e003      	b.n	2e2 <adc_init+0xbe>
			offset++;
     2da:	3501      	adds	r5, #1
     2dc:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     2de:	454d      	cmp	r5, r9
     2e0:	d017      	beq.n	312 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2e2:	240f      	movs	r4, #15
     2e4:	402c      	ands	r4, r5
     2e6:	7b33      	ldrb	r3, [r6, #12]
     2e8:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     2ea:	2250      	movs	r2, #80	; 0x50
     2ec:	499e      	ldr	r1, [pc, #632]	; (568 <STACK_SIZE+0x168>)
     2ee:	a802      	add	r0, sp, #8
     2f0:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2f2:	2c09      	cmp	r4, #9
     2f4:	d8f1      	bhi.n	2da <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f6:	00a4      	lsls	r4, r4, #2
     2f8:	ab02      	add	r3, sp, #8
     2fa:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2fc:	a901      	add	r1, sp, #4
     2fe:	2300      	movs	r3, #0
     300:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     302:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     304:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     306:	3301      	adds	r3, #1
     308:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     30a:	b2c0      	uxtb	r0, r0
     30c:	4b97      	ldr	r3, [pc, #604]	; (56c <STACK_SIZE+0x16c>)
     30e:	4798      	blx	r3
     310:	e7e3      	b.n	2da <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     312:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     314:	2250      	movs	r2, #80	; 0x50
     316:	4994      	ldr	r1, [pc, #592]	; (568 <STACK_SIZE+0x168>)
     318:	a802      	add	r0, sp, #8
     31a:	4b92      	ldr	r3, [pc, #584]	; (564 <STACK_SIZE+0x164>)
     31c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     31e:	2c09      	cmp	r4, #9
     320:	d913      	bls.n	34a <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     322:	7d73      	ldrb	r3, [r6, #21]
     324:	009b      	lsls	r3, r3, #2
     326:	b2db      	uxtb	r3, r3
     328:	4642      	mov	r2, r8
     32a:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     32c:	7db3      	ldrb	r3, [r6, #22]
     32e:	01db      	lsls	r3, r3, #7
     330:	7872      	ldrb	r2, [r6, #1]
     332:	4313      	orrs	r3, r2
     334:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     336:	4642      	mov	r2, r8
     338:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     33a:	7933      	ldrb	r3, [r6, #4]
     33c:	2b34      	cmp	r3, #52	; 0x34
     33e:	d900      	bls.n	342 <adc_init+0x11e>
     340:	e17b      	b.n	63a <STACK_SIZE+0x23a>
     342:	009b      	lsls	r3, r3, #2
     344:	4a8a      	ldr	r2, [pc, #552]	; (570 <STACK_SIZE+0x170>)
     346:	58d3      	ldr	r3, [r2, r3]
     348:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     34a:	00a4      	lsls	r4, r4, #2
     34c:	ab02      	add	r3, sp, #8
     34e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     350:	a901      	add	r1, sp, #4
     352:	2300      	movs	r3, #0
     354:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     356:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     358:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     35a:	3301      	adds	r3, #1
     35c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     35e:	b2c0      	uxtb	r0, r0
     360:	4b82      	ldr	r3, [pc, #520]	; (56c <STACK_SIZE+0x16c>)
     362:	4798      	blx	r3
     364:	e7dd      	b.n	322 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     366:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     368:	2250      	movs	r2, #80	; 0x50
     36a:	497f      	ldr	r1, [pc, #508]	; (568 <STACK_SIZE+0x168>)
     36c:	a802      	add	r0, sp, #8
     36e:	4b7d      	ldr	r3, [pc, #500]	; (564 <STACK_SIZE+0x164>)
     370:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     372:	2c09      	cmp	r4, #9
     374:	d915      	bls.n	3a2 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     376:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     378:	2250      	movs	r2, #80	; 0x50
     37a:	497b      	ldr	r1, [pc, #492]	; (568 <STACK_SIZE+0x168>)
     37c:	a802      	add	r0, sp, #8
     37e:	4b79      	ldr	r3, [pc, #484]	; (564 <STACK_SIZE+0x164>)
     380:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     382:	2c09      	cmp	r4, #9
     384:	d8cd      	bhi.n	322 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     386:	00a4      	lsls	r4, r4, #2
     388:	ab02      	add	r3, sp, #8
     38a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     38c:	a901      	add	r1, sp, #4
     38e:	2300      	movs	r3, #0
     390:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     392:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     394:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     396:	3301      	adds	r3, #1
     398:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     39a:	b2c0      	uxtb	r0, r0
     39c:	4b73      	ldr	r3, [pc, #460]	; (56c <STACK_SIZE+0x16c>)
     39e:	4798      	blx	r3
     3a0:	e7bf      	b.n	322 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3a2:	00a4      	lsls	r4, r4, #2
     3a4:	ab02      	add	r3, sp, #8
     3a6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3a8:	a901      	add	r1, sp, #4
     3aa:	2300      	movs	r3, #0
     3ac:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3ae:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3b0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3b2:	3301      	adds	r3, #1
     3b4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3b6:	b2c0      	uxtb	r0, r0
     3b8:	4b6c      	ldr	r3, [pc, #432]	; (56c <STACK_SIZE+0x16c>)
     3ba:	4798      	blx	r3
     3bc:	e7db      	b.n	376 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     3be:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     3c0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     3c2:	2102      	movs	r1, #2
     3c4:	e01a      	b.n	3fc <adc_init+0x1d8>
		adjres = config->divide_result;
     3c6:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     3c8:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     3ca:	2410      	movs	r4, #16
     3cc:	e016      	b.n	3fc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3ce:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     3d0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3d2:	2101      	movs	r1, #1
     3d4:	e012      	b.n	3fc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3d6:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     3d8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3da:	2100      	movs	r1, #0
     3dc:	e00e      	b.n	3fc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3de:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     3e0:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     3e2:	2100      	movs	r1, #0
     3e4:	e00a      	b.n	3fc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3e6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     3e8:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     3ea:	2100      	movs	r1, #0
     3ec:	e006      	b.n	3fc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ee:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     3f0:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3f2:	2100      	movs	r1, #0
     3f4:	e002      	b.n	3fc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3f6:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3fa:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3fc:	0109      	lsls	r1, r1, #4
     3fe:	2270      	movs	r2, #112	; 0x70
     400:	400a      	ands	r2, r1
     402:	4313      	orrs	r3, r2
     404:	4642      	mov	r2, r8
     406:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     408:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     40a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     40c:	2b3f      	cmp	r3, #63	; 0x3f
     40e:	d900      	bls.n	412 <STACK_SIZE+0x12>
     410:	e71b      	b.n	24a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     412:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     414:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     416:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     418:	b25b      	sxtb	r3, r3
     41a:	2b00      	cmp	r3, #0
     41c:	dbfb      	blt.n	416 <STACK_SIZE+0x16>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     41e:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     420:	8872      	ldrh	r2, [r6, #2]
     422:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     424:	2224      	movs	r2, #36	; 0x24
     426:	5cb2      	ldrb	r2, [r6, r2]
     428:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     42a:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     42c:	7d32      	ldrb	r2, [r6, #20]
     42e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     430:	4313      	orrs	r3, r2
     432:	7cb2      	ldrb	r2, [r6, #18]
     434:	0052      	lsls	r2, r2, #1
     436:	4313      	orrs	r3, r2
     438:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     43a:	4642      	mov	r2, r8
     43c:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     43e:	7e33      	ldrb	r3, [r6, #24]
     440:	2b00      	cmp	r3, #0
     442:	d020      	beq.n	486 <STACK_SIZE+0x86>
		switch (resolution) {
     444:	2c10      	cmp	r4, #16
     446:	d100      	bne.n	44a <STACK_SIZE+0x4a>
     448:	e0d9      	b.n	5fe <STACK_SIZE+0x1fe>
     44a:	d800      	bhi.n	44e <STACK_SIZE+0x4e>
     44c:	e098      	b.n	580 <STACK_SIZE+0x180>
     44e:	2c20      	cmp	r4, #32
     450:	d100      	bne.n	454 <STACK_SIZE+0x54>
     452:	e0b6      	b.n	5c2 <STACK_SIZE+0x1c2>
     454:	2c30      	cmp	r4, #48	; 0x30
     456:	d116      	bne.n	486 <STACK_SIZE+0x86>
			if (config->differential_mode &&
     458:	7cf2      	ldrb	r2, [r6, #19]
     45a:	2a00      	cmp	r2, #0
     45c:	d00a      	beq.n	474 <STACK_SIZE+0x74>
					(config->window.window_lower_value > 127 ||
     45e:	69f2      	ldr	r2, [r6, #28]
     460:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     462:	2017      	movs	r0, #23
			if (config->differential_mode &&
     464:	2aff      	cmp	r2, #255	; 0xff
     466:	d900      	bls.n	46a <STACK_SIZE+0x6a>
     468:	e6ef      	b.n	24a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     46a:	6a32      	ldr	r2, [r6, #32]
     46c:	3280      	adds	r2, #128	; 0x80
     46e:	2aff      	cmp	r2, #255	; 0xff
     470:	d900      	bls.n	474 <STACK_SIZE+0x74>
     472:	e6ea      	b.n	24a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     474:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     476:	69f2      	ldr	r2, [r6, #28]
     478:	2aff      	cmp	r2, #255	; 0xff
     47a:	dd00      	ble.n	47e <STACK_SIZE+0x7e>
     47c:	e6e5      	b.n	24a <adc_init+0x26>
     47e:	6a32      	ldr	r2, [r6, #32]
     480:	2aff      	cmp	r2, #255	; 0xff
     482:	dd00      	ble.n	486 <STACK_SIZE+0x86>
     484:	e6e1      	b.n	24a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     486:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     488:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     48a:	b252      	sxtb	r2, r2
     48c:	2a00      	cmp	r2, #0
     48e:	dbfb      	blt.n	488 <STACK_SIZE+0x88>
	adc_module->WINCTRL.reg = config->window.window_mode;
     490:	4642      	mov	r2, r8
     492:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     494:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     496:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     498:	b25b      	sxtb	r3, r3
     49a:	2b00      	cmp	r3, #0
     49c:	dbfb      	blt.n	496 <STACK_SIZE+0x96>
	adc_module->WINLT.reg =
     49e:	8bb3      	ldrh	r3, [r6, #28]
     4a0:	4642      	mov	r2, r8
     4a2:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     4a4:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4a6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4a8:	b25b      	sxtb	r3, r3
     4aa:	2b00      	cmp	r3, #0
     4ac:	dbfb      	blt.n	4a6 <STACK_SIZE+0xa6>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4ae:	8c33      	ldrh	r3, [r6, #32]
     4b0:	4642      	mov	r2, r8
     4b2:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     4b4:	232c      	movs	r3, #44	; 0x2c
     4b6:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     4b8:	2b00      	cmp	r3, #0
     4ba:	d005      	beq.n	4c8 <STACK_SIZE+0xc8>
		inputs_to_scan--;
     4bc:	3b01      	subs	r3, #1
     4be:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     4c0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4c2:	2b0f      	cmp	r3, #15
     4c4:	d900      	bls.n	4c8 <STACK_SIZE+0xc8>
     4c6:	e6c0      	b.n	24a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     4c8:	222b      	movs	r2, #43	; 0x2b
     4ca:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     4cc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4ce:	290f      	cmp	r1, #15
     4d0:	d900      	bls.n	4d4 <STACK_SIZE+0xd4>
     4d2:	e6ba      	b.n	24a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4d4:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4d6:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     4d8:	b252      	sxtb	r2, r2
     4da:	2a00      	cmp	r2, #0
     4dc:	dbfb      	blt.n	4d6 <STACK_SIZE+0xd6>
			config->negative_input |
     4de:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     4e0:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     4e2:	4302      	orrs	r2, r0
     4e4:	68b0      	ldr	r0, [r6, #8]
     4e6:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     4e8:	0509      	lsls	r1, r1, #20
			config->negative_input |
     4ea:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4ec:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4ee:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     4f0:	4642      	mov	r2, r8
     4f2:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4f4:	232a      	movs	r3, #42	; 0x2a
     4f6:	5cf3      	ldrb	r3, [r6, r3]
     4f8:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4fa:	230f      	movs	r3, #15
     4fc:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4fe:	3315      	adds	r3, #21
     500:	5cf3      	ldrb	r3, [r6, r3]
     502:	2b00      	cmp	r3, #0
     504:	d012      	beq.n	52c <STACK_SIZE+0x12c>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     506:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     508:	4a1a      	ldr	r2, [pc, #104]	; (574 <STACK_SIZE+0x174>)
			return STATUS_ERR_INVALID_ARG;
     50a:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     50c:	4293      	cmp	r3, r2
     50e:	d900      	bls.n	512 <STACK_SIZE+0x112>
     510:	e69b      	b.n	24a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     512:	4642      	mov	r2, r8
     514:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     516:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     518:	2380      	movs	r3, #128	; 0x80
     51a:	011b      	lsls	r3, r3, #4
     51c:	18d3      	adds	r3, r2, r3
     51e:	4915      	ldr	r1, [pc, #84]	; (574 <STACK_SIZE+0x174>)
     520:	b29b      	uxth	r3, r3
     522:	428b      	cmp	r3, r1
     524:	d900      	bls.n	528 <STACK_SIZE+0x128>
     526:	e690      	b.n	24a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     528:	4643      	mov	r3, r8
     52a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     52c:	4b12      	ldr	r3, [pc, #72]	; (578 <STACK_SIZE+0x178>)
     52e:	681b      	ldr	r3, [r3, #0]
     530:	015b      	lsls	r3, r3, #5
     532:	22e0      	movs	r2, #224	; 0xe0
     534:	00d2      	lsls	r2, r2, #3
     536:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     538:	4a10      	ldr	r2, [pc, #64]	; (57c <STACK_SIZE+0x17c>)
     53a:	6851      	ldr	r1, [r2, #4]
     53c:	0149      	lsls	r1, r1, #5
     53e:	6812      	ldr	r2, [r2, #0]
     540:	0ed2      	lsrs	r2, r2, #27
     542:	430a      	orrs	r2, r1
     544:	b2d2      	uxtb	r2, r2
			) |
     546:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     548:	4642      	mov	r2, r8
     54a:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     54c:	2000      	movs	r0, #0
     54e:	e67c      	b.n	24a <adc_init+0x26>
     550:	40000400 	.word	0x40000400
     554:	40000800 	.word	0x40000800
     558:	2000015c 	.word	0x2000015c
     55c:	00001f7d 	.word	0x00001f7d
     560:	00001ef1 	.word	0x00001ef1
     564:	000023ad 	.word	0x000023ad
     568:	00002588 	.word	0x00002588
     56c:	00002075 	.word	0x00002075
     570:	000024b4 	.word	0x000024b4
     574:	00000fff 	.word	0x00000fff
     578:	00806024 	.word	0x00806024
     57c:	00806020 	.word	0x00806020
		switch (resolution) {
     580:	2c00      	cmp	r4, #0
     582:	d000      	beq.n	586 <STACK_SIZE+0x186>
     584:	e77f      	b.n	486 <STACK_SIZE+0x86>
			if (config->differential_mode &&
     586:	7cf2      	ldrb	r2, [r6, #19]
     588:	2a00      	cmp	r2, #0
     58a:	d00f      	beq.n	5ac <STACK_SIZE+0x1ac>
					(config->window.window_lower_value > 2047 ||
     58c:	69f2      	ldr	r2, [r6, #28]
     58e:	2180      	movs	r1, #128	; 0x80
     590:	0109      	lsls	r1, r1, #4
     592:	468c      	mov	ip, r1
     594:	4462      	add	r2, ip
			if (config->differential_mode &&
     596:	492a      	ldr	r1, [pc, #168]	; (640 <STACK_SIZE+0x240>)
				return STATUS_ERR_INVALID_ARG;
     598:	2017      	movs	r0, #23
			if (config->differential_mode &&
     59a:	428a      	cmp	r2, r1
     59c:	d900      	bls.n	5a0 <STACK_SIZE+0x1a0>
     59e:	e654      	b.n	24a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     5a0:	6a32      	ldr	r2, [r6, #32]
     5a2:	4462      	add	r2, ip
     5a4:	4926      	ldr	r1, [pc, #152]	; (640 <STACK_SIZE+0x240>)
     5a6:	428a      	cmp	r2, r1
     5a8:	d900      	bls.n	5ac <STACK_SIZE+0x1ac>
     5aa:	e64e      	b.n	24a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     5ac:	4a24      	ldr	r2, [pc, #144]	; (640 <STACK_SIZE+0x240>)
				return STATUS_ERR_INVALID_ARG;
     5ae:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5b0:	69f1      	ldr	r1, [r6, #28]
     5b2:	4291      	cmp	r1, r2
     5b4:	dd00      	ble.n	5b8 <STACK_SIZE+0x1b8>
     5b6:	e648      	b.n	24a <adc_init+0x26>
     5b8:	6a31      	ldr	r1, [r6, #32]
     5ba:	4291      	cmp	r1, r2
     5bc:	dd00      	ble.n	5c0 <STACK_SIZE+0x1c0>
     5be:	e644      	b.n	24a <adc_init+0x26>
     5c0:	e761      	b.n	486 <STACK_SIZE+0x86>
			if (config->differential_mode &&
     5c2:	7cf2      	ldrb	r2, [r6, #19]
     5c4:	2a00      	cmp	r2, #0
     5c6:	d00f      	beq.n	5e8 <STACK_SIZE+0x1e8>
					(config->window.window_lower_value > 511 ||
     5c8:	69f2      	ldr	r2, [r6, #28]
     5ca:	2180      	movs	r1, #128	; 0x80
     5cc:	0089      	lsls	r1, r1, #2
     5ce:	468c      	mov	ip, r1
     5d0:	4462      	add	r2, ip
			if (config->differential_mode &&
     5d2:	491c      	ldr	r1, [pc, #112]	; (644 <STACK_SIZE+0x244>)
				return STATUS_ERR_INVALID_ARG;
     5d4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5d6:	428a      	cmp	r2, r1
     5d8:	d900      	bls.n	5dc <STACK_SIZE+0x1dc>
     5da:	e636      	b.n	24a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     5dc:	6a32      	ldr	r2, [r6, #32]
     5de:	4462      	add	r2, ip
     5e0:	4918      	ldr	r1, [pc, #96]	; (644 <STACK_SIZE+0x244>)
     5e2:	428a      	cmp	r2, r1
     5e4:	d900      	bls.n	5e8 <STACK_SIZE+0x1e8>
     5e6:	e630      	b.n	24a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     5e8:	4a16      	ldr	r2, [pc, #88]	; (644 <STACK_SIZE+0x244>)
				return STATUS_ERR_INVALID_ARG;
     5ea:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     5ec:	69f1      	ldr	r1, [r6, #28]
     5ee:	4291      	cmp	r1, r2
     5f0:	dd00      	ble.n	5f4 <STACK_SIZE+0x1f4>
     5f2:	e62a      	b.n	24a <adc_init+0x26>
     5f4:	6a31      	ldr	r1, [r6, #32]
     5f6:	4291      	cmp	r1, r2
     5f8:	dd00      	ble.n	5fc <STACK_SIZE+0x1fc>
     5fa:	e626      	b.n	24a <adc_init+0x26>
     5fc:	e743      	b.n	486 <STACK_SIZE+0x86>
			if (config->differential_mode &&
     5fe:	7cf2      	ldrb	r2, [r6, #19]
     600:	2a00      	cmp	r2, #0
     602:	d00f      	beq.n	624 <STACK_SIZE+0x224>
					(config->window.window_lower_value > 32767 ||
     604:	69f2      	ldr	r2, [r6, #28]
     606:	2180      	movs	r1, #128	; 0x80
     608:	0209      	lsls	r1, r1, #8
     60a:	468c      	mov	ip, r1
     60c:	4462      	add	r2, ip
			if (config->differential_mode &&
     60e:	490e      	ldr	r1, [pc, #56]	; (648 <STACK_SIZE+0x248>)
				return STATUS_ERR_INVALID_ARG;
     610:	2017      	movs	r0, #23
			if (config->differential_mode &&
     612:	428a      	cmp	r2, r1
     614:	d900      	bls.n	618 <STACK_SIZE+0x218>
     616:	e618      	b.n	24a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     618:	6a32      	ldr	r2, [r6, #32]
     61a:	4462      	add	r2, ip
     61c:	490a      	ldr	r1, [pc, #40]	; (648 <STACK_SIZE+0x248>)
     61e:	428a      	cmp	r2, r1
     620:	d900      	bls.n	624 <STACK_SIZE+0x224>
     622:	e612      	b.n	24a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     624:	4a08      	ldr	r2, [pc, #32]	; (648 <STACK_SIZE+0x248>)
				return STATUS_ERR_INVALID_ARG;
     626:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     628:	69f1      	ldr	r1, [r6, #28]
     62a:	4291      	cmp	r1, r2
     62c:	dd00      	ble.n	630 <STACK_SIZE+0x230>
     62e:	e60c      	b.n	24a <adc_init+0x26>
     630:	6a31      	ldr	r1, [r6, #32]
     632:	4291      	cmp	r1, r2
     634:	dd00      	ble.n	638 <STACK_SIZE+0x238>
     636:	e608      	b.n	24a <adc_init+0x26>
     638:	e725      	b.n	486 <STACK_SIZE+0x86>
		return STATUS_ERR_INVALID_ARG;
     63a:	2017      	movs	r0, #23
     63c:	e605      	b.n	24a <adc_init+0x26>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	00000fff 	.word	0x00000fff
     644:	000003ff 	.word	0x000003ff
     648:	0000ffff 	.word	0x0000ffff

0000064c <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     64c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     64e:	4b2f      	ldr	r3, [pc, #188]	; (70c <ADC_Handler+0xc0>)
     650:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     652:	682b      	ldr	r3, [r5, #0]
     654:	7e1a      	ldrb	r2, [r3, #24]
     656:	7ddc      	ldrb	r4, [r3, #23]
     658:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     65a:	07e2      	lsls	r2, r4, #31
     65c:	d416      	bmi.n	68c <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     65e:	0763      	lsls	r3, r4, #29
     660:	d508      	bpl.n	674 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     662:	2304      	movs	r3, #4
     664:	682a      	ldr	r2, [r5, #0]
     666:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     668:	7eeb      	ldrb	r3, [r5, #27]
     66a:	079b      	lsls	r3, r3, #30
     66c:	d502      	bpl.n	674 <ADC_Handler+0x28>
     66e:	7eab      	ldrb	r3, [r5, #26]
     670:	079b      	lsls	r3, r3, #30
     672:	d442      	bmi.n	6fa <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     674:	07a3      	lsls	r3, r4, #30
     676:	d508      	bpl.n	68a <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     678:	2302      	movs	r3, #2
     67a:	682a      	ldr	r2, [r5, #0]
     67c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     67e:	7eeb      	ldrb	r3, [r5, #27]
     680:	075b      	lsls	r3, r3, #29
     682:	d502      	bpl.n	68a <ADC_Handler+0x3e>
     684:	7eab      	ldrb	r3, [r5, #26]
     686:	075b      	lsls	r3, r3, #29
     688:	d43b      	bmi.n	702 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     68a:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     68c:	2201      	movs	r2, #1
     68e:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     690:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     692:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     694:	b25b      	sxtb	r3, r3
     696:	2b00      	cmp	r3, #0
     698:	dbfb      	blt.n	692 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     69a:	6969      	ldr	r1, [r5, #20]
     69c:	1c8b      	adds	r3, r1, #2
     69e:	616b      	str	r3, [r5, #20]
     6a0:	8b53      	ldrh	r3, [r2, #26]
     6a2:	b29b      	uxth	r3, r3
     6a4:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     6a6:	8b2b      	ldrh	r3, [r5, #24]
     6a8:	3b01      	subs	r3, #1
     6aa:	b29b      	uxth	r3, r3
     6ac:	832b      	strh	r3, [r5, #24]
     6ae:	2b00      	cmp	r3, #0
     6b0:	d011      	beq.n	6d6 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     6b2:	7f6b      	ldrb	r3, [r5, #29]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d0d2      	beq.n	65e <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     6b8:	682a      	ldr	r2, [r5, #0]
     6ba:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     6bc:	b25b      	sxtb	r3, r3
     6be:	2b00      	cmp	r3, #0
     6c0:	dbfb      	blt.n	6ba <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6c2:	7b13      	ldrb	r3, [r2, #12]
     6c4:	2102      	movs	r1, #2
     6c6:	430b      	orrs	r3, r1
     6c8:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     6ca:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6cc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     6ce:	b25b      	sxtb	r3, r3
     6d0:	2b00      	cmp	r3, #0
     6d2:	dbfb      	blt.n	6cc <ADC_Handler+0x80>
     6d4:	e7c3      	b.n	65e <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6d6:	2301      	movs	r3, #1
     6d8:	682a      	ldr	r2, [r5, #0]
     6da:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     6dc:	7f2b      	ldrb	r3, [r5, #28]
     6de:	2b05      	cmp	r3, #5
     6e0:	d1bd      	bne.n	65e <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     6e2:	2300      	movs	r3, #0
     6e4:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     6e6:	7eeb      	ldrb	r3, [r5, #27]
     6e8:	07db      	lsls	r3, r3, #31
     6ea:	d5b8      	bpl.n	65e <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     6ec:	7eab      	ldrb	r3, [r5, #26]
     6ee:	07db      	lsls	r3, r3, #31
     6f0:	d5b5      	bpl.n	65e <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     6f2:	0028      	movs	r0, r5
     6f4:	68ab      	ldr	r3, [r5, #8]
     6f6:	4798      	blx	r3
     6f8:	e7b1      	b.n	65e <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     6fa:	0028      	movs	r0, r5
     6fc:	68eb      	ldr	r3, [r5, #12]
     6fe:	4798      	blx	r3
     700:	e7b8      	b.n	674 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     702:	692b      	ldr	r3, [r5, #16]
     704:	0028      	movs	r0, r5
     706:	4798      	blx	r3
}
     708:	e7bf      	b.n	68a <ADC_Handler+0x3e>
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	2000015c 	.word	0x2000015c

00000710 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     710:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     712:	4b26      	ldr	r3, [pc, #152]	; (7ac <DMAC_Handler+0x9c>)
     714:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     716:	4926      	ldr	r1, [pc, #152]	; (7b0 <DMAC_Handler+0xa0>)
     718:	8c0b      	ldrh	r3, [r1, #32]
     71a:	2207      	movs	r2, #7

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     71c:	4013      	ands	r3, r2
     71e:	009b      	lsls	r3, r3, #2
     720:	4824      	ldr	r0, [pc, #144]	; (7b4 <DMAC_Handler+0xa4>)
     722:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     724:	7803      	ldrb	r3, [r0, #0]
     726:	401a      	ands	r2, r3
     728:	233f      	movs	r3, #63	; 0x3f
     72a:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     72c:	330f      	adds	r3, #15
     72e:	5cca      	ldrb	r2, [r1, r3]
     730:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     732:	7803      	ldrb	r3, [r0, #0]
     734:	011b      	lsls	r3, r3, #4
     736:	4920      	ldr	r1, [pc, #128]	; (7b8 <DMAC_Handler+0xa8>)
     738:	18c9      	adds	r1, r1, r3
     73a:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     73c:	4c1f      	ldr	r4, [pc, #124]	; (7bc <DMAC_Handler+0xac>)
     73e:	18e3      	adds	r3, r4, r3
     740:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     742:	1acb      	subs	r3, r1, r3
     744:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     746:	07d3      	lsls	r3, r2, #31
     748:	d50f      	bpl.n	76a <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     74a:	2101      	movs	r1, #1
     74c:	234e      	movs	r3, #78	; 0x4e
     74e:	4a18      	ldr	r2, [pc, #96]	; (7b0 <DMAC_Handler+0xa0>)
     750:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     752:	3b3e      	subs	r3, #62	; 0x3e
     754:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     756:	7c03      	ldrb	r3, [r0, #16]
     758:	07db      	lsls	r3, r3, #31
     75a:	d503      	bpl.n	764 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     75c:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     75e:	2b00      	cmp	r3, #0
     760:	d000      	beq.n	764 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     762:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     764:	4b16      	ldr	r3, [pc, #88]	; (7c0 <DMAC_Handler+0xb0>)
     766:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     768:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     76a:	0793      	lsls	r3, r2, #30
     76c:	d50d      	bpl.n	78a <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     76e:	2102      	movs	r1, #2
     770:	234e      	movs	r3, #78	; 0x4e
     772:	4a0f      	ldr	r2, [pc, #60]	; (7b0 <DMAC_Handler+0xa0>)
     774:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     776:	2300      	movs	r3, #0
     778:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     77a:	7c03      	ldrb	r3, [r0, #16]
     77c:	079b      	lsls	r3, r3, #30
     77e:	d5f1      	bpl.n	764 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     780:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     782:	2b00      	cmp	r3, #0
     784:	d0ee      	beq.n	764 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     786:	4798      	blx	r3
     788:	e7ec      	b.n	764 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     78a:	0753      	lsls	r3, r2, #29
     78c:	d5ea      	bpl.n	764 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     78e:	2104      	movs	r1, #4
     790:	234e      	movs	r3, #78	; 0x4e
     792:	4a07      	ldr	r2, [pc, #28]	; (7b0 <DMAC_Handler+0xa0>)
     794:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     796:	3b48      	subs	r3, #72	; 0x48
     798:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     79a:	7c03      	ldrb	r3, [r0, #16]
     79c:	075b      	lsls	r3, r3, #29
     79e:	d5e1      	bpl.n	764 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     7a0:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     7a2:	2b00      	cmp	r3, #0
     7a4:	d0de      	beq.n	764 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     7a6:	4798      	blx	r3
     7a8:	e7dc      	b.n	764 <DMAC_Handler+0x54>
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00001ac5 	.word	0x00001ac5
     7b0:	41004800 	.word	0x41004800
     7b4:	2000009c 	.word	0x2000009c
     7b8:	20000160 	.word	0x20000160
     7bc:	200000b0 	.word	0x200000b0
     7c0:	00001b05 	.word	0x00001b05

000007c4 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     7c4:	2300      	movs	r3, #0
     7c6:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     7c8:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTON_TRANSACTION;
     7ca:	2203      	movs	r2, #3
     7cc:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     7ce:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     7d0:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     7d2:	4770      	bx	lr

000007d4 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7d6:	46ce      	mov	lr, r9
     7d8:	4647      	mov	r7, r8
     7da:	b580      	push	{r7, lr}
     7dc:	0005      	movs	r5, r0
     7de:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     7e0:	4b45      	ldr	r3, [pc, #276]	; (8f8 <dma_allocate+0x124>)
     7e2:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     7e4:	4b45      	ldr	r3, [pc, #276]	; (8fc <dma_allocate+0x128>)
     7e6:	781b      	ldrb	r3, [r3, #0]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d118      	bne.n	81e <dma_allocate+0x4a>
	PM->AHBMASK.reg |= ahb_mask;
     7ec:	4b44      	ldr	r3, [pc, #272]	; (900 <dma_allocate+0x12c>)
     7ee:	695a      	ldr	r2, [r3, #20]
     7f0:	2120      	movs	r1, #32
     7f2:	430a      	orrs	r2, r1
     7f4:	615a      	str	r2, [r3, #20]
			PM->APBBMASK.reg |= mask;
     7f6:	69da      	ldr	r2, [r3, #28]
     7f8:	3910      	subs	r1, #16
     7fa:	430a      	orrs	r2, r1
     7fc:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     7fe:	4b41      	ldr	r3, [pc, #260]	; (904 <dma_allocate+0x130>)
     800:	881a      	ldrh	r2, [r3, #0]
     802:	390e      	subs	r1, #14
     804:	438a      	bics	r2, r1
     806:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     808:	2201      	movs	r2, #1
     80a:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     80c:	4a3e      	ldr	r2, [pc, #248]	; (908 <dma_allocate+0x134>)
     80e:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     810:	4a3e      	ldr	r2, [pc, #248]	; (90c <dma_allocate+0x138>)
     812:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     814:	4a3e      	ldr	r2, [pc, #248]	; (910 <dma_allocate+0x13c>)
     816:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     818:	4b38      	ldr	r3, [pc, #224]	; (8fc <dma_allocate+0x128>)
     81a:	2201      	movs	r2, #1
     81c:	701a      	strb	r2, [r3, #0]
     81e:	4b36      	ldr	r3, [pc, #216]	; (8f8 <dma_allocate+0x124>)
     820:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     822:	4b36      	ldr	r3, [pc, #216]	; (8fc <dma_allocate+0x128>)
     824:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     826:	07da      	lsls	r2, r3, #31
     828:	d50f      	bpl.n	84a <dma_allocate+0x76>
		tmp = tmp >> 1;
     82a:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     82c:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     82e:	2201      	movs	r2, #1
     830:	421a      	tst	r2, r3
     832:	d00b      	beq.n	84c <dma_allocate+0x78>
		tmp = tmp >> 1;
     834:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     836:	3401      	adds	r4, #1
     838:	b2e4      	uxtb	r4, r4
     83a:	2c05      	cmp	r4, #5
     83c:	d1f8      	bne.n	830 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     83e:	4b35      	ldr	r3, [pc, #212]	; (914 <dma_allocate+0x140>)
     840:	4798      	blx	r3
     842:	4b34      	ldr	r3, [pc, #208]	; (914 <dma_allocate+0x140>)
     844:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     846:	2014      	movs	r0, #20
     848:	e051      	b.n	8ee <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     84a:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     84c:	4a2b      	ldr	r2, [pc, #172]	; (8fc <dma_allocate+0x128>)
     84e:	6851      	ldr	r1, [r2, #4]
     850:	2301      	movs	r3, #1
     852:	40a3      	lsls	r3, r4
     854:	430b      	orrs	r3, r1
     856:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     858:	7a13      	ldrb	r3, [r2, #8]
     85a:	3b01      	subs	r3, #1
     85c:	7213      	strb	r3, [r2, #8]
     85e:	4b2d      	ldr	r3, [pc, #180]	; (914 <dma_allocate+0x140>)
     860:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     862:	2cff      	cmp	r4, #255	; 0xff
     864:	d0ed      	beq.n	842 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     866:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     868:	2307      	movs	r3, #7
     86a:	4698      	mov	r8, r3
     86c:	401c      	ands	r4, r3
     86e:	4f25      	ldr	r7, [pc, #148]	; (904 <dma_allocate+0x130>)
     870:	3338      	adds	r3, #56	; 0x38
     872:	4699      	mov	r9, r3
     874:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     876:	3301      	adds	r3, #1
     878:	5cfa      	ldrb	r2, [r7, r3]
     87a:	2102      	movs	r1, #2
     87c:	438a      	bics	r2, r1
     87e:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     880:	2401      	movs	r4, #1
     882:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     884:	4b1c      	ldr	r3, [pc, #112]	; (8f8 <dma_allocate+0x124>)
     886:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     888:	782b      	ldrb	r3, [r5, #0]
     88a:	4642      	mov	r2, r8
     88c:	4013      	ands	r3, r2
     88e:	464a      	mov	r2, r9
     890:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     892:	693b      	ldr	r3, [r7, #16]
     894:	782a      	ldrb	r2, [r5, #0]
     896:	4094      	lsls	r4, r2
     898:	43a3      	bics	r3, r4
     89a:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     89c:	7832      	ldrb	r2, [r6, #0]
     89e:	0152      	lsls	r2, r2, #5
     8a0:	2360      	movs	r3, #96	; 0x60
     8a2:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     8a4:	7872      	ldrb	r2, [r6, #1]
     8a6:	0212      	lsls	r2, r2, #8
     8a8:	21f8      	movs	r1, #248	; 0xf8
     8aa:	0149      	lsls	r1, r1, #5
     8ac:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     8ae:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     8b0:	78b2      	ldrb	r2, [r6, #2]
     8b2:	0592      	lsls	r2, r2, #22
     8b4:	21c0      	movs	r1, #192	; 0xc0
     8b6:	0409      	lsls	r1, r1, #16
     8b8:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     8ba:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     8bc:	78f1      	ldrb	r1, [r6, #3]
     8be:	2900      	cmp	r1, #0
     8c0:	d004      	beq.n	8cc <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     8c2:	2207      	movs	r2, #7
     8c4:	400a      	ands	r2, r1
     8c6:	2108      	movs	r1, #8
     8c8:	430a      	orrs	r2, r1
     8ca:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     8cc:	7932      	ldrb	r2, [r6, #4]
     8ce:	2a00      	cmp	r2, #0
     8d0:	d001      	beq.n	8d6 <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     8d2:	2210      	movs	r2, #16
     8d4:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     8d6:	4a0b      	ldr	r2, [pc, #44]	; (904 <dma_allocate+0x130>)
     8d8:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     8da:	4c0e      	ldr	r4, [pc, #56]	; (914 <dma_allocate+0x140>)
     8dc:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     8de:	2300      	movs	r3, #0
     8e0:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     8e2:	782b      	ldrb	r3, [r5, #0]
     8e4:	009b      	lsls	r3, r3, #2
     8e6:	4a0c      	ldr	r2, [pc, #48]	; (918 <dma_allocate+0x144>)
     8e8:	509d      	str	r5, [r3, r2]
     8ea:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     8ec:	2000      	movs	r0, #0
}
     8ee:	bc0c      	pop	{r2, r3}
     8f0:	4690      	mov	r8, r2
     8f2:	4699      	mov	r9, r3
     8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	00001ac5 	.word	0x00001ac5
     8fc:	20000008 	.word	0x20000008
     900:	40000400 	.word	0x40000400
     904:	41004800 	.word	0x41004800
     908:	20000160 	.word	0x20000160
     90c:	200000b0 	.word	0x200000b0
     910:	00000f02 	.word	0x00000f02
     914:	00001b05 	.word	0x00001b05
     918:	2000009c 	.word	0x2000009c

0000091c <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     91e:	780a      	ldrb	r2, [r1, #0]
     920:	8803      	ldrh	r3, [r0, #0]
     922:	2601      	movs	r6, #1
     924:	4032      	ands	r2, r6
     926:	2401      	movs	r4, #1
     928:	43a3      	bics	r3, r4
     92a:	4313      	orrs	r3, r2
     92c:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     92e:	784b      	ldrb	r3, [r1, #1]
     930:	8804      	ldrh	r4, [r0, #0]
     932:	2703      	movs	r7, #3
     934:	403b      	ands	r3, r7
     936:	005b      	lsls	r3, r3, #1
     938:	2206      	movs	r2, #6
     93a:	4394      	bics	r4, r2
     93c:	431c      	orrs	r4, r3
     93e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     940:	788d      	ldrb	r5, [r1, #2]
     942:	8804      	ldrh	r4, [r0, #0]
     944:	403d      	ands	r5, r7
     946:	00ed      	lsls	r5, r5, #3
     948:	2318      	movs	r3, #24
     94a:	439c      	bics	r4, r3
     94c:	432c      	orrs	r4, r5
     94e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     950:	78ca      	ldrb	r2, [r1, #3]
     952:	8803      	ldrh	r3, [r0, #0]
     954:	403a      	ands	r2, r7
     956:	0212      	lsls	r2, r2, #8
     958:	4c16      	ldr	r4, [pc, #88]	; (9b4 <dma_descriptor_create+0x98>)
     95a:	4023      	ands	r3, r4
     95c:	4313      	orrs	r3, r2
     95e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     960:	790b      	ldrb	r3, [r1, #4]
     962:	8804      	ldrh	r4, [r0, #0]
     964:	4033      	ands	r3, r6
     966:	029b      	lsls	r3, r3, #10
     968:	4a13      	ldr	r2, [pc, #76]	; (9b8 <dma_descriptor_create+0x9c>)
     96a:	4014      	ands	r4, r2
     96c:	431c      	orrs	r4, r3
     96e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     970:	794d      	ldrb	r5, [r1, #5]
     972:	8804      	ldrh	r4, [r0, #0]
     974:	4035      	ands	r5, r6
     976:	02ed      	lsls	r5, r5, #11
     978:	4b10      	ldr	r3, [pc, #64]	; (9bc <dma_descriptor_create+0xa0>)
     97a:	401c      	ands	r4, r3
     97c:	432c      	orrs	r4, r5
     97e:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     980:	798a      	ldrb	r2, [r1, #6]
     982:	8803      	ldrh	r3, [r0, #0]
     984:	4032      	ands	r2, r6
     986:	0312      	lsls	r2, r2, #12
     988:	4c0d      	ldr	r4, [pc, #52]	; (9c0 <dma_descriptor_create+0xa4>)
     98a:	4023      	ands	r3, r4
     98c:	4313      	orrs	r3, r2
     98e:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     990:	79cb      	ldrb	r3, [r1, #7]
     992:	2207      	movs	r2, #7
     994:	401a      	ands	r2, r3
     996:	8803      	ldrh	r3, [r0, #0]
     998:	0352      	lsls	r2, r2, #13
     99a:	04db      	lsls	r3, r3, #19
     99c:	0cdb      	lsrs	r3, r3, #19
     99e:	4313      	orrs	r3, r2
     9a0:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     9a2:	890b      	ldrh	r3, [r1, #8]
     9a4:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     9a6:	68cb      	ldr	r3, [r1, #12]
     9a8:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     9aa:	690b      	ldr	r3, [r1, #16]
     9ac:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     9ae:	694b      	ldr	r3, [r1, #20]
     9b0:	60c3      	str	r3, [r0, #12]
}
     9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9b4:	fffffcff 	.word	0xfffffcff
     9b8:	fffffbff 	.word	0xfffffbff
     9bc:	fffff7ff 	.word	0xfffff7ff
     9c0:	ffffefff 	.word	0xffffefff

000009c4 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     9c4:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     9c6:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     9c8:	2a05      	cmp	r2, #5
     9ca:	d00b      	beq.n	9e4 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     9cc:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     9ce:	2b00      	cmp	r3, #0
     9d0:	d00a      	beq.n	9e8 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     9d2:	68da      	ldr	r2, [r3, #12]
     9d4:	2a00      	cmp	r2, #0
     9d6:	d003      	beq.n	9e0 <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     9d8:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     9da:	68da      	ldr	r2, [r3, #12]
     9dc:	2a00      	cmp	r2, #0
     9de:	d1fb      	bne.n	9d8 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     9e0:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     9e2:	2300      	movs	r3, #0
}
     9e4:	0018      	movs	r0, r3
     9e6:	4770      	bx	lr
		resource->descriptor = descriptor;
     9e8:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     9ea:	2300      	movs	r3, #0
     9ec:	e7fa      	b.n	9e4 <dma_add_descriptor+0x20>
	...

000009f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     9f0:	b500      	push	{lr}
     9f2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9f4:	ab01      	add	r3, sp, #4
     9f6:	2280      	movs	r2, #128	; 0x80
     9f8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     9fa:	780a      	ldrb	r2, [r1, #0]
     9fc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     9fe:	784a      	ldrb	r2, [r1, #1]
     a00:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a02:	788a      	ldrb	r2, [r1, #2]
     a04:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a06:	0019      	movs	r1, r3
     a08:	4b01      	ldr	r3, [pc, #4]	; (a10 <port_pin_set_config+0x20>)
     a0a:	4798      	blx	r3
}
     a0c:	b003      	add	sp, #12
     a0e:	bd00      	pop	{pc}
     a10:	00002075 	.word	0x00002075

00000a14 <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     a14:	b5f0      	push	{r4, r5, r6, r7, lr}
     a16:	46ce      	mov	lr, r9
     a18:	4647      	mov	r7, r8
     a1a:	b580      	push	{r7, lr}
     a1c:	b083      	sub	sp, #12
     a1e:	0005      	movs	r5, r0
     a20:	000c      	movs	r4, r1
     a22:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     a24:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     a26:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     a28:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     a2a:	079b      	lsls	r3, r3, #30
     a2c:	d504      	bpl.n	a38 <i2c_slave_init+0x24>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     a2e:	b003      	add	sp, #12
     a30:	bc0c      	pop	{r2, r3}
     a32:	4690      	mov	r8, r2
     a34:	4699      	mov	r9, r3
     a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     a38:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     a3a:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     a3c:	07db      	lsls	r3, r3, #31
     a3e:	d4f6      	bmi.n	a2e <i2c_slave_init+0x1a>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a40:	0008      	movs	r0, r1
     a42:	4b4d      	ldr	r3, [pc, #308]	; (b78 <i2c_slave_init+0x164>)
     a44:	4699      	mov	r9, r3
     a46:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
     a48:	4a4c      	ldr	r2, [pc, #304]	; (b7c <i2c_slave_init+0x168>)
     a4a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a4c:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a4e:	2701      	movs	r7, #1
     a50:	46b8      	mov	r8, r7
     a52:	409f      	lsls	r7, r3
     a54:	003b      	movs	r3, r7
     a56:	430b      	orrs	r3, r1
     a58:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a5a:	a901      	add	r1, sp, #4
     a5c:	7e73      	ldrb	r3, [r6, #25]
     a5e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a60:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a62:	b2c3      	uxtb	r3, r0
     a64:	001f      	movs	r7, r3
     a66:	0018      	movs	r0, r3
     a68:	4b45      	ldr	r3, [pc, #276]	; (b80 <i2c_slave_init+0x16c>)
     a6a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a6c:	0038      	movs	r0, r7
     a6e:	4b45      	ldr	r3, [pc, #276]	; (b84 <i2c_slave_init+0x170>)
     a70:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a72:	7e70      	ldrb	r0, [r6, #25]
     a74:	2100      	movs	r1, #0
     a76:	4b44      	ldr	r3, [pc, #272]	; (b88 <i2c_slave_init+0x174>)
     a78:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a7a:	6828      	ldr	r0, [r5, #0]
     a7c:	47c8      	blx	r9
     a7e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     a80:	4942      	ldr	r1, [pc, #264]	; (b8c <i2c_slave_init+0x178>)
     a82:	4b43      	ldr	r3, [pc, #268]	; (b90 <i2c_slave_init+0x17c>)
     a84:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a86:	00bf      	lsls	r7, r7, #2
     a88:	4b42      	ldr	r3, [pc, #264]	; (b94 <i2c_slave_init+0x180>)
     a8a:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     a8c:	2300      	movs	r3, #0
     a8e:	2224      	movs	r2, #36	; 0x24
     a90:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     a92:	3201      	adds	r2, #1
     a94:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     a96:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     a98:	7e33      	ldrb	r3, [r6, #24]
     a9a:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     a9c:	2310      	movs	r3, #16
     a9e:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     aa0:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     aa2:	8933      	ldrh	r3, [r6, #8]
     aa4:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     aa6:	7c33      	ldrb	r3, [r6, #16]
     aa8:	722b      	strb	r3, [r5, #8]
     aaa:	2380      	movs	r3, #128	; 0x80
     aac:	466a      	mov	r2, sp
     aae:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ab0:	2300      	movs	r3, #0
     ab2:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ab4:	466b      	mov	r3, sp
     ab6:	4642      	mov	r2, r8
     ab8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     aba:	2300      	movs	r3, #0
     abc:	466a      	mov	r2, sp
     abe:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     ac0:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     ac2:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d04b      	beq.n	b60 <i2c_slave_init+0x14c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     ac8:	466b      	mov	r3, sp
     aca:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     acc:	2302      	movs	r3, #2
     ace:	466a      	mov	r2, sp
     ad0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     ad2:	0c00      	lsrs	r0, r0, #16
     ad4:	b2c0      	uxtb	r0, r0
     ad6:	4669      	mov	r1, sp
     ad8:	4b2f      	ldr	r3, [pc, #188]	; (b98 <i2c_slave_init+0x184>)
     ada:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     adc:	2d00      	cmp	r5, #0
     ade:	d044      	beq.n	b6a <i2c_slave_init+0x156>
	pin_conf.mux_position = pad1 & 0xFFFF;
     ae0:	466b      	mov	r3, sp
     ae2:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     ae4:	2302      	movs	r3, #2
     ae6:	466a      	mov	r2, sp
     ae8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     aea:	0c2d      	lsrs	r5, r5, #16
     aec:	b2e8      	uxtb	r0, r5
     aee:	4669      	mov	r1, sp
     af0:	4b29      	ldr	r3, [pc, #164]	; (b98 <i2c_slave_init+0x184>)
     af2:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     af4:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     af6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     af8:	2b00      	cmp	r3, #0
     afa:	d104      	bne.n	b06 <i2c_slave_init+0xf2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     afc:	4b27      	ldr	r3, [pc, #156]	; (b9c <i2c_slave_init+0x188>)
     afe:	789b      	ldrb	r3, [r3, #2]
     b00:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     b02:	0fdb      	lsrs	r3, r3, #31
     b04:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     b06:	2325      	movs	r3, #37	; 0x25
     b08:	5cf3      	ldrb	r3, [r6, r3]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d104      	bne.n	b18 <i2c_slave_init+0x104>
     b0e:	2380      	movs	r3, #128	; 0x80
     b10:	049b      	lsls	r3, r3, #18
     b12:	6971      	ldr	r1, [r6, #20]
     b14:	4299      	cmp	r1, r3
     b16:	d102      	bne.n	b1e <i2c_slave_init+0x10a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     b18:	2380      	movs	r3, #128	; 0x80
     b1a:	051b      	lsls	r3, r3, #20
     b1c:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     b1e:	6820      	ldr	r0, [r4, #0]
     b20:	6873      	ldr	r3, [r6, #4]
     b22:	6971      	ldr	r1, [r6, #20]
     b24:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     b26:	2124      	movs	r1, #36	; 0x24
     b28:	5c71      	ldrb	r1, [r6, r1]
     b2a:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     b2c:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     b2e:	2126      	movs	r1, #38	; 0x26
     b30:	5c71      	ldrb	r1, [r6, r1]
     b32:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     b34:	430b      	orrs	r3, r1
     b36:	4303      	orrs	r3, r0
     b38:	4313      	orrs	r3, r2
     b3a:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     b3c:	8972      	ldrh	r2, [r6, #10]
     b3e:	2380      	movs	r3, #128	; 0x80
     b40:	005b      	lsls	r3, r3, #1
     b42:	4313      	orrs	r3, r2
     b44:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     b46:	89b3      	ldrh	r3, [r6, #12]
     b48:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     b4a:	89f2      	ldrh	r2, [r6, #14]
     b4c:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     b4e:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     b50:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     b52:	4313      	orrs	r3, r2
     b54:	7c32      	ldrb	r2, [r6, #16]
     b56:	03d2      	lsls	r2, r2, #15
     b58:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     b5a:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     b5c:	2000      	movs	r0, #0
     b5e:	e766      	b.n	a2e <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     b60:	2100      	movs	r1, #0
     b62:	0020      	movs	r0, r4
     b64:	4b0e      	ldr	r3, [pc, #56]	; (ba0 <i2c_slave_init+0x18c>)
     b66:	4798      	blx	r3
     b68:	e7ae      	b.n	ac8 <i2c_slave_init+0xb4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     b6a:	2101      	movs	r1, #1
     b6c:	0020      	movs	r0, r4
     b6e:	4b0c      	ldr	r3, [pc, #48]	; (ba0 <i2c_slave_init+0x18c>)
     b70:	4798      	blx	r3
     b72:	0005      	movs	r5, r0
     b74:	e7b4      	b.n	ae0 <i2c_slave_init+0xcc>
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	00000f9d 	.word	0x00000f9d
     b7c:	40000400 	.word	0x40000400
     b80:	00001f7d 	.word	0x00001f7d
     b84:	00001ef1 	.word	0x00001ef1
     b88:	00000e91 	.word	0x00000e91
     b8c:	00000be9 	.word	0x00000be9
     b90:	00000fd9 	.word	0x00000fd9
     b94:	200001b0 	.word	0x200001b0
     b98:	00002075 	.word	0x00002075
     b9c:	41002000 	.word	0x41002000
     ba0:	00000edd 	.word	0x00000edd

00000ba4 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     ba4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     ba6:	1c93      	adds	r3, r2, #2
     ba8:	009b      	lsls	r3, r3, #2
     baa:	18c3      	adds	r3, r0, r3
     bac:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     bae:	2424      	movs	r4, #36	; 0x24
     bb0:	5d03      	ldrb	r3, [r0, r4]
     bb2:	2101      	movs	r1, #1
     bb4:	4091      	lsls	r1, r2
     bb6:	430b      	orrs	r3, r1
     bb8:	b2db      	uxtb	r3, r3
     bba:	5503      	strb	r3, [r0, r4]
}
     bbc:	bd10      	pop	{r4, pc}

00000bbe <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     bbe:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     bc0:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     bc2:	2a00      	cmp	r2, #0
     bc4:	d001      	beq.n	bca <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     bc6:	0018      	movs	r0, r3
     bc8:	4770      	bx	lr
	module->buffer           = packet->data;
     bca:	684b      	ldr	r3, [r1, #4]
     bcc:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     bce:	880b      	ldrh	r3, [r1, #0]
     bd0:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     bd2:	880b      	ldrh	r3, [r1, #0]
     bd4:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     bd6:	3205      	adds	r2, #5
     bd8:	2331      	movs	r3, #49	; 0x31
     bda:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bdc:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     bde:	3202      	adds	r2, #2
     be0:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     be2:	2300      	movs	r3, #0
     be4:	e7ef      	b.n	bc6 <i2c_slave_write_packet_job+0x8>
	...

00000be8 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     be8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     bea:	0080      	lsls	r0, r0, #2
     bec:	4b9b      	ldr	r3, [pc, #620]	; (e5c <_i2c_slave_interrupt_handler+0x274>)
     bee:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bf0:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     bf2:	2325      	movs	r3, #37	; 0x25
     bf4:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     bf6:	2224      	movs	r2, #36	; 0x24
     bf8:	5ca6      	ldrb	r6, [r4, r2]
     bfa:	401e      	ands	r6, r3

	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     bfc:	7e2b      	ldrb	r3, [r5, #24]
     bfe:	079b      	lsls	r3, r3, #30
     c00:	d400      	bmi.n	c04 <_i2c_slave_interrupt_handler+0x1c>
     c02:	e095      	b.n	d30 <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     c04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c06:	b29b      	uxth	r3, r3
     c08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     c0a:	4293      	cmp	r3, r2
     c0c:	d00d      	beq.n	c2a <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     c0e:	2330      	movs	r3, #48	; 0x30
     c10:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     c12:	2b00      	cmp	r3, #0
     c14:	d109      	bne.n	c2a <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     c16:	2231      	movs	r2, #49	; 0x31
     c18:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     c1a:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     c1c:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     c1e:	07b3      	lsls	r3, r6, #30
     c20:	d50b      	bpl.n	c3a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     c22:	6923      	ldr	r3, [r4, #16]
     c24:	0020      	movs	r0, r4
     c26:	4798      	blx	r3
     c28:	e007      	b.n	c3a <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     c2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c2c:	b29b      	uxth	r3, r3
     c2e:	429a      	cmp	r2, r3
     c30:	d003      	beq.n	c3a <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     c32:	2330      	movs	r3, #48	; 0x30
     c34:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     c36:	2b01      	cmp	r3, #1
     c38:	d022      	beq.n	c80 <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     c3a:	8b6a      	ldrh	r2, [r5, #26]
     c3c:	2343      	movs	r3, #67	; 0x43
     c3e:	421a      	tst	r2, r3
     c40:	d004      	beq.n	c4c <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     c42:	2210      	movs	r2, #16
     c44:	3b12      	subs	r3, #18
     c46:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     c48:	06b3      	lsls	r3, r6, #26
     c4a:	d424      	bmi.n	c96 <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     c4c:	7a63      	ldrb	r3, [r4, #9]
     c4e:	2b00      	cmp	r3, #0
     c50:	d125      	bne.n	c9e <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     c52:	8b6b      	ldrh	r3, [r5, #26]
     c54:	071b      	lsls	r3, r3, #28
     c56:	d54a      	bpl.n	cee <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     c58:	2201      	movs	r2, #1
     c5a:	2330      	movs	r3, #48	; 0x30
     c5c:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     c5e:	0773      	lsls	r3, r6, #29
     c60:	d438      	bmi.n	cd4 <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     c62:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c64:	b29b      	uxth	r3, r3
     c66:	2b00      	cmp	r3, #0
     c68:	d138      	bne.n	cdc <_i2c_slave_interrupt_handler+0xf4>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c6a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     c6c:	4b7c      	ldr	r3, [pc, #496]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     c6e:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     c70:	2300      	movs	r3, #0
     c72:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     c74:	2380      	movs	r3, #128	; 0x80
     c76:	02db      	lsls	r3, r3, #11
     c78:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     c7a:	4b7a      	ldr	r3, [pc, #488]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     c7c:	4798      	blx	r3
     c7e:	e018      	b.n	cb2 <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     c80:	2300      	movs	r3, #0
     c82:	2231      	movs	r2, #49	; 0x31
     c84:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     c86:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     c88:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     c8a:	07f3      	lsls	r3, r6, #31
     c8c:	d5d5      	bpl.n	c3a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     c8e:	68e3      	ldr	r3, [r4, #12]
     c90:	0020      	movs	r0, r4
     c92:	4798      	blx	r3
     c94:	e7d1      	b.n	c3a <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     c96:	6a23      	ldr	r3, [r4, #32]
     c98:	0020      	movs	r0, r4
     c9a:	4798      	blx	r3
     c9c:	e7d6      	b.n	c4c <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c9e:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     ca0:	4b6f      	ldr	r3, [pc, #444]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     ca2:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ca4:	2300      	movs	r3, #0
     ca6:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     ca8:	2380      	movs	r3, #128	; 0x80
     caa:	02db      	lsls	r3, r3, #11
     cac:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     cae:	4b6d      	ldr	r3, [pc, #436]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     cb0:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     cb2:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     cb4:	7e1a      	ldrb	r2, [r3, #24]
     cb6:	07d2      	lsls	r2, r2, #31
     cb8:	d501      	bpl.n	cbe <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     cba:	2201      	movs	r2, #1
     cbc:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     cbe:	2202      	movs	r2, #2
     cc0:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     cc2:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     cc4:	4b66      	ldr	r3, [pc, #408]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     cc6:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     cc8:	2300      	movs	r3, #0
     cca:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
     ccc:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     cce:	4b65      	ldr	r3, [pc, #404]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     cd0:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     cd2:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     cd4:	6963      	ldr	r3, [r4, #20]
     cd6:	0020      	movs	r0, r4
     cd8:	4798      	blx	r3
     cda:	e7c2      	b.n	c62 <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     cdc:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     cde:	4b60      	ldr	r3, [pc, #384]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     ce0:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     ce2:	2300      	movs	r3, #0
     ce4:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     ce6:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     ce8:	4b5e      	ldr	r3, [pc, #376]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     cea:	4798      	blx	r3
     cec:	e7e1      	b.n	cb2 <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     cee:	2200      	movs	r2, #0
     cf0:	2330      	movs	r3, #48	; 0x30
     cf2:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     cf4:	0733      	lsls	r3, r6, #28
     cf6:	d40e      	bmi.n	d16 <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     cf8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     cfa:	b29b      	uxth	r3, r3
     cfc:	2b00      	cmp	r3, #0
     cfe:	d10e      	bne.n	d1e <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d00:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d02:	4b57      	ldr	r3, [pc, #348]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     d04:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d06:	2300      	movs	r3, #0
     d08:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     d0a:	2380      	movs	r3, #128	; 0x80
     d0c:	02db      	lsls	r3, r3, #11
     d0e:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d10:	4b54      	ldr	r3, [pc, #336]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     d12:	4798      	blx	r3
     d14:	e7cd      	b.n	cb2 <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     d16:	69a3      	ldr	r3, [r4, #24]
     d18:	0020      	movs	r0, r4
     d1a:	4798      	blx	r3
     d1c:	e7ec      	b.n	cf8 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     d1e:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     d20:	4b4f      	ldr	r3, [pc, #316]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     d22:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d24:	2300      	movs	r3, #0
     d26:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     d28:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d2a:	4b4e      	ldr	r3, [pc, #312]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     d2c:	4798      	blx	r3
     d2e:	e7c0      	b.n	cb2 <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     d30:	7e2b      	ldrb	r3, [r5, #24]
     d32:	07db      	lsls	r3, r3, #31
     d34:	d52e      	bpl.n	d94 <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     d36:	2301      	movs	r3, #1
     d38:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     d3a:	3304      	adds	r3, #4
     d3c:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     d3e:	3320      	adds	r3, #32
     d40:	5ce3      	ldrb	r3, [r4, r3]
     d42:	075b      	lsls	r3, r3, #29
     d44:	d405      	bmi.n	d52 <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     d46:	2325      	movs	r3, #37	; 0x25
     d48:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     d4a:	2b08      	cmp	r3, #8
     d4c:	d001      	beq.n	d52 <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     d4e:	2302      	movs	r3, #2
     d50:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     d52:	2331      	movs	r3, #49	; 0x31
     d54:	5ce3      	ldrb	r3, [r4, r3]
     d56:	2b1e      	cmp	r3, #30
     d58:	d0bb      	beq.n	cd2 <_i2c_slave_interrupt_handler+0xea>
     d5a:	2331      	movs	r3, #49	; 0x31
     d5c:	5ce3      	ldrb	r3, [r4, r3]
     d5e:	2b10      	cmp	r3, #16
     d60:	d0b7      	beq.n	cd2 <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     d62:	2300      	movs	r3, #0
     d64:	2231      	movs	r2, #49	; 0x31
     d66:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     d68:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     d6a:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     d6c:	07b3      	lsls	r3, r6, #30
     d6e:	d503      	bpl.n	d78 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     d70:	2330      	movs	r3, #48	; 0x30
     d72:	5ce3      	ldrb	r3, [r4, r3]
     d74:	2b00      	cmp	r3, #0
     d76:	d009      	beq.n	d8c <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     d78:	07f3      	lsls	r3, r6, #31
     d7a:	d5aa      	bpl.n	cd2 <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     d7c:	2330      	movs	r3, #48	; 0x30
     d7e:	5ce3      	ldrb	r3, [r4, r3]
     d80:	2b01      	cmp	r3, #1
     d82:	d1a6      	bne.n	cd2 <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     d84:	68e3      	ldr	r3, [r4, #12]
     d86:	0020      	movs	r0, r4
     d88:	4798      	blx	r3
     d8a:	e7a2      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     d8c:	6923      	ldr	r3, [r4, #16]
     d8e:	0020      	movs	r0, r4
     d90:	4798      	blx	r3
     d92:	e79e      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     d94:	7e2b      	ldrb	r3, [r5, #24]
     d96:	075b      	lsls	r3, r3, #29
     d98:	d59b      	bpl.n	cd2 <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     d9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d9c:	2b00      	cmp	r3, #0
     d9e:	d01e      	beq.n	dde <_i2c_slave_interrupt_handler+0x1f6>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     da0:	2230      	movs	r2, #48	; 0x30
     da2:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     da4:	2a01      	cmp	r2, #1
     da6:	d013      	beq.n	dd0 <_i2c_slave_interrupt_handler+0x1e8>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     da8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     daa:	b29b      	uxth	r3, r3
     dac:	2b00      	cmp	r3, #0
     dae:	d100      	bne.n	db2 <_i2c_slave_interrupt_handler+0x1ca>
     db0:	e78f      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     db2:	2330      	movs	r3, #48	; 0x30
     db4:	5ce3      	ldrb	r3, [r4, r3]
     db6:	2b00      	cmp	r3, #0
     db8:	d044      	beq.n	e44 <_i2c_slave_interrupt_handler+0x25c>
	i2c_hw->DATA.reg = *(module->buffer++);
     dba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     dbc:	1c5a      	adds	r2, r3, #1
     dbe:	62e2      	str	r2, [r4, #44]	; 0x2c
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	b2db      	uxtb	r3, r3
     dc4:	2228      	movs	r2, #40	; 0x28
     dc6:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
     dc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     dca:	3b01      	subs	r3, #1
     dcc:	8523      	strh	r3, [r4, #40]	; 0x28
}
     dce:	e780      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     dd0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     dd2:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     dd4:	4293      	cmp	r3, r2
     dd6:	d2e7      	bcs.n	da8 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     dd8:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
     dda:	075b      	lsls	r3, r3, #29
     ddc:	d5e4      	bpl.n	da8 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     dde:	2300      	movs	r3, #0
     de0:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     de2:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     de4:	3330      	adds	r3, #48	; 0x30
     de6:	5ce3      	ldrb	r3, [r4, r3]
     de8:	2b00      	cmp	r3, #0
     dea:	d117      	bne.n	e1c <_i2c_slave_interrupt_handler+0x234>
	cpu_irq_enter_critical();
     dec:	4b1c      	ldr	r3, [pc, #112]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     dee:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     df0:	2300      	movs	r3, #0
     df2:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     df4:	2380      	movs	r3, #128	; 0x80
     df6:	02db      	lsls	r3, r3, #11
     df8:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     dfa:	4b1a      	ldr	r3, [pc, #104]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     dfc:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     dfe:	686a      	ldr	r2, [r5, #4]
     e00:	2380      	movs	r3, #128	; 0x80
     e02:	029b      	lsls	r3, r3, #10
     e04:	4313      	orrs	r3, r2
     e06:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     e08:	221e      	movs	r2, #30
     e0a:	2331      	movs	r3, #49	; 0x31
     e0c:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     e0e:	06f3      	lsls	r3, r6, #27
     e10:	d400      	bmi.n	e14 <_i2c_slave_interrupt_handler+0x22c>
     e12:	e75e      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     e14:	69e3      	ldr	r3, [r4, #28]
     e16:	0020      	movs	r0, r4
     e18:	4798      	blx	r3
     e1a:	e75a      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     e1c:	4b10      	ldr	r3, [pc, #64]	; (e60 <_i2c_slave_interrupt_handler+0x278>)
     e1e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     e20:	2300      	movs	r3, #0
     e22:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     e24:	2380      	movs	r3, #128	; 0x80
     e26:	02db      	lsls	r3, r3, #11
     e28:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     e2a:	4b0e      	ldr	r3, [pc, #56]	; (e64 <_i2c_slave_interrupt_handler+0x27c>)
     e2c:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     e2e:	686a      	ldr	r2, [r5, #4]
     e30:	2380      	movs	r3, #128	; 0x80
     e32:	029b      	lsls	r3, r3, #10
     e34:	4313      	orrs	r3, r2
     e36:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     e38:	2331      	movs	r3, #49	; 0x31
     e3a:	2200      	movs	r2, #0
     e3c:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     e3e:	3b2d      	subs	r3, #45	; 0x2d
     e40:	752b      	strb	r3, [r5, #20]
     e42:	e746      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     e44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     e46:	1c53      	adds	r3, r2, #1
     e48:	62e3      	str	r3, [r4, #44]	; 0x2c
     e4a:	2328      	movs	r3, #40	; 0x28
     e4c:	5ceb      	ldrb	r3, [r5, r3]
     e4e:	b2db      	uxtb	r3, r3
     e50:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     e52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     e54:	3b01      	subs	r3, #1
     e56:	8523      	strh	r3, [r4, #40]	; 0x28
     e58:	e73b      	b.n	cd2 <_i2c_slave_interrupt_handler+0xea>
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	200001b0 	.word	0x200001b0
     e60:	00001ac5 	.word	0x00001ac5
     e64:	00001b05 	.word	0x00001b05

00000e68 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e68:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     e6a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e6c:	2340      	movs	r3, #64	; 0x40
     e6e:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     e70:	4281      	cmp	r1, r0
     e72:	d202      	bcs.n	e7a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     e74:	0018      	movs	r0, r3
     e76:	bd10      	pop	{r4, pc}
		baud_calculated++;
     e78:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     e7a:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     e7c:	1c63      	adds	r3, r4, #1
     e7e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     e80:	4288      	cmp	r0, r1
     e82:	d9f9      	bls.n	e78 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e84:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     e86:	2cff      	cmp	r4, #255	; 0xff
     e88:	d8f4      	bhi.n	e74 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     e8a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e8c:	2300      	movs	r3, #0
     e8e:	e7f1      	b.n	e74 <_sercom_get_sync_baud_val+0xc>

00000e90 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e90:	b510      	push	{r4, lr}
     e92:	b082      	sub	sp, #8
     e94:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     e96:	4b0e      	ldr	r3, [pc, #56]	; (ed0 <sercom_set_gclk_generator+0x40>)
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	2b00      	cmp	r3, #0
     e9c:	d007      	beq.n	eae <sercom_set_gclk_generator+0x1e>
     e9e:	2900      	cmp	r1, #0
     ea0:	d105      	bne.n	eae <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     ea2:	4b0b      	ldr	r3, [pc, #44]	; (ed0 <sercom_set_gclk_generator+0x40>)
     ea4:	785b      	ldrb	r3, [r3, #1]
     ea6:	4283      	cmp	r3, r0
     ea8:	d010      	beq.n	ecc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     eaa:	201d      	movs	r0, #29
     eac:	e00c      	b.n	ec8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     eae:	a901      	add	r1, sp, #4
     eb0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     eb2:	200d      	movs	r0, #13
     eb4:	4b07      	ldr	r3, [pc, #28]	; (ed4 <sercom_set_gclk_generator+0x44>)
     eb6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     eb8:	200d      	movs	r0, #13
     eba:	4b07      	ldr	r3, [pc, #28]	; (ed8 <sercom_set_gclk_generator+0x48>)
     ebc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <sercom_set_gclk_generator+0x40>)
     ec0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     ec2:	2201      	movs	r2, #1
     ec4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     ec6:	2000      	movs	r0, #0
}
     ec8:	b002      	add	sp, #8
     eca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     ecc:	2000      	movs	r0, #0
     ece:	e7fb      	b.n	ec8 <sercom_set_gclk_generator+0x38>
     ed0:	20000108 	.word	0x20000108
     ed4:	00001f7d 	.word	0x00001f7d
     ed8:	00001ef1 	.word	0x00001ef1

00000edc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     edc:	4b20      	ldr	r3, [pc, #128]	; (f60 <_sercom_get_default_pad+0x84>)
     ede:	4298      	cmp	r0, r3
     ee0:	d017      	beq.n	f12 <_sercom_get_default_pad+0x36>
     ee2:	4b20      	ldr	r3, [pc, #128]	; (f64 <_sercom_get_default_pad+0x88>)
     ee4:	4298      	cmp	r0, r3
     ee6:	d024      	beq.n	f32 <_sercom_get_default_pad+0x56>
     ee8:	4b1f      	ldr	r3, [pc, #124]	; (f68 <_sercom_get_default_pad+0x8c>)
     eea:	4298      	cmp	r0, r3
     eec:	d001      	beq.n	ef2 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     eee:	2000      	movs	r0, #0
}
     ef0:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ef2:	2901      	cmp	r1, #1
     ef4:	d007      	beq.n	f06 <_sercom_get_default_pad+0x2a>
     ef6:	2900      	cmp	r1, #0
     ef8:	d02b      	beq.n	f52 <_sercom_get_default_pad+0x76>
     efa:	2902      	cmp	r1, #2
     efc:	d005      	beq.n	f0a <_sercom_get_default_pad+0x2e>
     efe:	2903      	cmp	r1, #3
     f00:	d005      	beq.n	f0e <_sercom_get_default_pad+0x32>
	return 0;
     f02:	2000      	movs	r0, #0
     f04:	e7f4      	b.n	ef0 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f06:	4819      	ldr	r0, [pc, #100]	; (f6c <_sercom_get_default_pad+0x90>)
     f08:	e7f2      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f0a:	4819      	ldr	r0, [pc, #100]	; (f70 <_sercom_get_default_pad+0x94>)
     f0c:	e7f0      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f0e:	4819      	ldr	r0, [pc, #100]	; (f74 <_sercom_get_default_pad+0x98>)
     f10:	e7ee      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f12:	2901      	cmp	r1, #1
     f14:	d007      	beq.n	f26 <_sercom_get_default_pad+0x4a>
     f16:	2900      	cmp	r1, #0
     f18:	d01d      	beq.n	f56 <_sercom_get_default_pad+0x7a>
     f1a:	2902      	cmp	r1, #2
     f1c:	d005      	beq.n	f2a <_sercom_get_default_pad+0x4e>
     f1e:	2903      	cmp	r1, #3
     f20:	d005      	beq.n	f2e <_sercom_get_default_pad+0x52>
	return 0;
     f22:	2000      	movs	r0, #0
     f24:	e7e4      	b.n	ef0 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f26:	4814      	ldr	r0, [pc, #80]	; (f78 <_sercom_get_default_pad+0x9c>)
     f28:	e7e2      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f2a:	4814      	ldr	r0, [pc, #80]	; (f7c <_sercom_get_default_pad+0xa0>)
     f2c:	e7e0      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f2e:	4814      	ldr	r0, [pc, #80]	; (f80 <_sercom_get_default_pad+0xa4>)
     f30:	e7de      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f32:	2901      	cmp	r1, #1
     f34:	d007      	beq.n	f46 <_sercom_get_default_pad+0x6a>
     f36:	2900      	cmp	r1, #0
     f38:	d00f      	beq.n	f5a <_sercom_get_default_pad+0x7e>
     f3a:	2902      	cmp	r1, #2
     f3c:	d005      	beq.n	f4a <_sercom_get_default_pad+0x6e>
     f3e:	2903      	cmp	r1, #3
     f40:	d005      	beq.n	f4e <_sercom_get_default_pad+0x72>
	return 0;
     f42:	2000      	movs	r0, #0
     f44:	e7d4      	b.n	ef0 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f46:	480f      	ldr	r0, [pc, #60]	; (f84 <_sercom_get_default_pad+0xa8>)
     f48:	e7d2      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f4a:	480f      	ldr	r0, [pc, #60]	; (f88 <_sercom_get_default_pad+0xac>)
     f4c:	e7d0      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f4e:	480f      	ldr	r0, [pc, #60]	; (f8c <_sercom_get_default_pad+0xb0>)
     f50:	e7ce      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f52:	480f      	ldr	r0, [pc, #60]	; (f90 <_sercom_get_default_pad+0xb4>)
     f54:	e7cc      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f56:	480f      	ldr	r0, [pc, #60]	; (f94 <_sercom_get_default_pad+0xb8>)
     f58:	e7ca      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f5a:	480f      	ldr	r0, [pc, #60]	; (f98 <_sercom_get_default_pad+0xbc>)
     f5c:	e7c8      	b.n	ef0 <_sercom_get_default_pad+0x14>
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	42000c00 	.word	0x42000c00
     f64:	42001000 	.word	0x42001000
     f68:	42000800 	.word	0x42000800
     f6c:	00050003 	.word	0x00050003
     f70:	00060003 	.word	0x00060003
     f74:	00070003 	.word	0x00070003
     f78:	00170002 	.word	0x00170002
     f7c:	001e0003 	.word	0x001e0003
     f80:	001f0003 	.word	0x001f0003
     f84:	00170003 	.word	0x00170003
     f88:	00100003 	.word	0x00100003
     f8c:	00190003 	.word	0x00190003
     f90:	00040003 	.word	0x00040003
     f94:	00160002 	.word	0x00160002
     f98:	00160003 	.word	0x00160003

00000f9c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f9c:	b530      	push	{r4, r5, lr}
     f9e:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     fa0:	aa01      	add	r2, sp, #4
     fa2:	4b0b      	ldr	r3, [pc, #44]	; (fd0 <_sercom_get_sercom_inst_index+0x34>)
     fa4:	cb32      	ldmia	r3!, {r1, r4, r5}
     fa6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fa8:	0003      	movs	r3, r0
     faa:	9a01      	ldr	r2, [sp, #4]
     fac:	4282      	cmp	r2, r0
     fae:	d00c      	beq.n	fca <_sercom_get_sercom_inst_index+0x2e>
     fb0:	9a02      	ldr	r2, [sp, #8]
     fb2:	4282      	cmp	r2, r0
     fb4:	d007      	beq.n	fc6 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     fb6:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fb8:	9a03      	ldr	r2, [sp, #12]
     fba:	429a      	cmp	r2, r3
     fbc:	d001      	beq.n	fc2 <_sercom_get_sercom_inst_index+0x26>
}
     fbe:	b005      	add	sp, #20
     fc0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fc2:	3002      	adds	r0, #2
     fc4:	e002      	b.n	fcc <_sercom_get_sercom_inst_index+0x30>
     fc6:	2001      	movs	r0, #1
     fc8:	e000      	b.n	fcc <_sercom_get_sercom_inst_index+0x30>
     fca:	2000      	movs	r0, #0
			return i;
     fcc:	b2c0      	uxtb	r0, r0
     fce:	e7f6      	b.n	fbe <_sercom_get_sercom_inst_index+0x22>
     fd0:	000025d8 	.word	0x000025d8

00000fd4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fd4:	4770      	bx	lr
	...

00000fd8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fd8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     fda:	4b0a      	ldr	r3, [pc, #40]	; (1004 <_sercom_set_handler+0x2c>)
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2b00      	cmp	r3, #0
     fe0:	d10c      	bne.n	ffc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fe2:	4c09      	ldr	r4, [pc, #36]	; (1008 <_sercom_set_handler+0x30>)
     fe4:	4d09      	ldr	r5, [pc, #36]	; (100c <_sercom_set_handler+0x34>)
     fe6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     fe8:	4b09      	ldr	r3, [pc, #36]	; (1010 <_sercom_set_handler+0x38>)
     fea:	2200      	movs	r2, #0
     fec:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fee:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     ff0:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ff2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     ff4:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     ff6:	3201      	adds	r2, #1
     ff8:	4b02      	ldr	r3, [pc, #8]	; (1004 <_sercom_set_handler+0x2c>)
     ffa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ffc:	0080      	lsls	r0, r0, #2
     ffe:	4b02      	ldr	r3, [pc, #8]	; (1008 <_sercom_set_handler+0x30>)
    1000:	50c1      	str	r1, [r0, r3]
}
    1002:	bd30      	pop	{r4, r5, pc}
    1004:	2000010a 	.word	0x2000010a
    1008:	2000010c 	.word	0x2000010c
    100c:	00000fd5 	.word	0x00000fd5
    1010:	200001b0 	.word	0x200001b0

00001014 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1014:	b510      	push	{r4, lr}
    1016:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1018:	ac01      	add	r4, sp, #4
    101a:	2309      	movs	r3, #9
    101c:	7023      	strb	r3, [r4, #0]
    101e:	3301      	adds	r3, #1
    1020:	7063      	strb	r3, [r4, #1]
    1022:	3301      	adds	r3, #1
    1024:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1026:	4b02      	ldr	r3, [pc, #8]	; (1030 <_sercom_get_interrupt_vector+0x1c>)
    1028:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    102a:	5620      	ldrsb	r0, [r4, r0]
}
    102c:	b002      	add	sp, #8
    102e:	bd10      	pop	{r4, pc}
    1030:	00000f9d 	.word	0x00000f9d

00001034 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1034:	b510      	push	{r4, lr}
    1036:	4b02      	ldr	r3, [pc, #8]	; (1040 <SERCOM0_Handler+0xc>)
    1038:	681b      	ldr	r3, [r3, #0]
    103a:	2000      	movs	r0, #0
    103c:	4798      	blx	r3
    103e:	bd10      	pop	{r4, pc}
    1040:	2000010c 	.word	0x2000010c

00001044 <SERCOM1_Handler>:
    1044:	b510      	push	{r4, lr}
    1046:	4b02      	ldr	r3, [pc, #8]	; (1050 <SERCOM1_Handler+0xc>)
    1048:	685b      	ldr	r3, [r3, #4]
    104a:	2001      	movs	r0, #1
    104c:	4798      	blx	r3
    104e:	bd10      	pop	{r4, pc}
    1050:	2000010c 	.word	0x2000010c

00001054 <SERCOM2_Handler>:
    1054:	b510      	push	{r4, lr}
    1056:	4b02      	ldr	r3, [pc, #8]	; (1060 <SERCOM2_Handler+0xc>)
    1058:	689b      	ldr	r3, [r3, #8]
    105a:	2002      	movs	r0, #2
    105c:	4798      	blx	r3
    105e:	bd10      	pop	{r4, pc}
    1060:	2000010c 	.word	0x2000010c

00001064 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1064:	b5f0      	push	{r4, r5, r6, r7, lr}
    1066:	b08b      	sub	sp, #44	; 0x2c
    1068:	0005      	movs	r5, r0
    106a:	000c      	movs	r4, r1
    106c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    106e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1070:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1072:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1074:	079b      	lsls	r3, r3, #30
    1076:	d501      	bpl.n	107c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1078:	b00b      	add	sp, #44	; 0x2c
    107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    107c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    107e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1080:	07db      	lsls	r3, r3, #31
    1082:	d4f9      	bmi.n	1078 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1084:	0008      	movs	r0, r1
    1086:	4b6f      	ldr	r3, [pc, #444]	; (1244 <spi_init+0x1e0>)
    1088:	4798      	blx	r3
    108a:	4a6f      	ldr	r2, [pc, #444]	; (1248 <spi_init+0x1e4>)
    108c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    108e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1090:	2301      	movs	r3, #1
    1092:	40bb      	lsls	r3, r7
    1094:	430b      	orrs	r3, r1
    1096:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1098:	a909      	add	r1, sp, #36	; 0x24
    109a:	2724      	movs	r7, #36	; 0x24
    109c:	5df3      	ldrb	r3, [r6, r7]
    109e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10a0:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10a2:	b2c3      	uxtb	r3, r0
    10a4:	9301      	str	r3, [sp, #4]
    10a6:	0018      	movs	r0, r3
    10a8:	4b68      	ldr	r3, [pc, #416]	; (124c <spi_init+0x1e8>)
    10aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10ac:	9801      	ldr	r0, [sp, #4]
    10ae:	4b68      	ldr	r3, [pc, #416]	; (1250 <spi_init+0x1ec>)
    10b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10b2:	5df0      	ldrb	r0, [r6, r7]
    10b4:	2100      	movs	r1, #0
    10b6:	4b67      	ldr	r3, [pc, #412]	; (1254 <spi_init+0x1f0>)
    10b8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10ba:	7833      	ldrb	r3, [r6, #0]
    10bc:	2b01      	cmp	r3, #1
    10be:	d03f      	beq.n	1140 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    10c0:	7833      	ldrb	r3, [r6, #0]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d103      	bne.n	10ce <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    10c6:	6823      	ldr	r3, [r4, #0]
    10c8:	2208      	movs	r2, #8
    10ca:	4313      	orrs	r3, r2
    10cc:	6023      	str	r3, [r4, #0]
    10ce:	002b      	movs	r3, r5
    10d0:	330c      	adds	r3, #12
    10d2:	0029      	movs	r1, r5
    10d4:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    10d6:	2200      	movs	r2, #0
    10d8:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    10da:	428b      	cmp	r3, r1
    10dc:	d1fc      	bne.n	10d8 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    10de:	2300      	movs	r3, #0
    10e0:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    10e2:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    10e4:	2400      	movs	r4, #0
    10e6:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    10e8:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    10ea:	3336      	adds	r3, #54	; 0x36
    10ec:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    10ee:	3301      	adds	r3, #1
    10f0:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    10f2:	3301      	adds	r3, #1
    10f4:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    10f6:	3b35      	subs	r3, #53	; 0x35
    10f8:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    10fa:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    10fc:	6828      	ldr	r0, [r5, #0]
    10fe:	4b51      	ldr	r3, [pc, #324]	; (1244 <spi_init+0x1e0>)
    1100:	4798      	blx	r3
    1102:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1104:	4954      	ldr	r1, [pc, #336]	; (1258 <spi_init+0x1f4>)
    1106:	4b55      	ldr	r3, [pc, #340]	; (125c <spi_init+0x1f8>)
    1108:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    110a:	00bf      	lsls	r7, r7, #2
    110c:	4b54      	ldr	r3, [pc, #336]	; (1260 <spi_init+0x1fc>)
    110e:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1110:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1112:	ab04      	add	r3, sp, #16
    1114:	2280      	movs	r2, #128	; 0x80
    1116:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1118:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    111a:	3a7f      	subs	r2, #127	; 0x7f
    111c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    111e:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1120:	7833      	ldrb	r3, [r6, #0]
    1122:	2b00      	cmp	r3, #0
    1124:	d102      	bne.n	112c <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1126:	2200      	movs	r2, #0
    1128:	ab04      	add	r3, sp, #16
    112a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    112c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    112e:	9305      	str	r3, [sp, #20]
    1130:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1132:	9306      	str	r3, [sp, #24]
    1134:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1136:	9307      	str	r3, [sp, #28]
    1138:	6b73      	ldr	r3, [r6, #52]	; 0x34
    113a:	9308      	str	r3, [sp, #32]
    113c:	2400      	movs	r4, #0
    113e:	e00b      	b.n	1158 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1140:	6823      	ldr	r3, [r4, #0]
    1142:	220c      	movs	r2, #12
    1144:	4313      	orrs	r3, r2
    1146:	6023      	str	r3, [r4, #0]
    1148:	e7ba      	b.n	10c0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    114a:	0038      	movs	r0, r7
    114c:	4b45      	ldr	r3, [pc, #276]	; (1264 <spi_init+0x200>)
    114e:	4798      	blx	r3
    1150:	e00a      	b.n	1168 <spi_init+0x104>
    1152:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1154:	2c04      	cmp	r4, #4
    1156:	d010      	beq.n	117a <spi_init+0x116>
    1158:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    115a:	00a3      	lsls	r3, r4, #2
    115c:	aa02      	add	r2, sp, #8
    115e:	200c      	movs	r0, #12
    1160:	1812      	adds	r2, r2, r0
    1162:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1164:	2800      	cmp	r0, #0
    1166:	d0f0      	beq.n	114a <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    1168:	1c43      	adds	r3, r0, #1
    116a:	d0f2      	beq.n	1152 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    116c:	a904      	add	r1, sp, #16
    116e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1170:	0c00      	lsrs	r0, r0, #16
    1172:	b2c0      	uxtb	r0, r0
    1174:	4b3c      	ldr	r3, [pc, #240]	; (1268 <spi_init+0x204>)
    1176:	4798      	blx	r3
    1178:	e7eb      	b.n	1152 <spi_init+0xee>
	module->mode             = config->mode;
    117a:	7833      	ldrb	r3, [r6, #0]
    117c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    117e:	7c33      	ldrb	r3, [r6, #16]
    1180:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1182:	7cb3      	ldrb	r3, [r6, #18]
    1184:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1186:	7d33      	ldrb	r3, [r6, #20]
    1188:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    118a:	2200      	movs	r2, #0
    118c:	ab02      	add	r3, sp, #8
    118e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1190:	7833      	ldrb	r3, [r6, #0]
    1192:	2b01      	cmp	r3, #1
    1194:	d012      	beq.n	11bc <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    1196:	7833      	ldrb	r3, [r6, #0]
    1198:	2b00      	cmp	r3, #0
    119a:	d126      	bne.n	11ea <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    119c:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    119e:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    11a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    11a2:	7ff1      	ldrb	r1, [r6, #31]
    11a4:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    11a6:	7fb4      	ldrb	r4, [r6, #30]
    11a8:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    11aa:	4319      	orrs	r1, r3
    11ac:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    11ae:	2320      	movs	r3, #32
    11b0:	5cf3      	ldrb	r3, [r6, r3]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d01b      	beq.n	11ee <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    11b6:	2340      	movs	r3, #64	; 0x40
    11b8:	431a      	orrs	r2, r3
    11ba:	e018      	b.n	11ee <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11bc:	6828      	ldr	r0, [r5, #0]
    11be:	4b21      	ldr	r3, [pc, #132]	; (1244 <spi_init+0x1e0>)
    11c0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11c2:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    11c4:	b2c0      	uxtb	r0, r0
    11c6:	4b29      	ldr	r3, [pc, #164]	; (126c <spi_init+0x208>)
    11c8:	4798      	blx	r3
    11ca:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    11cc:	ab02      	add	r3, sp, #8
    11ce:	1d9a      	adds	r2, r3, #6
    11d0:	69b0      	ldr	r0, [r6, #24]
    11d2:	4b27      	ldr	r3, [pc, #156]	; (1270 <spi_init+0x20c>)
    11d4:	4798      	blx	r3
    11d6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11d8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11da:	2b00      	cmp	r3, #0
    11dc:	d000      	beq.n	11e0 <spi_init+0x17c>
    11de:	e74b      	b.n	1078 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    11e0:	ab02      	add	r3, sp, #8
    11e2:	3306      	adds	r3, #6
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	733b      	strb	r3, [r7, #12]
    11e8:	e7d5      	b.n	1196 <spi_init+0x132>
	uint32_t ctrlb = 0;
    11ea:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    11ec:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    11ee:	6873      	ldr	r3, [r6, #4]
    11f0:	68b1      	ldr	r1, [r6, #8]
    11f2:	430b      	orrs	r3, r1
    11f4:	68f1      	ldr	r1, [r6, #12]
    11f6:	430b      	orrs	r3, r1
    11f8:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    11fa:	7c31      	ldrb	r1, [r6, #16]
    11fc:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    11fe:	7c71      	ldrb	r1, [r6, #17]
    1200:	2900      	cmp	r1, #0
    1202:	d103      	bne.n	120c <spi_init+0x1a8>
    1204:	491b      	ldr	r1, [pc, #108]	; (1274 <spi_init+0x210>)
    1206:	7889      	ldrb	r1, [r1, #2]
    1208:	0789      	lsls	r1, r1, #30
    120a:	d501      	bpl.n	1210 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    120c:	2180      	movs	r1, #128	; 0x80
    120e:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    1210:	7cb1      	ldrb	r1, [r6, #18]
    1212:	2900      	cmp	r1, #0
    1214:	d002      	beq.n	121c <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1216:	2180      	movs	r1, #128	; 0x80
    1218:	0289      	lsls	r1, r1, #10
    121a:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    121c:	7cf1      	ldrb	r1, [r6, #19]
    121e:	2900      	cmp	r1, #0
    1220:	d002      	beq.n	1228 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1222:	2180      	movs	r1, #128	; 0x80
    1224:	0089      	lsls	r1, r1, #2
    1226:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    1228:	7d31      	ldrb	r1, [r6, #20]
    122a:	2900      	cmp	r1, #0
    122c:	d002      	beq.n	1234 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    122e:	2180      	movs	r1, #128	; 0x80
    1230:	0189      	lsls	r1, r1, #6
    1232:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    1234:	6839      	ldr	r1, [r7, #0]
    1236:	430b      	orrs	r3, r1
    1238:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    123a:	687b      	ldr	r3, [r7, #4]
    123c:	431a      	orrs	r2, r3
    123e:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    1240:	2000      	movs	r0, #0
    1242:	e719      	b.n	1078 <spi_init+0x14>
    1244:	00000f9d 	.word	0x00000f9d
    1248:	40000400 	.word	0x40000400
    124c:	00001f7d 	.word	0x00001f7d
    1250:	00001ef1 	.word	0x00001ef1
    1254:	00000e91 	.word	0x00000e91
    1258:	00001279 	.word	0x00001279
    125c:	00000fd9 	.word	0x00000fd9
    1260:	200001b0 	.word	0x200001b0
    1264:	00000edd 	.word	0x00000edd
    1268:	00002075 	.word	0x00002075
    126c:	00001f99 	.word	0x00001f99
    1270:	00000e69 	.word	0x00000e69
    1274:	41002000 	.word	0x41002000

00001278 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    127a:	0080      	lsls	r0, r0, #2
    127c:	4b86      	ldr	r3, [pc, #536]	; (1498 <_spi_interrupt_handler+0x220>)
    127e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1280:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1282:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1284:	5ce3      	ldrb	r3, [r4, r3]
    1286:	2236      	movs	r2, #54	; 0x36
    1288:	5ca7      	ldrb	r7, [r4, r2]
    128a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    128c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    128e:	7db5      	ldrb	r5, [r6, #22]
    1290:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1292:	07eb      	lsls	r3, r5, #31
    1294:	d52e      	bpl.n	12f4 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1296:	7963      	ldrb	r3, [r4, #5]
    1298:	2b01      	cmp	r3, #1
    129a:	d025      	beq.n	12e8 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    129c:	2b00      	cmp	r3, #0
    129e:	d129      	bne.n	12f4 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    12a0:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    12a2:	2b00      	cmp	r3, #0
    12a4:	d026      	beq.n	12f4 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12a6:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12aa:	7813      	ldrb	r3, [r2, #0]
    12ac:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    12ae:	1c50      	adds	r0, r2, #1
    12b0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    12b2:	79a0      	ldrb	r0, [r4, #6]
    12b4:	2801      	cmp	r0, #1
    12b6:	d100      	bne.n	12ba <_spi_interrupt_handler+0x42>
    12b8:	e06b      	b.n	1392 <_spi_interrupt_handler+0x11a>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12ba:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    12bc:	05db      	lsls	r3, r3, #23
    12be:	0ddb      	lsrs	r3, r3, #23
    12c0:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    12c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12c4:	3b01      	subs	r3, #1
    12c6:	b29b      	uxth	r3, r3
    12c8:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    12ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    12cc:	b29b      	uxth	r3, r3
    12ce:	2b00      	cmp	r3, #0
    12d0:	d110      	bne.n	12f4 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    12d2:	3301      	adds	r3, #1
    12d4:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    12d6:	7a63      	ldrb	r3, [r4, #9]
    12d8:	2b01      	cmp	r3, #1
    12da:	d10b      	bne.n	12f4 <_spi_interrupt_handler+0x7c>
    12dc:	79e3      	ldrb	r3, [r4, #7]
    12de:	2b00      	cmp	r3, #0
    12e0:	d108      	bne.n	12f4 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    12e2:	3302      	adds	r3, #2
    12e4:	75b3      	strb	r3, [r6, #22]
    12e6:	e005      	b.n	12f4 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    12e8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    12ea:	2b00      	cmp	r3, #0
    12ec:	d040      	beq.n	1370 <_spi_interrupt_handler+0xf8>
			(module->dir != SPI_DIRECTION_READ))
    12ee:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    12f0:	2b00      	cmp	r3, #0
    12f2:	d1d8      	bne.n	12a6 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    12f4:	076b      	lsls	r3, r5, #29
    12f6:	d513      	bpl.n	1320 <_spi_interrupt_handler+0xa8>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12f8:	8b73      	ldrh	r3, [r6, #26]
    12fa:	075b      	lsls	r3, r3, #29
    12fc:	d553      	bpl.n	13a6 <_spi_interrupt_handler+0x12e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    12fe:	7a63      	ldrb	r3, [r4, #9]
    1300:	2b01      	cmp	r3, #1
    1302:	d008      	beq.n	1316 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1304:	221e      	movs	r2, #30
    1306:	2338      	movs	r3, #56	; 0x38
    1308:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    130a:	3b35      	subs	r3, #53	; 0x35
    130c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    130e:	3302      	adds	r3, #2
    1310:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1312:	073b      	lsls	r3, r7, #28
    1314:	d443      	bmi.n	139e <_spi_interrupt_handler+0x126>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1316:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1318:	8b73      	ldrh	r3, [r6, #26]
    131a:	2204      	movs	r2, #4
    131c:	4313      	orrs	r3, r2
    131e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1320:	07ab      	lsls	r3, r5, #30
    1322:	d515      	bpl.n	1350 <_spi_interrupt_handler+0xd8>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1324:	7963      	ldrb	r3, [r4, #5]
    1326:	2b00      	cmp	r3, #0
    1328:	d10e      	bne.n	1348 <_spi_interrupt_handler+0xd0>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    132a:	3307      	adds	r3, #7
    132c:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    132e:	3b05      	subs	r3, #5
    1330:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1332:	3301      	adds	r3, #1
    1334:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    1336:	2300      	movs	r3, #0
    1338:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    133a:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    133c:	3338      	adds	r3, #56	; 0x38
    133e:	2200      	movs	r2, #0
    1340:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    1342:	06fb      	lsls	r3, r7, #27
    1344:	d500      	bpl.n	1348 <_spi_interrupt_handler+0xd0>
    1346:	e07f      	b.n	1448 <_spi_interrupt_handler+0x1d0>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1348:	7963      	ldrb	r3, [r4, #5]
    134a:	2b01      	cmp	r3, #1
    134c:	d100      	bne.n	1350 <_spi_interrupt_handler+0xd8>
    134e:	e07f      	b.n	1450 <_spi_interrupt_handler+0x1d8>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1350:	072b      	lsls	r3, r5, #28
    1352:	d508      	bpl.n	1366 <_spi_interrupt_handler+0xee>
			if (module->mode == SPI_MODE_SLAVE) {
    1354:	7963      	ldrb	r3, [r4, #5]
    1356:	2b00      	cmp	r3, #0
    1358:	d105      	bne.n	1366 <_spi_interrupt_handler+0xee>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    135a:	3308      	adds	r3, #8
    135c:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    135e:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1360:	06bb      	lsls	r3, r7, #26
    1362:	d500      	bpl.n	1366 <_spi_interrupt_handler+0xee>
    1364:	e08a      	b.n	147c <_spi_interrupt_handler+0x204>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1366:	b26d      	sxtb	r5, r5
    1368:	2d00      	cmp	r5, #0
    136a:	da00      	bge.n	136e <_spi_interrupt_handler+0xf6>
    136c:	e08a      	b.n	1484 <_spi_interrupt_handler+0x20c>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    1370:	4b4a      	ldr	r3, [pc, #296]	; (149c <_spi_interrupt_handler+0x224>)
    1372:	881b      	ldrh	r3, [r3, #0]
    1374:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1376:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1378:	3b01      	subs	r3, #1
    137a:	b29b      	uxth	r3, r3
    137c:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    137e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1380:	b29b      	uxth	r3, r3
    1382:	2b00      	cmp	r3, #0
    1384:	d101      	bne.n	138a <_spi_interrupt_handler+0x112>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1386:	3301      	adds	r3, #1
    1388:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    138a:	7963      	ldrb	r3, [r4, #5]
		if (0
    138c:	2b01      	cmp	r3, #1
    138e:	d0ae      	beq.n	12ee <_spi_interrupt_handler+0x76>
    1390:	e784      	b.n	129c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1392:	7850      	ldrb	r0, [r2, #1]
    1394:	0200      	lsls	r0, r0, #8
    1396:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1398:	3202      	adds	r2, #2
    139a:	62e2      	str	r2, [r4, #44]	; 0x2c
    139c:	e78e      	b.n	12bc <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    139e:	0020      	movs	r0, r4
    13a0:	69a3      	ldr	r3, [r4, #24]
    13a2:	4798      	blx	r3
    13a4:	e7b7      	b.n	1316 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    13a6:	7a63      	ldrb	r3, [r4, #9]
    13a8:	2b01      	cmp	r3, #1
    13aa:	d027      	beq.n	13fc <_spi_interrupt_handler+0x184>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13ac:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13b0:	05db      	lsls	r3, r3, #23
    13b2:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13b4:	b2da      	uxtb	r2, r3
    13b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    13b8:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    13ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    13bc:	1c51      	adds	r1, r2, #1
    13be:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13c0:	79a1      	ldrb	r1, [r4, #6]
    13c2:	2901      	cmp	r1, #1
    13c4:	d033      	beq.n	142e <_spi_interrupt_handler+0x1b6>
	module->remaining_rx_buffer_length--;
    13c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13c8:	3b01      	subs	r3, #1
    13ca:	b29b      	uxth	r3, r3
    13cc:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    13ce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13d0:	b29b      	uxth	r3, r3
    13d2:	2b00      	cmp	r3, #0
    13d4:	d1a4      	bne.n	1320 <_spi_interrupt_handler+0xa8>
					module->status = STATUS_OK;
    13d6:	2200      	movs	r2, #0
    13d8:	3338      	adds	r3, #56	; 0x38
    13da:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13dc:	3b34      	subs	r3, #52	; 0x34
    13de:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13e0:	7a63      	ldrb	r3, [r4, #9]
    13e2:	2b02      	cmp	r3, #2
    13e4:	d029      	beq.n	143a <_spi_interrupt_handler+0x1c2>
					} else if (module->dir == SPI_DIRECTION_READ) {
    13e6:	7a63      	ldrb	r3, [r4, #9]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d000      	beq.n	13ee <_spi_interrupt_handler+0x176>
    13ec:	e798      	b.n	1320 <_spi_interrupt_handler+0xa8>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    13ee:	07bb      	lsls	r3, r7, #30
    13f0:	d400      	bmi.n	13f4 <_spi_interrupt_handler+0x17c>
    13f2:	e795      	b.n	1320 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13f4:	0020      	movs	r0, r4
    13f6:	6923      	ldr	r3, [r4, #16]
    13f8:	4798      	blx	r3
    13fa:	e791      	b.n	1320 <_spi_interrupt_handler+0xa8>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13fc:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    13fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1400:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1402:	3b01      	subs	r3, #1
    1404:	b29b      	uxth	r3, r3
    1406:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1408:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    140a:	b29b      	uxth	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	d000      	beq.n	1412 <_spi_interrupt_handler+0x19a>
    1410:	e786      	b.n	1320 <_spi_interrupt_handler+0xa8>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1412:	3304      	adds	r3, #4
    1414:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1416:	2200      	movs	r2, #0
    1418:	3334      	adds	r3, #52	; 0x34
    141a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    141c:	3b35      	subs	r3, #53	; 0x35
    141e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1420:	07fb      	lsls	r3, r7, #31
    1422:	d400      	bmi.n	1426 <_spi_interrupt_handler+0x1ae>
    1424:	e77c      	b.n	1320 <_spi_interrupt_handler+0xa8>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1426:	0020      	movs	r0, r4
    1428:	68e3      	ldr	r3, [r4, #12]
    142a:	4798      	blx	r3
    142c:	e778      	b.n	1320 <_spi_interrupt_handler+0xa8>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    142e:	0a1b      	lsrs	r3, r3, #8
    1430:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1432:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1434:	3301      	adds	r3, #1
    1436:	62a3      	str	r3, [r4, #40]	; 0x28
    1438:	e7c5      	b.n	13c6 <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    143a:	077b      	lsls	r3, r7, #29
    143c:	d400      	bmi.n	1440 <_spi_interrupt_handler+0x1c8>
    143e:	e76f      	b.n	1320 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1440:	0020      	movs	r0, r4
    1442:	6963      	ldr	r3, [r4, #20]
    1444:	4798      	blx	r3
    1446:	e76b      	b.n	1320 <_spi_interrupt_handler+0xa8>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1448:	0020      	movs	r0, r4
    144a:	69e3      	ldr	r3, [r4, #28]
    144c:	4798      	blx	r3
    144e:	e77b      	b.n	1348 <_spi_interrupt_handler+0xd0>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1450:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1452:	2b01      	cmp	r3, #1
    1454:	d000      	beq.n	1458 <_spi_interrupt_handler+0x1e0>
    1456:	e786      	b.n	1366 <_spi_interrupt_handler+0xee>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1458:	79e3      	ldrb	r3, [r4, #7]
    145a:	2b00      	cmp	r3, #0
    145c:	d000      	beq.n	1460 <_spi_interrupt_handler+0x1e8>
    145e:	e782      	b.n	1366 <_spi_interrupt_handler+0xee>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1460:	3302      	adds	r3, #2
    1462:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1464:	3301      	adds	r3, #1
    1466:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1468:	2200      	movs	r2, #0
    146a:	3335      	adds	r3, #53	; 0x35
    146c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    146e:	07fb      	lsls	r3, r7, #31
    1470:	d400      	bmi.n	1474 <_spi_interrupt_handler+0x1fc>
    1472:	e76d      	b.n	1350 <_spi_interrupt_handler+0xd8>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1474:	0020      	movs	r0, r4
    1476:	68e3      	ldr	r3, [r4, #12]
    1478:	4798      	blx	r3
    147a:	e769      	b.n	1350 <_spi_interrupt_handler+0xd8>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    147c:	0020      	movs	r0, r4
    147e:	6a23      	ldr	r3, [r4, #32]
    1480:	4798      	blx	r3
    1482:	e770      	b.n	1366 <_spi_interrupt_handler+0xee>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1484:	2380      	movs	r3, #128	; 0x80
    1486:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1488:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    148a:	067b      	lsls	r3, r7, #25
    148c:	d400      	bmi.n	1490 <_spi_interrupt_handler+0x218>
    148e:	e76e      	b.n	136e <_spi_interrupt_handler+0xf6>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1490:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1492:	0020      	movs	r0, r4
    1494:	4798      	blx	r3
}
    1496:	e76a      	b.n	136e <_spi_interrupt_handler+0xf6>
    1498:	200001b0 	.word	0x200001b0
    149c:	200001bc 	.word	0x200001bc

000014a0 <detect_cube>:
static volatile uint32_t cubes_detected = 0;
extern  volatile uint8_t cubeOutputs[4];



bool detect_cube(bool S0, bool S1, bool S2, uint8_t place) {
    14a0:	b510      	push	{r4, lr}
    14a2:	001c      	movs	r4, r3
	uint16_t value = 0;
	
	select_mux(S0, S1, S2);
    14a4:	4b0f      	ldr	r3, [pc, #60]	; (14e4 <detect_cube+0x44>)
    14a6:	4798      	blx	r3
	switch (place)
    14a8:	2c01      	cmp	r4, #1
    14aa:	d00f      	beq.n	14cc <detect_cube+0x2c>
    14ac:	2c00      	cmp	r4, #0
    14ae:	d005      	beq.n	14bc <detect_cube+0x1c>
    14b0:	2c02      	cmp	r4, #2
    14b2:	d00f      	beq.n	14d4 <detect_cube+0x34>
    14b4:	2c03      	cmp	r4, #3
    14b6:	d011      	beq.n	14dc <detect_cube+0x3c>
	uint16_t value = 0;
    14b8:	2300      	movs	r3, #0
    14ba:	e002      	b.n	14c2 <detect_cube+0x22>
	{
		case 0:
			value = read_ones();
    14bc:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <detect_cube+0x48>)
    14be:	4798      	blx	r3
    14c0:	0003      	movs	r3, r0
    14c2:	2032      	movs	r0, #50	; 0x32
    14c4:	4298      	cmp	r0, r3
    14c6:	4180      	sbcs	r0, r0
    14c8:	4240      	negs	r0, r0
	if (value > CUBE_DETECT_THRESHOLD) {
		return true;
	} else {
		return false;
	}
}
    14ca:	bd10      	pop	{r4, pc}
			value = read_tens();
    14cc:	4b07      	ldr	r3, [pc, #28]	; (14ec <detect_cube+0x4c>)
    14ce:	4798      	blx	r3
    14d0:	0003      	movs	r3, r0
			break;
    14d2:	e7f6      	b.n	14c2 <detect_cube+0x22>
			value = read_hndrds();
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <detect_cube+0x50>)
    14d6:	4798      	blx	r3
    14d8:	0003      	movs	r3, r0
			break;
    14da:	e7f2      	b.n	14c2 <detect_cube+0x22>
			value = read_misc();
    14dc:	4b05      	ldr	r3, [pc, #20]	; (14f4 <detect_cube+0x54>)
    14de:	4798      	blx	r3
    14e0:	0003      	movs	r3, r0
			break;
    14e2:	e7ee      	b.n	14c2 <detect_cube+0x22>
    14e4:	000018ad 	.word	0x000018ad
    14e8:	000018f5 	.word	0x000018f5
    14ec:	00001905 	.word	0x00001905
    14f0:	00001915 	.word	0x00001915
    14f4:	00001925 	.word	0x00001925

000014f8 <formatData>:
{
	uint8_t i = 0;
	uint32_t temp = 0;
	for(i=0;i<4;i++)
	{
		cubeOutputs[i] = (uint8_t)((cubes_detected >> (24 - 8*i)) & 0xFF) ;
    14f8:	0e02      	lsrs	r2, r0, #24
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <formatData+0x18>)
    14fc:	701a      	strb	r2, [r3, #0]
    14fe:	0c02      	lsrs	r2, r0, #16
    1500:	b2d2      	uxtb	r2, r2
    1502:	705a      	strb	r2, [r3, #1]
    1504:	0a02      	lsrs	r2, r0, #8
    1506:	b2d2      	uxtb	r2, r2
    1508:	709a      	strb	r2, [r3, #2]
    150a:	b2c0      	uxtb	r0, r0
    150c:	70d8      	strb	r0, [r3, #3]
	}
	
}
    150e:	4770      	bx	lr
    1510:	20000298 	.word	0x20000298

00001514 <read_all_values>:

/*
 * Reads through all different values, detects the cube, 
 * creates an number in the form of the values
 */
void read_all_values(){
    1514:	b5f0      	push	{r4, r5, r6, r7, lr}
    1516:	46de      	mov	lr, fp
    1518:	4657      	mov	r7, sl
    151a:	464e      	mov	r6, r9
    151c:	4645      	mov	r5, r8
    151e:	b5e0      	push	{r5, r6, r7, lr}
    1520:	b085      	sub	sp, #20
	uint8_t i, place;
	uint8_t ind;
	static bool S0;
	static bool S1;
	static bool S2;
    volatile bool cube = false;
    1522:	2300      	movs	r3, #0
    1524:	aa02      	add	r2, sp, #8
    1526:	71d3      	strb	r3, [r2, #7]
	volatile uint32_t cubes_detected = 0;
    1528:	9302      	str	r3, [sp, #8]
	
	for (i = 0; i < 8; i++)
    152a:	2600      	movs	r6, #0
	{
		S0 = (bool) (i & 0x1);
    152c:	4b35      	ldr	r3, [pc, #212]	; (1604 <read_all_values+0xf0>)
    152e:	469b      	mov	fp, r3
    1530:	e023      	b.n	157a <read_all_values+0x66>
		S1 = (bool) ((i >> 1) & 0x1);
		S2 = (bool) ((i >> 2) & 0x1);
		for (place = 0; place < 3; place++)
    1532:	3401      	adds	r4, #1
    1534:	b2e4      	uxtb	r4, r4
    1536:	350a      	adds	r5, #10
    1538:	b2ed      	uxtb	r5, r5
    153a:	2c03      	cmp	r4, #3
    153c:	d018      	beq.n	1570 <read_all_values+0x5c>
		{
			ind = 2 + i + place*10;
			// Put boolean value from detect cube at place indicated by ind
			//delay_ms(10);
			cube = detect_cube(S0, S1, S2, place);
    153e:	464b      	mov	r3, r9
    1540:	781a      	ldrb	r2, [r3, #0]
    1542:	4643      	mov	r3, r8
    1544:	7819      	ldrb	r1, [r3, #0]
    1546:	7838      	ldrb	r0, [r7, #0]
    1548:	0023      	movs	r3, r4
    154a:	4e2f      	ldr	r6, [pc, #188]	; (1608 <read_all_values+0xf4>)
    154c:	47b0      	blx	r6
    154e:	ab02      	add	r3, sp, #8
    1550:	71d8      	strb	r0, [r3, #7]
    1552:	3307      	adds	r3, #7
			//delay_ms(10);
			if(cube == true)
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	2b00      	cmp	r3, #0
    1558:	d0eb      	beq.n	1532 <read_all_values+0x1e>
			{
				cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    155a:	ab02      	add	r3, sp, #8
    155c:	1dda      	adds	r2, r3, #7
    155e:	79db      	ldrb	r3, [r3, #7]
    1560:	b2db      	uxtb	r3, r3
    1562:	9902      	ldr	r1, [sp, #8]
    1564:	40ab      	lsls	r3, r5
    1566:	430b      	orrs	r3, r1
    1568:	9302      	str	r3, [sp, #8]
				cube = false;
    156a:	2300      	movs	r3, #0
    156c:	7013      	strb	r3, [r2, #0]
    156e:	e7e0      	b.n	1532 <read_all_values+0x1e>
    1570:	9e01      	ldr	r6, [sp, #4]
	for (i = 0; i < 8; i++)
    1572:	3601      	adds	r6, #1
    1574:	b2f6      	uxtb	r6, r6
    1576:	2e08      	cmp	r6, #8
    1578:	d014      	beq.n	15a4 <read_all_values+0x90>
		S0 = (bool) (i & 0x1);
    157a:	2301      	movs	r3, #1
    157c:	001a      	movs	r2, r3
    157e:	4032      	ands	r2, r6
    1580:	4659      	mov	r1, fp
    1582:	700a      	strb	r2, [r1, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    1584:	0872      	lsrs	r2, r6, #1
    1586:	401a      	ands	r2, r3
    1588:	4920      	ldr	r1, [pc, #128]	; (160c <read_all_values+0xf8>)
    158a:	700a      	strb	r2, [r1, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    158c:	08b2      	lsrs	r2, r6, #2
    158e:	4013      	ands	r3, r2
    1590:	4a1f      	ldr	r2, [pc, #124]	; (1610 <read_all_values+0xfc>)
    1592:	7013      	strb	r3, [r2, #0]
    1594:	1cb5      	adds	r5, r6, #2
    1596:	b2ed      	uxtb	r5, r5
		for (place = 0; place < 3; place++)
    1598:	2400      	movs	r4, #0
			cube = detect_cube(S0, S1, S2, place);
    159a:	4691      	mov	r9, r2
    159c:	4688      	mov	r8, r1
    159e:	4f19      	ldr	r7, [pc, #100]	; (1604 <read_all_values+0xf0>)
    15a0:	9601      	str	r6, [sp, #4]
    15a2:	e7cc      	b.n	153e <read_all_values+0x2a>
    15a4:	2400      	movs	r4, #0
		}
	}
	
	for (i = 0; i < 6; i++)
	{
		S0 = (bool) (i & 0x1);
    15a6:	4f17      	ldr	r7, [pc, #92]	; (1604 <read_all_values+0xf0>)
		S1 = (bool) ((i >> 1) & 0x1);
    15a8:	4b18      	ldr	r3, [pc, #96]	; (160c <read_all_values+0xf8>)
    15aa:	4699      	mov	r9, r3
		S2 = (bool) ((i >> 2) & 0x1);
    15ac:	4b18      	ldr	r3, [pc, #96]	; (1610 <read_all_values+0xfc>)
    15ae:	469a      	mov	sl, r3
		S0 = (bool) (i & 0x1);
    15b0:	2201      	movs	r2, #1
    15b2:	0010      	movs	r0, r2
    15b4:	4020      	ands	r0, r4
    15b6:	7038      	strb	r0, [r7, #0]
		S1 = (bool) ((i >> 1) & 0x1);
    15b8:	0863      	lsrs	r3, r4, #1
    15ba:	0011      	movs	r1, r2
    15bc:	4019      	ands	r1, r3
    15be:	464d      	mov	r5, r9
    15c0:	7029      	strb	r1, [r5, #0]
		S2 = (bool) ((i >> 2) & 0x1);
    15c2:	08a5      	lsrs	r5, r4, #2
    15c4:	402a      	ands	r2, r5
    15c6:	4655      	mov	r5, sl
    15c8:	702a      	strb	r2, [r5, #0]
		place = 3;
		ind = i + ((i/2)*8);
    15ca:	00db      	lsls	r3, r3, #3
    15cc:	18e3      	adds	r3, r4, r3
    15ce:	b2dd      	uxtb	r5, r3
		// Put boolean value from detect cube at place indicated by ind
		cube = detect_cube(S0, S1, S2, place);
    15d0:	2303      	movs	r3, #3
    15d2:	4e0d      	ldr	r6, [pc, #52]	; (1608 <read_all_values+0xf4>)
    15d4:	47b0      	blx	r6
    15d6:	ab02      	add	r3, sp, #8
    15d8:	71d8      	strb	r0, [r3, #7]
    15da:	3307      	adds	r3, #7
		cubes_detected = cubes_detected | ( (((uint32_t)cube) & 0x1) << ind );
    15dc:	781b      	ldrb	r3, [r3, #0]
    15de:	b2db      	uxtb	r3, r3
    15e0:	9a02      	ldr	r2, [sp, #8]
    15e2:	40ab      	lsls	r3, r5
    15e4:	4313      	orrs	r3, r2
    15e6:	9302      	str	r3, [sp, #8]
	for (i = 0; i < 6; i++)
    15e8:	3401      	adds	r4, #1
    15ea:	b2e4      	uxtb	r4, r4
    15ec:	2c06      	cmp	r4, #6
    15ee:	d1df      	bne.n	15b0 <read_all_values+0x9c>
	}
	formatData(cubes_detected);
    15f0:	9802      	ldr	r0, [sp, #8]
    15f2:	4b08      	ldr	r3, [pc, #32]	; (1614 <read_all_values+0x100>)
    15f4:	4798      	blx	r3
}
    15f6:	b005      	add	sp, #20
    15f8:	bc3c      	pop	{r2, r3, r4, r5}
    15fa:	4690      	mov	r8, r2
    15fc:	4699      	mov	r9, r3
    15fe:	46a2      	mov	sl, r4
    1600:	46ab      	mov	fp, r5
    1602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1604:	20000118 	.word	0x20000118
    1608:	000014a1 	.word	0x000014a1
    160c:	20000119 	.word	0x20000119
    1610:	2000011a 	.word	0x2000011a
    1614:	000014f9 	.word	0x000014f9

00001618 <i2c_read_request_callback>:
	state = port_pin_get_input_level(DETECT_PIN);
	return state;
}

void i2c_read_request_callback(struct i2c_slave_module *const module)
{
    1618:	b510      	push	{r4, lr}
	static uint8_t tempCubeOutputs[4];
	//if( port_pin_get_input_level(DETECT_PIN) == false)
	//{
		
		//delay_cycles_us(2);
		if(sensorsUpdate == false)
    161a:	4b0b      	ldr	r3, [pc, #44]	; (1648 <i2c_read_request_callback+0x30>)
    161c:	781b      	ldrb	r3, [r3, #0]
    161e:	2b00      	cmp	r3, #0
    1620:	d109      	bne.n	1636 <i2c_read_request_callback+0x1e>
		{
			tempCubeOutputs[0]	   = cubeOutputs[0];
    1622:	4a0a      	ldr	r2, [pc, #40]	; (164c <i2c_read_request_callback+0x34>)
    1624:	7811      	ldrb	r1, [r2, #0]
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <i2c_read_request_callback+0x38>)
    1628:	7019      	strb	r1, [r3, #0]
			tempCubeOutputs[1]	   = cubeOutputs[1];
    162a:	7851      	ldrb	r1, [r2, #1]
    162c:	7059      	strb	r1, [r3, #1]
			tempCubeOutputs[2]	   = cubeOutputs[2];
    162e:	7891      	ldrb	r1, [r2, #2]
    1630:	7099      	strb	r1, [r3, #2]
			tempCubeOutputs[3]	   = cubeOutputs[3];
    1632:	78d2      	ldrb	r2, [r2, #3]
    1634:	70da      	strb	r2, [r3, #3]
			//tempCubeOutputs[2]	   = 0x77;
			//tempCubeOutputs[3]	   = 0x11;
		}
		
		//rd_packet.data_length = DATA_LENGTH_SENSORS;
		rd_packet.data_length = DATA_LENGTH_SENSORS;
    1636:	4907      	ldr	r1, [pc, #28]	; (1654 <i2c_read_request_callback+0x3c>)
    1638:	2304      	movs	r3, #4
    163a:	800b      	strh	r3, [r1, #0]
		rd_packet.data        = tempCubeOutputs;
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <i2c_read_request_callback+0x38>)
    163e:	604b      	str	r3, [r1, #4]
		i2c_slave_write_packet_job(module, &rd_packet);
    1640:	4b05      	ldr	r3, [pc, #20]	; (1658 <i2c_read_request_callback+0x40>)
    1642:	4798      	blx	r3
	//}
	
	
}
    1644:	bd10      	pop	{r4, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	20000148 	.word	0x20000148
    164c:	20000298 	.word	0x20000298
    1650:	2000011c 	.word	0x2000011c
    1654:	200001c8 	.word	0x200001c8
    1658:	00000bbf 	.word	0x00000bbf

0000165c <configure_i2c_slave>:
	
}

//! [initialize_i2c]
void configure_i2c_slave(void)
{
    165c:	b530      	push	{r4, r5, lr}
    165e:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    1660:	2200      	movs	r2, #0
    1662:	466b      	mov	r3, sp
    1664:	701a      	strb	r2, [r3, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    1666:	2380      	movs	r3, #128	; 0x80
    1668:	039b      	lsls	r3, r3, #14
    166a:	9301      	str	r3, [sp, #4]
	config->buffer_timeout = 65535;
    166c:	2301      	movs	r3, #1
    166e:	425b      	negs	r3, r3
    1670:	4669      	mov	r1, sp
    1672:	810b      	strh	r3, [r1, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
    1674:	2300      	movs	r3, #0
    1676:	814a      	strh	r2, [r1, #10]
	config->address = 0;
	config->address_mask = 0;
    1678:	81ca      	strh	r2, [r1, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    167a:	740b      	strb	r3, [r1, #16]
#endif
	config->enable_general_call_address = false;
    167c:	744b      	strb	r3, [r1, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    167e:	9205      	str	r2, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    1680:	760b      	strb	r3, [r1, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby = false;
    1682:	768b      	strb	r3, [r1, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
	config->pinmux_pad1 = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1684:	2224      	movs	r2, #36	; 0x24
    1686:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1688:	3201      	adds	r2, #1
    168a:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    168c:	3201      	adds	r2, #1
    168e:	548b      	strb	r3, [r1, r2]
	struct i2c_slave_config config_i2c_slave;
	i2c_slave_get_config_defaults(&config_i2c_slave);
    
	config_i2c_slave.generator_source = GCLK_GENERATOR_3;
    1690:	2303      	movs	r3, #3
    1692:	466a      	mov	r2, sp
    1694:	764b      	strb	r3, [r1, #25]
	config_i2c_slave.address      = SLAVE_ADDRESS;
    1696:	330f      	adds	r3, #15
    1698:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
	
	config_i2c_slave.pinmux_pad0 =  PINMUX_PA22D_SERCOM2_PAD0;
    169a:	4b0f      	ldr	r3, [pc, #60]	; (16d8 <configure_i2c_slave+0x7c>)
    169c:	9307      	str	r3, [sp, #28]
	config_i2c_slave.pinmux_pad1 =  PINMUX_PA23D_SERCOM2_PAD1;
    169e:	4b0f      	ldr	r3, [pc, #60]	; (16dc <configure_i2c_slave+0x80>)
    16a0:	9308      	str	r3, [sp, #32]
	
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE , &config_i2c_slave);
    16a2:	4d0f      	ldr	r5, [pc, #60]	; (16e0 <configure_i2c_slave+0x84>)
    16a4:	490f      	ldr	r1, [pc, #60]	; (16e4 <configure_i2c_slave+0x88>)
    16a6:	0028      	movs	r0, r5
    16a8:	4b0f      	ldr	r3, [pc, #60]	; (16e8 <configure_i2c_slave+0x8c>)
    16aa:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    16ac:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    16ae:	0020      	movs	r0, r4
    16b0:	4b0e      	ldr	r3, [pc, #56]	; (16ec <configure_i2c_slave+0x90>)
    16b2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16b4:	231f      	movs	r3, #31
    16b6:	4018      	ands	r0, r3
    16b8:	3b1e      	subs	r3, #30
    16ba:	4083      	lsls	r3, r0
    16bc:	4a0c      	ldr	r2, [pc, #48]	; (16f0 <configure_i2c_slave+0x94>)
    16be:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    16c0:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    16c2:	2203      	movs	r2, #3
    16c4:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    16c6:	421a      	tst	r2, r3
    16c8:	d1fc      	bne.n	16c4 <configure_i2c_slave+0x68>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    16ca:	6823      	ldr	r3, [r4, #0]
    16cc:	2202      	movs	r2, #2
    16ce:	4313      	orrs	r3, r2
    16d0:	6023      	str	r3, [r4, #0]
	i2c_slave_enable(&i2c_slave_instance);
	
}
    16d2:	b00b      	add	sp, #44	; 0x2c
    16d4:	bd30      	pop	{r4, r5, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	00160003 	.word	0x00160003
    16dc:	00170003 	.word	0x00170003
    16e0:	200001d0 	.word	0x200001d0
    16e4:	42001000 	.word	0x42001000
    16e8:	00000a15 	.word	0x00000a15
    16ec:	00001015 	.word	0x00001015
    16f0:	e000e100 	.word	0xe000e100

000016f4 <configure_i2c_slave_callbacks>:

void configure_i2c_slave_callbacks(void)
{
    16f4:	b510      	push	{r4, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,I2C_SLAVE_CALLBACK_READ_REQUEST);
    16f6:	4c07      	ldr	r4, [pc, #28]	; (1714 <configure_i2c_slave_callbacks+0x20>)
    16f8:	2202      	movs	r2, #2
    16fa:	4907      	ldr	r1, [pc, #28]	; (1718 <configure_i2c_slave_callbacks+0x24>)
    16fc:	0020      	movs	r0, r4
    16fe:	4b07      	ldr	r3, [pc, #28]	; (171c <configure_i2c_slave_callbacks+0x28>)
    1700:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1702:	2225      	movs	r2, #37	; 0x25
    1704:	5ca3      	ldrb	r3, [r4, r2]
    1706:	2104      	movs	r1, #4
    1708:	430b      	orrs	r3, r1
    170a:	54a3      	strb	r3, [r4, r2]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    170c:	6823      	ldr	r3, [r4, #0]
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    170e:	3a23      	subs	r2, #35	; 0x23
    1710:	759a      	strb	r2, [r3, #22]
	i2c_slave_enable_callback(&i2c_slave_instance,I2C_SLAVE_CALLBACK_READ_REQUEST);
}
    1712:	bd10      	pop	{r4, pc}
    1714:	200001d0 	.word	0x200001d0
    1718:	00001619 	.word	0x00001619
    171c:	00000ba5 	.word	0x00000ba5

00001720 <configure_adc>:

struct adc_module adc_instance;
uint16_t* adc_result = NULL;

void configure_adc()
{
    1720:	b510      	push	{r4, lr}
    1722:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1724:	4668      	mov	r0, sp
    1726:	4b1a      	ldr	r3, [pc, #104]	; (1790 <configure_adc+0x70>)
    1728:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    172a:	2002      	movs	r0, #2
    172c:	4b19      	ldr	r3, [pc, #100]	; (1794 <configure_adc+0x74>)
    172e:	4798      	blx	r3
    1730:	4b19      	ldr	r3, [pc, #100]	; (1798 <configure_adc+0x78>)
    1732:	6018      	str	r0, [r3, #0]

	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1734:	2301      	movs	r3, #1
    1736:	466a      	mov	r2, sp
    1738:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CTRLB_PRESCALER_DIV16;
    173a:	2280      	movs	r2, #128	; 0x80
    173c:	0092      	lsls	r2, r2, #2
    173e:	4669      	mov	r1, sp
    1740:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    1742:	3afb      	subs	r2, #251	; 0xfb
    1744:	3aff      	subs	r2, #255	; 0xff
    1746:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1748:	22c0      	movs	r2, #192	; 0xc0
    174a:	0152      	lsls	r2, r2, #5
    174c:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    174e:	2230      	movs	r2, #48	; 0x30
    1750:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    1752:	466a      	mov	r2, sp
    1754:	748b      	strb	r3, [r1, #18]

	adc_init(&adc_instance, ADC, &conf_adc);
    1756:	4c11      	ldr	r4, [pc, #68]	; (179c <configure_adc+0x7c>)
    1758:	4911      	ldr	r1, [pc, #68]	; (17a0 <configure_adc+0x80>)
    175a:	0020      	movs	r0, r4
    175c:	4b11      	ldr	r3, [pc, #68]	; (17a4 <configure_adc+0x84>)
    175e:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1760:	6822      	ldr	r2, [r4, #0]
    1762:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1764:	b25b      	sxtb	r3, r3
    1766:	2b00      	cmp	r3, #0
    1768:	dbfb      	blt.n	1762 <configure_adc+0x42>
    176a:	2180      	movs	r1, #128	; 0x80
    176c:	0209      	lsls	r1, r1, #8
    176e:	4b0e      	ldr	r3, [pc, #56]	; (17a8 <configure_adc+0x88>)
    1770:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1772:	230f      	movs	r3, #15
    1774:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1776:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1778:	7813      	ldrb	r3, [r2, #0]
    177a:	2102      	movs	r1, #2
    177c:	430b      	orrs	r3, r1
    177e:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1780:	4b06      	ldr	r3, [pc, #24]	; (179c <configure_adc+0x7c>)
    1782:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1784:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1786:	b25b      	sxtb	r3, r3
    1788:	2b00      	cmp	r3, #0
    178a:	dbfb      	blt.n	1784 <configure_adc+0x64>
	adc_enable(&adc_instance);
}
    178c:	b00c      	add	sp, #48	; 0x30
    178e:	bd10      	pop	{r4, pc}
    1790:	000001dd 	.word	0x000001dd
    1794:	00002399 	.word	0x00002399
    1798:	20000120 	.word	0x20000120
    179c:	20000204 	.word	0x20000204
    17a0:	42002000 	.word	0x42002000
    17a4:	00000225 	.word	0x00000225
    17a8:	e000e100 	.word	0xe000e100

000017ac <configure_mux_select>:

void configure_mux_select() {
    17ac:	b530      	push	{r4, r5, lr}
    17ae:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    17b0:	ac01      	add	r4, sp, #4
    17b2:	2301      	movs	r3, #1
    17b4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    17b6:	2200      	movs	r2, #0
    17b8:	70a2      	strb	r2, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    17ba:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(MUX_S0, &config_port_pin);
    17bc:	0021      	movs	r1, r4
    17be:	200f      	movs	r0, #15
    17c0:	4d04      	ldr	r5, [pc, #16]	; (17d4 <configure_mux_select+0x28>)
    17c2:	47a8      	blx	r5
	port_pin_set_config(MUX_S1, &config_port_pin);
    17c4:	0021      	movs	r1, r4
    17c6:	2010      	movs	r0, #16
    17c8:	47a8      	blx	r5
	port_pin_set_config(MUX_S2, &config_port_pin);
    17ca:	0021      	movs	r1, r4
    17cc:	2011      	movs	r0, #17
    17ce:	47a8      	blx	r5
}
    17d0:	b003      	add	sp, #12
    17d2:	bd30      	pop	{r4, r5, pc}
    17d4:	000009f1 	.word	0x000009f1

000017d8 <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    17d8:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    17da:	4b2d      	ldr	r3, [pc, #180]	; (1890 <adc_start_read_result+0xb8>)
    17dc:	6819      	ldr	r1, [r3, #0]
    17de:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    17e0:	b25b      	sxtb	r3, r3
    17e2:	2b00      	cmp	r3, #0
    17e4:	dbfb      	blt.n	17de <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    17e6:	690b      	ldr	r3, [r1, #16]
    17e8:	221f      	movs	r2, #31
    17ea:	4393      	bics	r3, r2
    17ec:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    17ee:	6108      	str	r0, [r1, #16]
    17f0:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    17f2:	b25b      	sxtb	r3, r3
    17f4:	2b00      	cmp	r3, #0
    17f6:	dbfb      	blt.n	17f0 <adc_start_read_result+0x18>
    17f8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    17fa:	b25b      	sxtb	r3, r3
    17fc:	2b00      	cmp	r3, #0
    17fe:	dbfb      	blt.n	17f8 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1800:	7b0b      	ldrb	r3, [r1, #12]
    1802:	2202      	movs	r2, #2
    1804:	4313      	orrs	r3, r2
    1806:	730b      	strb	r3, [r1, #12]
    1808:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    180a:	b25b      	sxtb	r3, r3
    180c:	2b00      	cmp	r3, #0
    180e:	dbfb      	blt.n	1808 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1810:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1812:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1814:	2402      	movs	r4, #2
    1816:	e001      	b.n	181c <adc_start_read_result+0x44>
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    1818:	4210      	tst	r0, r2
    181a:	d10a      	bne.n	1832 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    181c:	7e0b      	ldrb	r3, [r1, #24]
    181e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1820:	0002      	movs	r2, r0
    1822:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1824:	421d      	tst	r5, r3
    1826:	d000      	beq.n	182a <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    1828:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    182a:	421c      	tst	r4, r3
    182c:	d0f4      	beq.n	1818 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    182e:	432a      	orrs	r2, r5
    1830:	e7f2      	b.n	1818 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1832:	7e0a      	ldrb	r2, [r1, #24]
    1834:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1836:	2301      	movs	r3, #1
    1838:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    183a:	0750      	lsls	r0, r2, #29
    183c:	d501      	bpl.n	1842 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    183e:	2002      	movs	r0, #2
    1840:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1842:	0792      	lsls	r2, r2, #30
    1844:	d501      	bpl.n	184a <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    1846:	2204      	movs	r2, #4
    1848:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    184a:	07db      	lsls	r3, r3, #31
    184c:	d403      	bmi.n	1856 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    184e:	4b11      	ldr	r3, [pc, #68]	; (1894 <adc_start_read_result+0xbc>)
    1850:	681b      	ldr	r3, [r3, #0]
	return temp;
    1852:	8818      	ldrh	r0, [r3, #0]
}
    1854:	bd30      	pop	{r4, r5, pc}
    1856:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1858:	b25b      	sxtb	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	dbfb      	blt.n	1856 <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    185e:	4b0d      	ldr	r3, [pc, #52]	; (1894 <adc_start_read_result+0xbc>)
    1860:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1862:	8b4a      	ldrh	r2, [r1, #26]
    1864:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    1866:	4b0a      	ldr	r3, [pc, #40]	; (1890 <adc_start_read_result+0xb8>)
    1868:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    186a:	2301      	movs	r3, #1
    186c:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    186e:	7e0a      	ldrb	r2, [r1, #24]
    1870:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1872:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1874:	0750      	lsls	r0, r2, #29
    1876:	d501      	bpl.n	187c <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    1878:	2002      	movs	r0, #2
    187a:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    187c:	0792      	lsls	r2, r2, #30
    187e:	d501      	bpl.n	1884 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    1880:	2204      	movs	r2, #4
    1882:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1884:	075b      	lsls	r3, r3, #29
    1886:	d5e2      	bpl.n	184e <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    1888:	2302      	movs	r3, #2
    188a:	760b      	strb	r3, [r1, #24]
    188c:	e7df      	b.n	184e <adc_start_read_result+0x76>
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	20000204 	.word	0x20000204
    1894:	20000120 	.word	0x20000120

00001898 <ir_sensor_init>:

void ir_sensor_init()
{
    1898:	b510      	push	{r4, lr}
	configure_adc();
    189a:	4b02      	ldr	r3, [pc, #8]	; (18a4 <ir_sensor_init+0xc>)
    189c:	4798      	blx	r3
	configure_mux_select();
    189e:	4b02      	ldr	r3, [pc, #8]	; (18a8 <ir_sensor_init+0x10>)
    18a0:	4798      	blx	r3
}
    18a2:	bd10      	pop	{r4, pc}
    18a4:	00001721 	.word	0x00001721
    18a8:	000017ad 	.word	0x000017ad

000018ac <select_mux>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    18ac:	2800      	cmp	r0, #0
    18ae:	d010      	beq.n	18d2 <select_mux+0x26>
		port_base->OUTSET.reg = pin_mask;
    18b0:	2080      	movs	r0, #128	; 0x80
    18b2:	0200      	lsls	r0, r0, #8
    18b4:	4b0e      	ldr	r3, [pc, #56]	; (18f0 <select_mux+0x44>)
    18b6:	6198      	str	r0, [r3, #24]
	if (level) {
    18b8:	2900      	cmp	r1, #0
    18ba:	d00f      	beq.n	18dc <select_mux+0x30>
		port_base->OUTSET.reg = pin_mask;
    18bc:	2180      	movs	r1, #128	; 0x80
    18be:	0249      	lsls	r1, r1, #9
    18c0:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <select_mux+0x44>)
    18c2:	6199      	str	r1, [r3, #24]
	if (level) {
    18c4:	2a00      	cmp	r2, #0
    18c6:	d10e      	bne.n	18e6 <select_mux+0x3a>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    18c8:	2280      	movs	r2, #128	; 0x80
    18ca:	0292      	lsls	r2, r2, #10
    18cc:	4b08      	ldr	r3, [pc, #32]	; (18f0 <select_mux+0x44>)
    18ce:	615a      	str	r2, [r3, #20]

void select_mux(const bool S0, const bool S1, const bool S2) {
	port_pin_set_output_level(MUX_S0, S0);
	port_pin_set_output_level(MUX_S1, S1);
	port_pin_set_output_level(MUX_S2, S2);
}
    18d0:	4770      	bx	lr
    18d2:	2080      	movs	r0, #128	; 0x80
    18d4:	0200      	lsls	r0, r0, #8
    18d6:	4b06      	ldr	r3, [pc, #24]	; (18f0 <select_mux+0x44>)
    18d8:	6158      	str	r0, [r3, #20]
    18da:	e7ed      	b.n	18b8 <select_mux+0xc>
    18dc:	2180      	movs	r1, #128	; 0x80
    18de:	0249      	lsls	r1, r1, #9
    18e0:	4b03      	ldr	r3, [pc, #12]	; (18f0 <select_mux+0x44>)
    18e2:	6159      	str	r1, [r3, #20]
    18e4:	e7ee      	b.n	18c4 <select_mux+0x18>
		port_base->OUTSET.reg = pin_mask;
    18e6:	2280      	movs	r2, #128	; 0x80
    18e8:	0292      	lsls	r2, r2, #10
    18ea:	4b01      	ldr	r3, [pc, #4]	; (18f0 <select_mux+0x44>)
    18ec:	619a      	str	r2, [r3, #24]
    18ee:	e7ef      	b.n	18d0 <select_mux+0x24>
    18f0:	41004400 	.word	0x41004400

000018f4 <read_ones>:

uint16_t read_ones() {
    18f4:	b510      	push	{r4, lr}
	return adc_start_read_result(ONES_CHANNEL);
    18f6:	2000      	movs	r0, #0
    18f8:	4b01      	ldr	r3, [pc, #4]	; (1900 <read_ones+0xc>)
    18fa:	4798      	blx	r3
}
    18fc:	bd10      	pop	{r4, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	000017d9 	.word	0x000017d9

00001904 <read_tens>:

uint16_t read_tens() {
    1904:	b510      	push	{r4, lr}
	return adc_start_read_result(TENS_CHANNEL);
    1906:	2004      	movs	r0, #4
    1908:	4b01      	ldr	r3, [pc, #4]	; (1910 <read_tens+0xc>)
    190a:	4798      	blx	r3
}
    190c:	bd10      	pop	{r4, pc}
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	000017d9 	.word	0x000017d9

00001914 <read_hndrds>:

uint16_t read_hndrds() {
    1914:	b510      	push	{r4, lr}
	return adc_start_read_result(HNDRDS_CHANNEL);
    1916:	2003      	movs	r0, #3
    1918:	4b01      	ldr	r3, [pc, #4]	; (1920 <read_hndrds+0xc>)
    191a:	4798      	blx	r3
}
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	000017d9 	.word	0x000017d9

00001924 <read_misc>:

uint16_t read_misc() {
    1924:	b510      	push	{r4, lr}
	return adc_start_read_result(MISC_CHANNEL);
    1926:	2002      	movs	r0, #2
    1928:	4b01      	ldr	r3, [pc, #4]	; (1930 <read_misc+0xc>)
    192a:	4798      	blx	r3
    192c:	bd10      	pop	{r4, pc}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	000017d9 	.word	0x000017d9

00001934 <transfer_done>:
	
}

static void transfer_done(struct dma_resource* const resource )
{
	transferDone = true;
    1934:	2201      	movs	r2, #1
    1936:	4b01      	ldr	r3, [pc, #4]	; (193c <transfer_done+0x8>)
    1938:	701a      	strb	r2, [r3, #0]
}
    193a:	4770      	bx	lr
    193c:	20000149 	.word	0x20000149

00001940 <sourceRegisterInit>:
{
    1940:	2300      	movs	r3, #0
		DMASourceRegister[i]	=	0x00;
    1942:	490a      	ldr	r1, [pc, #40]	; (196c <sourceRegisterInit+0x2c>)
    1944:	2200      	movs	r2, #0
    1946:	54ca      	strb	r2, [r1, r3]
    1948:	3301      	adds	r3, #1
	for(i=0;i<STARTZEROS;i++)
    194a:	2b3c      	cmp	r3, #60	; 0x3c
    194c:	d1fb      	bne.n	1946 <sourceRegisterInit+0x6>
		DMASourceRegister[i]	=	0x88;
    194e:	4907      	ldr	r1, [pc, #28]	; (196c <sourceRegisterInit+0x2c>)
    1950:	2288      	movs	r2, #136	; 0x88
    1952:	54ca      	strb	r2, [r1, r3]
    1954:	3301      	adds	r3, #1
	for(i=STARTZEROS;i<STARTZEROS + NOLEDS*NoBytesLED ;i++)
    1956:	2b60      	cmp	r3, #96	; 0x60
    1958:	d1fb      	bne.n	1952 <sourceRegisterInit+0x12>
    195a:	3b3c      	subs	r3, #60	; 0x3c
		DMASourceRegister[i]    =   0x00;
    195c:	4903      	ldr	r1, [pc, #12]	; (196c <sourceRegisterInit+0x2c>)
    195e:	2200      	movs	r2, #0
    1960:	54ca      	strb	r2, [r1, r3]
    1962:	3301      	adds	r3, #1
	for(i=NOLEDS*NoBytesLED;i<STARTZEROS;i++)
    1964:	2b3c      	cmp	r3, #60	; 0x3c
    1966:	d1fb      	bne.n	1960 <sourceRegisterInit+0x20>
}
    1968:	4770      	bx	lr
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	2000029c 	.word	0x2000029c

00001970 <setup_DMA>:
	dma_descriptor_create(descriptor, &descriptor_config);

}

void setup_DMA()
{
    1970:	b570      	push	{r4, r5, r6, lr}
    1972:	b086      	sub	sp, #24
	dma_get_config_defaults(&config);
    1974:	4668      	mov	r0, sp
    1976:	4b1a      	ldr	r3, [pc, #104]	; (19e0 <setup_DMA+0x70>)
    1978:	4798      	blx	r3
	config.peripheral_trigger = SERCOM0_DMAC_ID_TX;
    197a:	2302      	movs	r3, #2
    197c:	2502      	movs	r5, #2
    197e:	466a      	mov	r2, sp
    1980:	7053      	strb	r3, [r2, #1]
	config.trigger_action     = DMA_TRIGGER_ACTON_BEAT;
    1982:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    1984:	4c17      	ldr	r4, [pc, #92]	; (19e4 <setup_DMA+0x74>)
    1986:	4669      	mov	r1, sp
    1988:	0020      	movs	r0, r4
    198a:	4b17      	ldr	r3, [pc, #92]	; (19e8 <setup_DMA+0x78>)
    198c:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    198e:	2201      	movs	r2, #1
    1990:	466b      	mov	r3, sp
    1992:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1994:	2300      	movs	r3, #0
    1996:	4669      	mov	r1, sp
    1998:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    199a:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    199c:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    199e:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    19a0:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    19a2:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    19a4:	9305      	str	r3, [sp, #20]
	descriptor_config.dst_increment_enable = false;
    19a6:	714b      	strb	r3, [r1, #5]
	descriptor_config.block_transfer_count = blockTransferCount;
    19a8:	339c      	adds	r3, #156	; 0x9c
    19aa:	810b      	strh	r3, [r1, #8]
	descriptor_config.source_address = (uint32_t)DMASourceRegister+blockTransferCount;
    19ac:	4b0f      	ldr	r3, [pc, #60]	; (19ec <setup_DMA+0x7c>)
    19ae:	339c      	adds	r3, #156	; 0x9c
    19b0:	9303      	str	r3, [sp, #12]
	descriptor_config.destination_address = 0x42000828; //sercom0
    19b2:	4b0f      	ldr	r3, [pc, #60]	; (19f0 <setup_DMA+0x80>)
    19b4:	9304      	str	r3, [sp, #16]
	dma_descriptor_create(descriptor, &descriptor_config);
    19b6:	4e0f      	ldr	r6, [pc, #60]	; (19f4 <setup_DMA+0x84>)
    19b8:	0030      	movs	r0, r6
    19ba:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <setup_DMA+0x88>)
    19bc:	4798      	blx	r3
	configure_dma_resource(&example_resource);
	setup_transfer_descriptor(&example_descriptor);
	dma_add_descriptor(&example_resource, &example_descriptor);
    19be:	0031      	movs	r1, r6
    19c0:	0020      	movs	r0, r4
    19c2:	4b0e      	ldr	r3, [pc, #56]	; (19fc <setup_DMA+0x8c>)
    19c4:	4798      	blx	r3
	resource->callback[type] = callback;
    19c6:	4b0e      	ldr	r3, [pc, #56]	; (1a00 <setup_DMA+0x90>)
    19c8:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
    19ca:	7c23      	ldrb	r3, [r4, #16]
    19cc:	432b      	orrs	r3, r5
    19ce:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    19d0:	7822      	ldrb	r2, [r4, #0]
    19d2:	490c      	ldr	r1, [pc, #48]	; (1a04 <setup_DMA+0x94>)
    19d4:	5c8b      	ldrb	r3, [r1, r2]
    19d6:	432b      	orrs	r3, r5
    19d8:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&example_resource, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&example_resource, DMA_CALLBACK_TRANSFER_DONE);
}
    19da:	b006      	add	sp, #24
    19dc:	bd70      	pop	{r4, r5, r6, pc}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	000007c5 	.word	0x000007c5
    19e4:	20000240 	.word	0x20000240
    19e8:	000007d5 	.word	0x000007d5
    19ec:	2000029c 	.word	0x2000029c
    19f0:	42000828 	.word	0x42000828
    19f4:	20000230 	.word	0x20000230
    19f8:	0000091d 	.word	0x0000091d
    19fc:	000009c5 	.word	0x000009c5
    1a00:	00001935 	.word	0x00001935
    1a04:	20000100 	.word	0x20000100

00001a08 <configureSPIMaster>:

void configureSPIMaster(void)
{
    1a08:	b570      	push	{r4, r5, r6, lr}
    1a0a:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1a0c:	2501      	movs	r5, #1
    1a0e:	466b      	mov	r3, sp
    1a10:	701d      	strb	r5, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1a12:	2400      	movs	r4, #0
    1a14:	9401      	str	r4, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1a16:	23c0      	movs	r3, #192	; 0xc0
    1a18:	039b      	lsls	r3, r3, #14
    1a1a:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1a1c:	466b      	mov	r3, sp
    1a1e:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
    1a20:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1a22:	74dd      	strb	r5, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1a24:	751c      	strb	r4, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1a26:	2324      	movs	r3, #36	; 0x24
    1a28:	466a      	mov	r2, sp
    1a2a:	54d4      	strb	r4, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1a2c:	220c      	movs	r2, #12
    1a2e:	2100      	movs	r1, #0
    1a30:	a806      	add	r0, sp, #24
    1a32:	4b14      	ldr	r3, [pc, #80]	; (1a84 <configureSPIMaster+0x7c>)
    1a34:	4798      	blx	r3
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;
    1a36:	2380      	movs	r3, #128	; 0x80
    1a38:	055b      	lsls	r3, r3, #21
    1a3a:	9302      	str	r3, [sp, #8]
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    1a3c:	4b12      	ldr	r3, [pc, #72]	; (1a88 <configureSPIMaster+0x80>)
    1a3e:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    1a40:	2301      	movs	r3, #1
    1a42:	425b      	negs	r3, r3
    1a44:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    1a46:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    1a48:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.receiver_enable  = false;
    1a4a:	466b      	mov	r3, sp
    1a4c:	749c      	strb	r4, [r3, #18]
	config_spi_master.mode_specific.master.baudrate =  SPIBAUDRATE; //2.5MHz  = 400ns per signal
    1a4e:	4b0f      	ldr	r3, [pc, #60]	; (1a8c <configureSPIMaster+0x84>)
    1a50:	9306      	str	r3, [sp, #24]
	config_spi_master.generator_source = GCLK_GENERATOR_0;
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    1a52:	4e0f      	ldr	r6, [pc, #60]	; (1a90 <configureSPIMaster+0x88>)
    1a54:	466a      	mov	r2, sp
    1a56:	490f      	ldr	r1, [pc, #60]	; (1a94 <configureSPIMaster+0x8c>)
    1a58:	0030      	movs	r0, r6
    1a5a:	4b0f      	ldr	r3, [pc, #60]	; (1a98 <configureSPIMaster+0x90>)
    1a5c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1a5e:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a60:	0020      	movs	r0, r4
    1a62:	4b0e      	ldr	r3, [pc, #56]	; (1a9c <configureSPIMaster+0x94>)
    1a64:	4798      	blx	r3
    1a66:	231f      	movs	r3, #31
    1a68:	4018      	ands	r0, r3
    1a6a:	4085      	lsls	r5, r0
    1a6c:	4b0c      	ldr	r3, [pc, #48]	; (1aa0 <configureSPIMaster+0x98>)
    1a6e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1a70:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1a72:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1a74:	2b00      	cmp	r3, #0
    1a76:	d1fc      	bne.n	1a72 <configureSPIMaster+0x6a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1a78:	6823      	ldr	r3, [r4, #0]
    1a7a:	2202      	movs	r2, #2
    1a7c:	4313      	orrs	r3, r2
    1a7e:	6023      	str	r3, [r4, #0]
	spi_enable(&spi_master_instance);
}
    1a80:	b00e      	add	sp, #56	; 0x38
    1a82:	bd70      	pop	{r4, r5, r6, pc}
    1a84:	000023bf 	.word	0x000023bf
    1a88:	000e0002 	.word	0x000e0002
    1a8c:	002625a0 	.word	0x002625a0
    1a90:	2000025c 	.word	0x2000025c
    1a94:	42000800 	.word	0x42000800
    1a98:	00001065 	.word	0x00001065
    1a9c:	00001015 	.word	0x00001015
    1aa0:	e000e100 	.word	0xe000e100

00001aa4 <RGBPI55Init>:
	configureSPIMaster();
	
}

void RGBPI55Init()
{
    1aa4:	b510      	push	{r4, lr}
	sourceRegisterInit();
    1aa6:	4b03      	ldr	r3, [pc, #12]	; (1ab4 <RGBPI55Init+0x10>)
    1aa8:	4798      	blx	r3
	configureSPIMaster();
    1aaa:	4b03      	ldr	r3, [pc, #12]	; (1ab8 <RGBPI55Init+0x14>)
    1aac:	4798      	blx	r3
	SPIMasterInit();
	setup_DMA();
    1aae:	4b03      	ldr	r3, [pc, #12]	; (1abc <RGBPI55Init+0x18>)
    1ab0:	4798      	blx	r3
}
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	00001941 	.word	0x00001941
    1ab8:	00001a09 	.word	0x00001a09
    1abc:	00001971 	.word	0x00001971

00001ac0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1ac0:	4770      	bx	lr
	...

00001ac4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1ac4:	4b0c      	ldr	r3, [pc, #48]	; (1af8 <cpu_irq_enter_critical+0x34>)
    1ac6:	681b      	ldr	r3, [r3, #0]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d106      	bne.n	1ada <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1acc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d007      	beq.n	1ae4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1ad4:	2200      	movs	r2, #0
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <cpu_irq_enter_critical+0x38>)
    1ad8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1ada:	4a07      	ldr	r2, [pc, #28]	; (1af8 <cpu_irq_enter_critical+0x34>)
    1adc:	6813      	ldr	r3, [r2, #0]
    1ade:	3301      	adds	r3, #1
    1ae0:	6013      	str	r3, [r2, #0]
}
    1ae2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1ae4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1ae6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1aea:	2200      	movs	r2, #0
    1aec:	4b04      	ldr	r3, [pc, #16]	; (1b00 <cpu_irq_enter_critical+0x3c>)
    1aee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1af0:	3201      	adds	r2, #1
    1af2:	4b02      	ldr	r3, [pc, #8]	; (1afc <cpu_irq_enter_critical+0x38>)
    1af4:	701a      	strb	r2, [r3, #0]
    1af6:	e7f0      	b.n	1ada <cpu_irq_enter_critical+0x16>
    1af8:	20000124 	.word	0x20000124
    1afc:	20000128 	.word	0x20000128
    1b00:	20000014 	.word	0x20000014

00001b04 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1b04:	4b08      	ldr	r3, [pc, #32]	; (1b28 <cpu_irq_leave_critical+0x24>)
    1b06:	681a      	ldr	r2, [r3, #0]
    1b08:	3a01      	subs	r2, #1
    1b0a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d109      	bne.n	1b26 <cpu_irq_leave_critical+0x22>
    1b12:	4b06      	ldr	r3, [pc, #24]	; (1b2c <cpu_irq_leave_critical+0x28>)
    1b14:	781b      	ldrb	r3, [r3, #0]
    1b16:	2b00      	cmp	r3, #0
    1b18:	d005      	beq.n	1b26 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1b1a:	2201      	movs	r2, #1
    1b1c:	4b04      	ldr	r3, [pc, #16]	; (1b30 <cpu_irq_leave_critical+0x2c>)
    1b1e:	701a      	strb	r2, [r3, #0]
    1b20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b24:	b662      	cpsie	i
	}
}
    1b26:	4770      	bx	lr
    1b28:	20000124 	.word	0x20000124
    1b2c:	20000128 	.word	0x20000128
    1b30:	20000014 	.word	0x20000014

00001b34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b34:	b510      	push	{r4, lr}
	switch (clock_source) {
    1b36:	2808      	cmp	r0, #8
    1b38:	d803      	bhi.n	1b42 <system_clock_source_get_hz+0xe>
    1b3a:	0080      	lsls	r0, r0, #2
    1b3c:	4b1c      	ldr	r3, [pc, #112]	; (1bb0 <system_clock_source_get_hz+0x7c>)
    1b3e:	581b      	ldr	r3, [r3, r0]
    1b40:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1b42:	2000      	movs	r0, #0
    1b44:	e032      	b.n	1bac <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1b46:	4b1b      	ldr	r3, [pc, #108]	; (1bb4 <system_clock_source_get_hz+0x80>)
    1b48:	6918      	ldr	r0, [r3, #16]
    1b4a:	e02f      	b.n	1bac <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b4c:	4b1a      	ldr	r3, [pc, #104]	; (1bb8 <system_clock_source_get_hz+0x84>)
    1b4e:	6a1b      	ldr	r3, [r3, #32]
    1b50:	059b      	lsls	r3, r3, #22
    1b52:	0f9b      	lsrs	r3, r3, #30
    1b54:	4819      	ldr	r0, [pc, #100]	; (1bbc <system_clock_source_get_hz+0x88>)
    1b56:	40d8      	lsrs	r0, r3
    1b58:	e028      	b.n	1bac <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1b5a:	4b16      	ldr	r3, [pc, #88]	; (1bb4 <system_clock_source_get_hz+0x80>)
    1b5c:	6958      	ldr	r0, [r3, #20]
    1b5e:	e025      	b.n	1bac <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b60:	4b14      	ldr	r3, [pc, #80]	; (1bb4 <system_clock_source_get_hz+0x80>)
    1b62:	681b      	ldr	r3, [r3, #0]
			return 0;
    1b64:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b66:	079b      	lsls	r3, r3, #30
    1b68:	d520      	bpl.n	1bac <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b6a:	4913      	ldr	r1, [pc, #76]	; (1bb8 <system_clock_source_get_hz+0x84>)
    1b6c:	2210      	movs	r2, #16
    1b6e:	68cb      	ldr	r3, [r1, #12]
    1b70:	421a      	tst	r2, r3
    1b72:	d0fc      	beq.n	1b6e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1b74:	4b0f      	ldr	r3, [pc, #60]	; (1bb4 <system_clock_source_get_hz+0x80>)
    1b76:	681a      	ldr	r2, [r3, #0]
    1b78:	2324      	movs	r3, #36	; 0x24
    1b7a:	4013      	ands	r3, r2
    1b7c:	2b04      	cmp	r3, #4
    1b7e:	d001      	beq.n	1b84 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1b80:	480f      	ldr	r0, [pc, #60]	; (1bc0 <system_clock_source_get_hz+0x8c>)
    1b82:	e013      	b.n	1bac <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b84:	2000      	movs	r0, #0
    1b86:	4b0f      	ldr	r3, [pc, #60]	; (1bc4 <system_clock_source_get_hz+0x90>)
    1b88:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1b8a:	4b0a      	ldr	r3, [pc, #40]	; (1bb4 <system_clock_source_get_hz+0x80>)
    1b8c:	689b      	ldr	r3, [r3, #8]
    1b8e:	041b      	lsls	r3, r3, #16
    1b90:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b92:	4358      	muls	r0, r3
    1b94:	e00a      	b.n	1bac <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b96:	2350      	movs	r3, #80	; 0x50
    1b98:	4a07      	ldr	r2, [pc, #28]	; (1bb8 <system_clock_source_get_hz+0x84>)
    1b9a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1b9c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b9e:	075b      	lsls	r3, r3, #29
    1ba0:	d504      	bpl.n	1bac <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1ba2:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <system_clock_source_get_hz+0x80>)
    1ba4:	68d8      	ldr	r0, [r3, #12]
    1ba6:	e001      	b.n	1bac <system_clock_source_get_hz+0x78>
		return 32768UL;
    1ba8:	2080      	movs	r0, #128	; 0x80
    1baa:	0200      	lsls	r0, r0, #8
	}
}
    1bac:	bd10      	pop	{r4, pc}
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	000025e4 	.word	0x000025e4
    1bb4:	2000012c 	.word	0x2000012c
    1bb8:	40000800 	.word	0x40000800
    1bbc:	007a1200 	.word	0x007a1200
    1bc0:	02dc6c00 	.word	0x02dc6c00
    1bc4:	00001f99 	.word	0x00001f99

00001bc8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1bca:	490c      	ldr	r1, [pc, #48]	; (1bfc <system_clock_source_osc8m_set_config+0x34>)
    1bcc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1bce:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1bd0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1bd2:	7840      	ldrb	r0, [r0, #1]
    1bd4:	2201      	movs	r2, #1
    1bd6:	4010      	ands	r0, r2
    1bd8:	0180      	lsls	r0, r0, #6
    1bda:	2640      	movs	r6, #64	; 0x40
    1bdc:	43b3      	bics	r3, r6
    1bde:	4303      	orrs	r3, r0
    1be0:	402a      	ands	r2, r5
    1be2:	01d2      	lsls	r2, r2, #7
    1be4:	2080      	movs	r0, #128	; 0x80
    1be6:	4383      	bics	r3, r0
    1be8:	4313      	orrs	r3, r2
    1bea:	2203      	movs	r2, #3
    1bec:	4022      	ands	r2, r4
    1bee:	0212      	lsls	r2, r2, #8
    1bf0:	4803      	ldr	r0, [pc, #12]	; (1c00 <system_clock_source_osc8m_set_config+0x38>)
    1bf2:	4003      	ands	r3, r0
    1bf4:	4313      	orrs	r3, r2
    1bf6:	620b      	str	r3, [r1, #32]
}
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	40000800 	.word	0x40000800
    1c00:	fffffcff 	.word	0xfffffcff

00001c04 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1c04:	2808      	cmp	r0, #8
    1c06:	d803      	bhi.n	1c10 <system_clock_source_enable+0xc>
    1c08:	0080      	lsls	r0, r0, #2
    1c0a:	4b25      	ldr	r3, [pc, #148]	; (1ca0 <system_clock_source_enable+0x9c>)
    1c0c:	581b      	ldr	r3, [r3, r0]
    1c0e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c10:	2017      	movs	r0, #23
    1c12:	e044      	b.n	1c9e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1c14:	4a23      	ldr	r2, [pc, #140]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c16:	6a13      	ldr	r3, [r2, #32]
    1c18:	2102      	movs	r1, #2
    1c1a:	430b      	orrs	r3, r1
    1c1c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1c1e:	2000      	movs	r0, #0
    1c20:	e03d      	b.n	1c9e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1c22:	4a20      	ldr	r2, [pc, #128]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c24:	6993      	ldr	r3, [r2, #24]
    1c26:	2102      	movs	r1, #2
    1c28:	430b      	orrs	r3, r1
    1c2a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1c2c:	2000      	movs	r0, #0
		break;
    1c2e:	e036      	b.n	1c9e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1c30:	4a1c      	ldr	r2, [pc, #112]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c32:	8a13      	ldrh	r3, [r2, #16]
    1c34:	2102      	movs	r1, #2
    1c36:	430b      	orrs	r3, r1
    1c38:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1c3a:	2000      	movs	r0, #0
		break;
    1c3c:	e02f      	b.n	1c9e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1c3e:	4a19      	ldr	r2, [pc, #100]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c40:	8a93      	ldrh	r3, [r2, #20]
    1c42:	2102      	movs	r1, #2
    1c44:	430b      	orrs	r3, r1
    1c46:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1c48:	2000      	movs	r0, #0
		break;
    1c4a:	e028      	b.n	1c9e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1c4c:	4916      	ldr	r1, [pc, #88]	; (1ca8 <system_clock_source_enable+0xa4>)
    1c4e:	680b      	ldr	r3, [r1, #0]
    1c50:	2202      	movs	r2, #2
    1c52:	4313      	orrs	r3, r2
    1c54:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1c56:	4b13      	ldr	r3, [pc, #76]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c58:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c5a:	0019      	movs	r1, r3
    1c5c:	320e      	adds	r2, #14
    1c5e:	68cb      	ldr	r3, [r1, #12]
    1c60:	421a      	tst	r2, r3
    1c62:	d0fc      	beq.n	1c5e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1c64:	4a10      	ldr	r2, [pc, #64]	; (1ca8 <system_clock_source_enable+0xa4>)
    1c66:	6891      	ldr	r1, [r2, #8]
    1c68:	4b0e      	ldr	r3, [pc, #56]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c6a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1c6c:	6852      	ldr	r2, [r2, #4]
    1c6e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1c70:	2200      	movs	r2, #0
    1c72:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c74:	0019      	movs	r1, r3
    1c76:	3210      	adds	r2, #16
    1c78:	68cb      	ldr	r3, [r1, #12]
    1c7a:	421a      	tst	r2, r3
    1c7c:	d0fc      	beq.n	1c78 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1c7e:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <system_clock_source_enable+0xa4>)
    1c80:	681b      	ldr	r3, [r3, #0]
    1c82:	b29b      	uxth	r3, r3
    1c84:	4a07      	ldr	r2, [pc, #28]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c86:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1c88:	2000      	movs	r0, #0
    1c8a:	e008      	b.n	1c9e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1c8c:	4905      	ldr	r1, [pc, #20]	; (1ca4 <system_clock_source_enable+0xa0>)
    1c8e:	2244      	movs	r2, #68	; 0x44
    1c90:	5c8b      	ldrb	r3, [r1, r2]
    1c92:	2002      	movs	r0, #2
    1c94:	4303      	orrs	r3, r0
    1c96:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1c98:	2000      	movs	r0, #0
		break;
    1c9a:	e000      	b.n	1c9e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1c9c:	2000      	movs	r0, #0
}
    1c9e:	4770      	bx	lr
    1ca0:	00002608 	.word	0x00002608
    1ca4:	40000800 	.word	0x40000800
    1ca8:	2000012c 	.word	0x2000012c

00001cac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1cac:	b530      	push	{r4, r5, lr}
    1cae:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1cb0:	22c2      	movs	r2, #194	; 0xc2
    1cb2:	00d2      	lsls	r2, r2, #3
    1cb4:	4b1a      	ldr	r3, [pc, #104]	; (1d20 <system_clock_init+0x74>)
    1cb6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1cb8:	4a1a      	ldr	r2, [pc, #104]	; (1d24 <system_clock_init+0x78>)
    1cba:	6853      	ldr	r3, [r2, #4]
    1cbc:	211e      	movs	r1, #30
    1cbe:	438b      	bics	r3, r1
    1cc0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1cc2:	2301      	movs	r3, #1
    1cc4:	466a      	mov	r2, sp
    1cc6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1cc8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1cca:	4d17      	ldr	r5, [pc, #92]	; (1d28 <system_clock_init+0x7c>)
    1ccc:	b2e0      	uxtb	r0, r4
    1cce:	4669      	mov	r1, sp
    1cd0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1cd2:	3401      	adds	r4, #1
    1cd4:	2c18      	cmp	r4, #24
    1cd6:	d1f9      	bne.n	1ccc <system_clock_init+0x20>
	config->run_in_standby  = false;
    1cd8:	a803      	add	r0, sp, #12
    1cda:	2400      	movs	r4, #0
    1cdc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1cde:	2501      	movs	r5, #1
    1ce0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1ce2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1ce4:	4b11      	ldr	r3, [pc, #68]	; (1d2c <system_clock_init+0x80>)
    1ce6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ce8:	2006      	movs	r0, #6
    1cea:	4b11      	ldr	r3, [pc, #68]	; (1d30 <system_clock_init+0x84>)
    1cec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1cee:	4b11      	ldr	r3, [pc, #68]	; (1d34 <system_clock_init+0x88>)
    1cf0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1cf2:	4b11      	ldr	r3, [pc, #68]	; (1d38 <system_clock_init+0x8c>)
    1cf4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1cf6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1cf8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1cfa:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1cfc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1cfe:	466b      	mov	r3, sp
    1d00:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1d02:	2306      	movs	r3, #6
    1d04:	466a      	mov	r2, sp
    1d06:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1d08:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1d0a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1d0c:	4669      	mov	r1, sp
    1d0e:	2000      	movs	r0, #0
    1d10:	4b0a      	ldr	r3, [pc, #40]	; (1d3c <system_clock_init+0x90>)
    1d12:	4798      	blx	r3
    1d14:	2000      	movs	r0, #0
    1d16:	4b0a      	ldr	r3, [pc, #40]	; (1d40 <system_clock_init+0x94>)
    1d18:	4798      	blx	r3
#endif
}
    1d1a:	b005      	add	sp, #20
    1d1c:	bd30      	pop	{r4, r5, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	40000800 	.word	0x40000800
    1d24:	41004000 	.word	0x41004000
    1d28:	00001f7d 	.word	0x00001f7d
    1d2c:	00001bc9 	.word	0x00001bc9
    1d30:	00001c05 	.word	0x00001c05
    1d34:	00001d45 	.word	0x00001d45
    1d38:	40000400 	.word	0x40000400
    1d3c:	00001d69 	.word	0x00001d69
    1d40:	00001e21 	.word	0x00001e21

00001d44 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1d44:	4a06      	ldr	r2, [pc, #24]	; (1d60 <system_gclk_init+0x1c>)
    1d46:	6993      	ldr	r3, [r2, #24]
    1d48:	2108      	movs	r1, #8
    1d4a:	430b      	orrs	r3, r1
    1d4c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1d4e:	2201      	movs	r2, #1
    1d50:	4b04      	ldr	r3, [pc, #16]	; (1d64 <system_gclk_init+0x20>)
    1d52:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1d54:	0019      	movs	r1, r3
    1d56:	780b      	ldrb	r3, [r1, #0]
    1d58:	4213      	tst	r3, r2
    1d5a:	d1fc      	bne.n	1d56 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1d5c:	4770      	bx	lr
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	40000400 	.word	0x40000400
    1d64:	40000c00 	.word	0x40000c00

00001d68 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1d68:	b570      	push	{r4, r5, r6, lr}
    1d6a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1d6c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d6e:	780d      	ldrb	r5, [r1, #0]
    1d70:	022d      	lsls	r5, r5, #8
    1d72:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d74:	784b      	ldrb	r3, [r1, #1]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d002      	beq.n	1d80 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1d7a:	2380      	movs	r3, #128	; 0x80
    1d7c:	02db      	lsls	r3, r3, #11
    1d7e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1d80:	7a4b      	ldrb	r3, [r1, #9]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d002      	beq.n	1d8c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1d86:	2380      	movs	r3, #128	; 0x80
    1d88:	031b      	lsls	r3, r3, #12
    1d8a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1d8c:	6848      	ldr	r0, [r1, #4]
    1d8e:	2801      	cmp	r0, #1
    1d90:	d910      	bls.n	1db4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1d92:	1e43      	subs	r3, r0, #1
    1d94:	4218      	tst	r0, r3
    1d96:	d134      	bne.n	1e02 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1d98:	2802      	cmp	r0, #2
    1d9a:	d930      	bls.n	1dfe <system_gclk_gen_set_config+0x96>
    1d9c:	2302      	movs	r3, #2
    1d9e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1da0:	3201      	adds	r2, #1
						mask <<= 1) {
    1da2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1da4:	4298      	cmp	r0, r3
    1da6:	d8fb      	bhi.n	1da0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1da8:	0212      	lsls	r2, r2, #8
    1daa:	4332      	orrs	r2, r6
    1dac:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1dae:	2380      	movs	r3, #128	; 0x80
    1db0:	035b      	lsls	r3, r3, #13
    1db2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1db4:	7a0b      	ldrb	r3, [r1, #8]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d002      	beq.n	1dc0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	039b      	lsls	r3, r3, #14
    1dbe:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dc0:	4a13      	ldr	r2, [pc, #76]	; (1e10 <system_gclk_gen_set_config+0xa8>)
    1dc2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1dc4:	b25b      	sxtb	r3, r3
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	dbfb      	blt.n	1dc2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1dca:	4b12      	ldr	r3, [pc, #72]	; (1e14 <system_gclk_gen_set_config+0xac>)
    1dcc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1dce:	4b12      	ldr	r3, [pc, #72]	; (1e18 <system_gclk_gen_set_config+0xb0>)
    1dd0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dd2:	4a0f      	ldr	r2, [pc, #60]	; (1e10 <system_gclk_gen_set_config+0xa8>)
    1dd4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1dd6:	b25b      	sxtb	r3, r3
    1dd8:	2b00      	cmp	r3, #0
    1dda:	dbfb      	blt.n	1dd4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ddc:	4b0c      	ldr	r3, [pc, #48]	; (1e10 <system_gclk_gen_set_config+0xa8>)
    1dde:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1de0:	001a      	movs	r2, r3
    1de2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1de4:	b25b      	sxtb	r3, r3
    1de6:	2b00      	cmp	r3, #0
    1de8:	dbfb      	blt.n	1de2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1dea:	4a09      	ldr	r2, [pc, #36]	; (1e10 <system_gclk_gen_set_config+0xa8>)
    1dec:	6853      	ldr	r3, [r2, #4]
    1dee:	2180      	movs	r1, #128	; 0x80
    1df0:	0249      	lsls	r1, r1, #9
    1df2:	400b      	ands	r3, r1
    1df4:	431d      	orrs	r5, r3
    1df6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1df8:	4b08      	ldr	r3, [pc, #32]	; (1e1c <system_gclk_gen_set_config+0xb4>)
    1dfa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1dfc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1dfe:	2200      	movs	r2, #0
    1e00:	e7d2      	b.n	1da8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1e02:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1e04:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e06:	2380      	movs	r3, #128	; 0x80
    1e08:	029b      	lsls	r3, r3, #10
    1e0a:	431d      	orrs	r5, r3
    1e0c:	e7d2      	b.n	1db4 <system_gclk_gen_set_config+0x4c>
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	40000c00 	.word	0x40000c00
    1e14:	00001ac5 	.word	0x00001ac5
    1e18:	40000c08 	.word	0x40000c08
    1e1c:	00001b05 	.word	0x00001b05

00001e20 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1e20:	b510      	push	{r4, lr}
    1e22:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e24:	4a0b      	ldr	r2, [pc, #44]	; (1e54 <system_gclk_gen_enable+0x34>)
    1e26:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e28:	b25b      	sxtb	r3, r3
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	dbfb      	blt.n	1e26 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1e2e:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <system_gclk_gen_enable+0x38>)
    1e30:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e32:	4b0a      	ldr	r3, [pc, #40]	; (1e5c <system_gclk_gen_enable+0x3c>)
    1e34:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e36:	4a07      	ldr	r2, [pc, #28]	; (1e54 <system_gclk_gen_enable+0x34>)
    1e38:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e3a:	b25b      	sxtb	r3, r3
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	dbfb      	blt.n	1e38 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1e40:	4a04      	ldr	r2, [pc, #16]	; (1e54 <system_gclk_gen_enable+0x34>)
    1e42:	6851      	ldr	r1, [r2, #4]
    1e44:	2380      	movs	r3, #128	; 0x80
    1e46:	025b      	lsls	r3, r3, #9
    1e48:	430b      	orrs	r3, r1
    1e4a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1e4c:	4b04      	ldr	r3, [pc, #16]	; (1e60 <system_gclk_gen_enable+0x40>)
    1e4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e50:	bd10      	pop	{r4, pc}
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	40000c00 	.word	0x40000c00
    1e58:	00001ac5 	.word	0x00001ac5
    1e5c:	40000c04 	.word	0x40000c04
    1e60:	00001b05 	.word	0x00001b05

00001e64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1e64:	b570      	push	{r4, r5, r6, lr}
    1e66:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e68:	4a1a      	ldr	r2, [pc, #104]	; (1ed4 <system_gclk_gen_get_hz+0x70>)
    1e6a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e6c:	b25b      	sxtb	r3, r3
    1e6e:	2b00      	cmp	r3, #0
    1e70:	dbfb      	blt.n	1e6a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1e72:	4b19      	ldr	r3, [pc, #100]	; (1ed8 <system_gclk_gen_get_hz+0x74>)
    1e74:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e76:	4b19      	ldr	r3, [pc, #100]	; (1edc <system_gclk_gen_get_hz+0x78>)
    1e78:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e7a:	4a16      	ldr	r2, [pc, #88]	; (1ed4 <system_gclk_gen_get_hz+0x70>)
    1e7c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e7e:	b25b      	sxtb	r3, r3
    1e80:	2b00      	cmp	r3, #0
    1e82:	dbfb      	blt.n	1e7c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e84:	4e13      	ldr	r6, [pc, #76]	; (1ed4 <system_gclk_gen_get_hz+0x70>)
    1e86:	6870      	ldr	r0, [r6, #4]
    1e88:	04c0      	lsls	r0, r0, #19
    1e8a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e8c:	4b14      	ldr	r3, [pc, #80]	; (1ee0 <system_gclk_gen_get_hz+0x7c>)
    1e8e:	4798      	blx	r3
    1e90:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e92:	4b12      	ldr	r3, [pc, #72]	; (1edc <system_gclk_gen_get_hz+0x78>)
    1e94:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1e96:	6876      	ldr	r6, [r6, #4]
    1e98:	02f6      	lsls	r6, r6, #11
    1e9a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1e9c:	4b11      	ldr	r3, [pc, #68]	; (1ee4 <system_gclk_gen_get_hz+0x80>)
    1e9e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ea0:	4a0c      	ldr	r2, [pc, #48]	; (1ed4 <system_gclk_gen_get_hz+0x70>)
    1ea2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ea4:	b25b      	sxtb	r3, r3
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	dbfb      	blt.n	1ea2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1eaa:	4b0a      	ldr	r3, [pc, #40]	; (1ed4 <system_gclk_gen_get_hz+0x70>)
    1eac:	689c      	ldr	r4, [r3, #8]
    1eae:	0224      	lsls	r4, r4, #8
    1eb0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1eb2:	4b0d      	ldr	r3, [pc, #52]	; (1ee8 <system_gclk_gen_get_hz+0x84>)
    1eb4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1eb6:	2e00      	cmp	r6, #0
    1eb8:	d107      	bne.n	1eca <system_gclk_gen_get_hz+0x66>
    1eba:	2c01      	cmp	r4, #1
    1ebc:	d907      	bls.n	1ece <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1ebe:	0021      	movs	r1, r4
    1ec0:	0028      	movs	r0, r5
    1ec2:	4b0a      	ldr	r3, [pc, #40]	; (1eec <system_gclk_gen_get_hz+0x88>)
    1ec4:	4798      	blx	r3
    1ec6:	0005      	movs	r5, r0
    1ec8:	e001      	b.n	1ece <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1eca:	3401      	adds	r4, #1
    1ecc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1ece:	0028      	movs	r0, r5
    1ed0:	bd70      	pop	{r4, r5, r6, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	40000c00 	.word	0x40000c00
    1ed8:	00001ac5 	.word	0x00001ac5
    1edc:	40000c04 	.word	0x40000c04
    1ee0:	00001b35 	.word	0x00001b35
    1ee4:	40000c08 	.word	0x40000c08
    1ee8:	00001b05 	.word	0x00001b05
    1eec:	00002239 	.word	0x00002239

00001ef0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ef0:	b510      	push	{r4, lr}
    1ef2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ef4:	4b06      	ldr	r3, [pc, #24]	; (1f10 <system_gclk_chan_enable+0x20>)
    1ef6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ef8:	4b06      	ldr	r3, [pc, #24]	; (1f14 <system_gclk_chan_enable+0x24>)
    1efa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1efc:	4a06      	ldr	r2, [pc, #24]	; (1f18 <system_gclk_chan_enable+0x28>)
    1efe:	8853      	ldrh	r3, [r2, #2]
    1f00:	2180      	movs	r1, #128	; 0x80
    1f02:	01c9      	lsls	r1, r1, #7
    1f04:	430b      	orrs	r3, r1
    1f06:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1f08:	4b04      	ldr	r3, [pc, #16]	; (1f1c <system_gclk_chan_enable+0x2c>)
    1f0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f0c:	bd10      	pop	{r4, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00001ac5 	.word	0x00001ac5
    1f14:	40000c02 	.word	0x40000c02
    1f18:	40000c00 	.word	0x40000c00
    1f1c:	00001b05 	.word	0x00001b05

00001f20 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1f20:	b510      	push	{r4, lr}
    1f22:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f24:	4b0f      	ldr	r3, [pc, #60]	; (1f64 <system_gclk_chan_disable+0x44>)
    1f26:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f28:	4b0f      	ldr	r3, [pc, #60]	; (1f68 <system_gclk_chan_disable+0x48>)
    1f2a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f2c:	4a0f      	ldr	r2, [pc, #60]	; (1f6c <system_gclk_chan_disable+0x4c>)
    1f2e:	8853      	ldrh	r3, [r2, #2]
    1f30:	051b      	lsls	r3, r3, #20
    1f32:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1f34:	8853      	ldrh	r3, [r2, #2]
    1f36:	490e      	ldr	r1, [pc, #56]	; (1f70 <system_gclk_chan_disable+0x50>)
    1f38:	400b      	ands	r3, r1
    1f3a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1f3c:	8853      	ldrh	r3, [r2, #2]
    1f3e:	490d      	ldr	r1, [pc, #52]	; (1f74 <system_gclk_chan_disable+0x54>)
    1f40:	400b      	ands	r3, r1
    1f42:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1f44:	0011      	movs	r1, r2
    1f46:	2280      	movs	r2, #128	; 0x80
    1f48:	01d2      	lsls	r2, r2, #7
    1f4a:	884b      	ldrh	r3, [r1, #2]
    1f4c:	4213      	tst	r3, r2
    1f4e:	d1fc      	bne.n	1f4a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1f50:	4906      	ldr	r1, [pc, #24]	; (1f6c <system_gclk_chan_disable+0x4c>)
    1f52:	884a      	ldrh	r2, [r1, #2]
    1f54:	0203      	lsls	r3, r0, #8
    1f56:	4806      	ldr	r0, [pc, #24]	; (1f70 <system_gclk_chan_disable+0x50>)
    1f58:	4002      	ands	r2, r0
    1f5a:	4313      	orrs	r3, r2
    1f5c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1f5e:	4b06      	ldr	r3, [pc, #24]	; (1f78 <system_gclk_chan_disable+0x58>)
    1f60:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f62:	bd10      	pop	{r4, pc}
    1f64:	00001ac5 	.word	0x00001ac5
    1f68:	40000c02 	.word	0x40000c02
    1f6c:	40000c00 	.word	0x40000c00
    1f70:	fffff0ff 	.word	0xfffff0ff
    1f74:	ffffbfff 	.word	0xffffbfff
    1f78:	00001b05 	.word	0x00001b05

00001f7c <system_gclk_chan_set_config>:
{
    1f7c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1f7e:	780c      	ldrb	r4, [r1, #0]
    1f80:	0224      	lsls	r4, r4, #8
    1f82:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1f84:	4b02      	ldr	r3, [pc, #8]	; (1f90 <system_gclk_chan_set_config+0x14>)
    1f86:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1f88:	b2a4      	uxth	r4, r4
    1f8a:	4b02      	ldr	r3, [pc, #8]	; (1f94 <system_gclk_chan_set_config+0x18>)
    1f8c:	805c      	strh	r4, [r3, #2]
}
    1f8e:	bd10      	pop	{r4, pc}
    1f90:	00001f21 	.word	0x00001f21
    1f94:	40000c00 	.word	0x40000c00

00001f98 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1f98:	b510      	push	{r4, lr}
    1f9a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f9c:	4b06      	ldr	r3, [pc, #24]	; (1fb8 <system_gclk_chan_get_hz+0x20>)
    1f9e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1fa0:	4b06      	ldr	r3, [pc, #24]	; (1fbc <system_gclk_chan_get_hz+0x24>)
    1fa2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1fa4:	4b06      	ldr	r3, [pc, #24]	; (1fc0 <system_gclk_chan_get_hz+0x28>)
    1fa6:	885c      	ldrh	r4, [r3, #2]
    1fa8:	0524      	lsls	r4, r4, #20
    1faa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1fac:	4b05      	ldr	r3, [pc, #20]	; (1fc4 <system_gclk_chan_get_hz+0x2c>)
    1fae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1fb0:	0020      	movs	r0, r4
    1fb2:	4b05      	ldr	r3, [pc, #20]	; (1fc8 <system_gclk_chan_get_hz+0x30>)
    1fb4:	4798      	blx	r3
}
    1fb6:	bd10      	pop	{r4, pc}
    1fb8:	00001ac5 	.word	0x00001ac5
    1fbc:	40000c02 	.word	0x40000c02
    1fc0:	40000c00 	.word	0x40000c00
    1fc4:	00001b05 	.word	0x00001b05
    1fc8:	00001e65 	.word	0x00001e65

00001fcc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1fcc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1fce:	78d3      	ldrb	r3, [r2, #3]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d135      	bne.n	2040 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1fd4:	7813      	ldrb	r3, [r2, #0]
    1fd6:	2b80      	cmp	r3, #128	; 0x80
    1fd8:	d029      	beq.n	202e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1fda:	061b      	lsls	r3, r3, #24
    1fdc:	2480      	movs	r4, #128	; 0x80
    1fde:	0264      	lsls	r4, r4, #9
    1fe0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1fe2:	7854      	ldrb	r4, [r2, #1]
    1fe4:	2502      	movs	r5, #2
    1fe6:	43ac      	bics	r4, r5
    1fe8:	d106      	bne.n	1ff8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1fea:	7894      	ldrb	r4, [r2, #2]
    1fec:	2c00      	cmp	r4, #0
    1fee:	d120      	bne.n	2032 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ff0:	2480      	movs	r4, #128	; 0x80
    1ff2:	02a4      	lsls	r4, r4, #10
    1ff4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ff6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ff8:	7854      	ldrb	r4, [r2, #1]
    1ffa:	3c01      	subs	r4, #1
    1ffc:	2c01      	cmp	r4, #1
    1ffe:	d91c      	bls.n	203a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2000:	040d      	lsls	r5, r1, #16
    2002:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2004:	24a0      	movs	r4, #160	; 0xa0
    2006:	05e4      	lsls	r4, r4, #23
    2008:	432c      	orrs	r4, r5
    200a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    200c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    200e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2010:	24d0      	movs	r4, #208	; 0xd0
    2012:	0624      	lsls	r4, r4, #24
    2014:	432c      	orrs	r4, r5
    2016:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2018:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    201a:	78d4      	ldrb	r4, [r2, #3]
    201c:	2c00      	cmp	r4, #0
    201e:	d122      	bne.n	2066 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2020:	035b      	lsls	r3, r3, #13
    2022:	d51c      	bpl.n	205e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2024:	7893      	ldrb	r3, [r2, #2]
    2026:	2b01      	cmp	r3, #1
    2028:	d01e      	beq.n	2068 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    202a:	6141      	str	r1, [r0, #20]
    202c:	e017      	b.n	205e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    202e:	2300      	movs	r3, #0
    2030:	e7d7      	b.n	1fe2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2032:	24c0      	movs	r4, #192	; 0xc0
    2034:	02e4      	lsls	r4, r4, #11
    2036:	4323      	orrs	r3, r4
    2038:	e7dd      	b.n	1ff6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    203a:	4c0d      	ldr	r4, [pc, #52]	; (2070 <_system_pinmux_config+0xa4>)
    203c:	4023      	ands	r3, r4
    203e:	e7df      	b.n	2000 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2040:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2042:	040c      	lsls	r4, r1, #16
    2044:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2046:	23a0      	movs	r3, #160	; 0xa0
    2048:	05db      	lsls	r3, r3, #23
    204a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    204c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    204e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2050:	23d0      	movs	r3, #208	; 0xd0
    2052:	061b      	lsls	r3, r3, #24
    2054:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2056:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2058:	78d3      	ldrb	r3, [r2, #3]
    205a:	2b00      	cmp	r3, #0
    205c:	d103      	bne.n	2066 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    205e:	7853      	ldrb	r3, [r2, #1]
    2060:	3b01      	subs	r3, #1
    2062:	2b01      	cmp	r3, #1
    2064:	d902      	bls.n	206c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2066:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2068:	6181      	str	r1, [r0, #24]
    206a:	e7f8      	b.n	205e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    206c:	6081      	str	r1, [r0, #8]
}
    206e:	e7fa      	b.n	2066 <_system_pinmux_config+0x9a>
    2070:	fffbffff 	.word	0xfffbffff

00002074 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2074:	b510      	push	{r4, lr}
    2076:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2078:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    207a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    207c:	2900      	cmp	r1, #0
    207e:	d104      	bne.n	208a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2080:	0943      	lsrs	r3, r0, #5
    2082:	01db      	lsls	r3, r3, #7
    2084:	4905      	ldr	r1, [pc, #20]	; (209c <system_pinmux_pin_set_config+0x28>)
    2086:	468c      	mov	ip, r1
    2088:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    208a:	241f      	movs	r4, #31
    208c:	4020      	ands	r0, r4
    208e:	2101      	movs	r1, #1
    2090:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2092:	0018      	movs	r0, r3
    2094:	4b02      	ldr	r3, [pc, #8]	; (20a0 <system_pinmux_pin_set_config+0x2c>)
    2096:	4798      	blx	r3
}
    2098:	bd10      	pop	{r4, pc}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	41004400 	.word	0x41004400
    20a0:	00001fcd 	.word	0x00001fcd

000020a4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    20a4:	4770      	bx	lr
	...

000020a8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    20a8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    20aa:	4b05      	ldr	r3, [pc, #20]	; (20c0 <system_init+0x18>)
    20ac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    20ae:	4b05      	ldr	r3, [pc, #20]	; (20c4 <system_init+0x1c>)
    20b0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <system_init+0x20>)
    20b4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    20b6:	4b05      	ldr	r3, [pc, #20]	; (20cc <system_init+0x24>)
    20b8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    20ba:	4b05      	ldr	r3, [pc, #20]	; (20d0 <system_init+0x28>)
    20bc:	4798      	blx	r3
}
    20be:	bd10      	pop	{r4, pc}
    20c0:	00001cad 	.word	0x00001cad
    20c4:	00001ac1 	.word	0x00001ac1
    20c8:	000020a5 	.word	0x000020a5
    20cc:	000020a5 	.word	0x000020a5
    20d0:	000020a5 	.word	0x000020a5

000020d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    20d4:	e7fe      	b.n	20d4 <Dummy_Handler>
	...

000020d8 <Reset_Handler>:
{
    20d8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    20da:	4a26      	ldr	r2, [pc, #152]	; (2174 <Reset_Handler+0x9c>)
    20dc:	4b26      	ldr	r3, [pc, #152]	; (2178 <Reset_Handler+0xa0>)
    20de:	429a      	cmp	r2, r3
    20e0:	d011      	beq.n	2106 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    20e2:	001a      	movs	r2, r3
    20e4:	4b25      	ldr	r3, [pc, #148]	; (217c <Reset_Handler+0xa4>)
    20e6:	429a      	cmp	r2, r3
    20e8:	d20d      	bcs.n	2106 <Reset_Handler+0x2e>
    20ea:	4a25      	ldr	r2, [pc, #148]	; (2180 <Reset_Handler+0xa8>)
    20ec:	3303      	adds	r3, #3
    20ee:	1a9b      	subs	r3, r3, r2
    20f0:	089b      	lsrs	r3, r3, #2
    20f2:	3301      	adds	r3, #1
    20f4:	009b      	lsls	r3, r3, #2
    20f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    20f8:	481f      	ldr	r0, [pc, #124]	; (2178 <Reset_Handler+0xa0>)
    20fa:	491e      	ldr	r1, [pc, #120]	; (2174 <Reset_Handler+0x9c>)
    20fc:	588c      	ldr	r4, [r1, r2]
    20fe:	5084      	str	r4, [r0, r2]
    2100:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2102:	429a      	cmp	r2, r3
    2104:	d1fa      	bne.n	20fc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2106:	4a1f      	ldr	r2, [pc, #124]	; (2184 <Reset_Handler+0xac>)
    2108:	4b1f      	ldr	r3, [pc, #124]	; (2188 <Reset_Handler+0xb0>)
    210a:	429a      	cmp	r2, r3
    210c:	d20a      	bcs.n	2124 <Reset_Handler+0x4c>
    210e:	43d3      	mvns	r3, r2
    2110:	491d      	ldr	r1, [pc, #116]	; (2188 <Reset_Handler+0xb0>)
    2112:	185b      	adds	r3, r3, r1
    2114:	2103      	movs	r1, #3
    2116:	438b      	bics	r3, r1
    2118:	3304      	adds	r3, #4
    211a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    211c:	2100      	movs	r1, #0
    211e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2120:	4293      	cmp	r3, r2
    2122:	d1fc      	bne.n	211e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2124:	4a19      	ldr	r2, [pc, #100]	; (218c <Reset_Handler+0xb4>)
    2126:	21ff      	movs	r1, #255	; 0xff
    2128:	4b19      	ldr	r3, [pc, #100]	; (2190 <Reset_Handler+0xb8>)
    212a:	438b      	bics	r3, r1
    212c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    212e:	39fd      	subs	r1, #253	; 0xfd
    2130:	2390      	movs	r3, #144	; 0x90
    2132:	005b      	lsls	r3, r3, #1
    2134:	4a17      	ldr	r2, [pc, #92]	; (2194 <Reset_Handler+0xbc>)
    2136:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2138:	4b17      	ldr	r3, [pc, #92]	; (2198 <Reset_Handler+0xc0>)
    213a:	7b9a      	ldrb	r2, [r3, #14]
    213c:	312e      	adds	r1, #46	; 0x2e
    213e:	438a      	bics	r2, r1
    2140:	2120      	movs	r1, #32
    2142:	430a      	orrs	r2, r1
    2144:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2146:	7b9a      	ldrb	r2, [r3, #14]
    2148:	210c      	movs	r1, #12
    214a:	438a      	bics	r2, r1
    214c:	2108      	movs	r1, #8
    214e:	430a      	orrs	r2, r1
    2150:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2152:	7b9a      	ldrb	r2, [r3, #14]
    2154:	2103      	movs	r1, #3
    2156:	438a      	bics	r2, r1
    2158:	2102      	movs	r1, #2
    215a:	430a      	orrs	r2, r1
    215c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    215e:	4a0f      	ldr	r2, [pc, #60]	; (219c <Reset_Handler+0xc4>)
    2160:	6853      	ldr	r3, [r2, #4]
    2162:	2180      	movs	r1, #128	; 0x80
    2164:	430b      	orrs	r3, r1
    2166:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2168:	4b0d      	ldr	r3, [pc, #52]	; (21a0 <Reset_Handler+0xc8>)
    216a:	4798      	blx	r3
        main();
    216c:	4b0d      	ldr	r3, [pc, #52]	; (21a4 <Reset_Handler+0xcc>)
    216e:	4798      	blx	r3
    2170:	e7fe      	b.n	2170 <Reset_Handler+0x98>
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	0000264c 	.word	0x0000264c
    2178:	20000000 	.word	0x20000000
    217c:	2000007c 	.word	0x2000007c
    2180:	20000004 	.word	0x20000004
    2184:	20000080 	.word	0x20000080
    2188:	200007f4 	.word	0x200007f4
    218c:	e000ed00 	.word	0xe000ed00
    2190:	00000000 	.word	0x00000000
    2194:	41007000 	.word	0x41007000
    2198:	41004800 	.word	0x41004800
    219c:	41004000 	.word	0x41004000
    21a0:	00002351 	.word	0x00002351
    21a4:	000021e9 	.word	0x000021e9

000021a8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    21a8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    21aa:	4a06      	ldr	r2, [pc, #24]	; (21c4 <_sbrk+0x1c>)
    21ac:	6812      	ldr	r2, [r2, #0]
    21ae:	2a00      	cmp	r2, #0
    21b0:	d004      	beq.n	21bc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    21b2:	4a04      	ldr	r2, [pc, #16]	; (21c4 <_sbrk+0x1c>)
    21b4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    21b6:	18c3      	adds	r3, r0, r3
    21b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    21ba:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    21bc:	4902      	ldr	r1, [pc, #8]	; (21c8 <_sbrk+0x20>)
    21be:	4a01      	ldr	r2, [pc, #4]	; (21c4 <_sbrk+0x1c>)
    21c0:	6011      	str	r1, [r2, #0]
    21c2:	e7f6      	b.n	21b2 <_sbrk+0xa>
    21c4:	20000144 	.word	0x20000144
    21c8:	20000bf8 	.word	0x20000bf8

000021cc <setI2CDetect>:
	}

}

void setI2CDetect()
{
    21cc:	b500      	push	{lr}
    21ce:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    21d0:	a901      	add	r1, sp, #4
    21d2:	2300      	movs	r3, #0
    21d4:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    21d6:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    21d8:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(DETECT_PIN, &config_port_pin);
    21da:	2018      	movs	r0, #24
    21dc:	4b01      	ldr	r3, [pc, #4]	; (21e4 <setI2CDetect+0x18>)
    21de:	4798      	blx	r3
}
    21e0:	b003      	add	sp, #12
    21e2:	bd00      	pop	{pc}
    21e4:	000009f1 	.word	0x000009f1

000021e8 <main>:


int main (void)
{
    21e8:	b570      	push	{r4, r5, r6, lr}
	system_init();
    21ea:	4b0a      	ldr	r3, [pc, #40]	; (2214 <main+0x2c>)
    21ec:	4798      	blx	r3
	delay_init();
    21ee:	4b0a      	ldr	r3, [pc, #40]	; (2218 <main+0x30>)
    21f0:	4798      	blx	r3
	
	ir_sensor_init();
    21f2:	4b0a      	ldr	r3, [pc, #40]	; (221c <main+0x34>)
    21f4:	4798      	blx	r3
	RGBPI55Init();
    21f6:	4b0a      	ldr	r3, [pc, #40]	; (2220 <main+0x38>)
    21f8:	4798      	blx	r3
	//delay_cycles_ms(1000);
	setI2CDetect();
    21fa:	4b0a      	ldr	r3, [pc, #40]	; (2224 <main+0x3c>)
    21fc:	4798      	blx	r3
	//testTimer();
	
	configure_i2c_slave();
    21fe:	4b0a      	ldr	r3, [pc, #40]	; (2228 <main+0x40>)
    2200:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    2202:	4b0a      	ldr	r3, [pc, #40]	; (222c <main+0x44>)
    2204:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
	while(true) {
		read_all_values();
    2206:	4d0a      	ldr	r5, [pc, #40]	; (2230 <main+0x48>)
		//testADDLED();
		//fadeREDControlled();
		//readI2CDetect();
		delay_ms(10);
    2208:	4c0a      	ldr	r4, [pc, #40]	; (2234 <main+0x4c>)
		read_all_values();
    220a:	47a8      	blx	r5
		delay_ms(10);
    220c:	200a      	movs	r0, #10
    220e:	47a0      	blx	r4
    2210:	e7fb      	b.n	220a <main+0x22>
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	000020a9 	.word	0x000020a9
    2218:	00000171 	.word	0x00000171
    221c:	00001899 	.word	0x00001899
    2220:	00001aa5 	.word	0x00001aa5
    2224:	000021cd 	.word	0x000021cd
    2228:	0000165d 	.word	0x0000165d
    222c:	000016f5 	.word	0x000016f5
    2230:	00001515 	.word	0x00001515
    2234:	000001b1 	.word	0x000001b1

00002238 <__udivsi3>:
    2238:	2200      	movs	r2, #0
    223a:	0843      	lsrs	r3, r0, #1
    223c:	428b      	cmp	r3, r1
    223e:	d374      	bcc.n	232a <__udivsi3+0xf2>
    2240:	0903      	lsrs	r3, r0, #4
    2242:	428b      	cmp	r3, r1
    2244:	d35f      	bcc.n	2306 <__udivsi3+0xce>
    2246:	0a03      	lsrs	r3, r0, #8
    2248:	428b      	cmp	r3, r1
    224a:	d344      	bcc.n	22d6 <__udivsi3+0x9e>
    224c:	0b03      	lsrs	r3, r0, #12
    224e:	428b      	cmp	r3, r1
    2250:	d328      	bcc.n	22a4 <__udivsi3+0x6c>
    2252:	0c03      	lsrs	r3, r0, #16
    2254:	428b      	cmp	r3, r1
    2256:	d30d      	bcc.n	2274 <__udivsi3+0x3c>
    2258:	22ff      	movs	r2, #255	; 0xff
    225a:	0209      	lsls	r1, r1, #8
    225c:	ba12      	rev	r2, r2
    225e:	0c03      	lsrs	r3, r0, #16
    2260:	428b      	cmp	r3, r1
    2262:	d302      	bcc.n	226a <__udivsi3+0x32>
    2264:	1212      	asrs	r2, r2, #8
    2266:	0209      	lsls	r1, r1, #8
    2268:	d065      	beq.n	2336 <__udivsi3+0xfe>
    226a:	0b03      	lsrs	r3, r0, #12
    226c:	428b      	cmp	r3, r1
    226e:	d319      	bcc.n	22a4 <__udivsi3+0x6c>
    2270:	e000      	b.n	2274 <__udivsi3+0x3c>
    2272:	0a09      	lsrs	r1, r1, #8
    2274:	0bc3      	lsrs	r3, r0, #15
    2276:	428b      	cmp	r3, r1
    2278:	d301      	bcc.n	227e <__udivsi3+0x46>
    227a:	03cb      	lsls	r3, r1, #15
    227c:	1ac0      	subs	r0, r0, r3
    227e:	4152      	adcs	r2, r2
    2280:	0b83      	lsrs	r3, r0, #14
    2282:	428b      	cmp	r3, r1
    2284:	d301      	bcc.n	228a <__udivsi3+0x52>
    2286:	038b      	lsls	r3, r1, #14
    2288:	1ac0      	subs	r0, r0, r3
    228a:	4152      	adcs	r2, r2
    228c:	0b43      	lsrs	r3, r0, #13
    228e:	428b      	cmp	r3, r1
    2290:	d301      	bcc.n	2296 <__udivsi3+0x5e>
    2292:	034b      	lsls	r3, r1, #13
    2294:	1ac0      	subs	r0, r0, r3
    2296:	4152      	adcs	r2, r2
    2298:	0b03      	lsrs	r3, r0, #12
    229a:	428b      	cmp	r3, r1
    229c:	d301      	bcc.n	22a2 <__udivsi3+0x6a>
    229e:	030b      	lsls	r3, r1, #12
    22a0:	1ac0      	subs	r0, r0, r3
    22a2:	4152      	adcs	r2, r2
    22a4:	0ac3      	lsrs	r3, r0, #11
    22a6:	428b      	cmp	r3, r1
    22a8:	d301      	bcc.n	22ae <__udivsi3+0x76>
    22aa:	02cb      	lsls	r3, r1, #11
    22ac:	1ac0      	subs	r0, r0, r3
    22ae:	4152      	adcs	r2, r2
    22b0:	0a83      	lsrs	r3, r0, #10
    22b2:	428b      	cmp	r3, r1
    22b4:	d301      	bcc.n	22ba <__udivsi3+0x82>
    22b6:	028b      	lsls	r3, r1, #10
    22b8:	1ac0      	subs	r0, r0, r3
    22ba:	4152      	adcs	r2, r2
    22bc:	0a43      	lsrs	r3, r0, #9
    22be:	428b      	cmp	r3, r1
    22c0:	d301      	bcc.n	22c6 <__udivsi3+0x8e>
    22c2:	024b      	lsls	r3, r1, #9
    22c4:	1ac0      	subs	r0, r0, r3
    22c6:	4152      	adcs	r2, r2
    22c8:	0a03      	lsrs	r3, r0, #8
    22ca:	428b      	cmp	r3, r1
    22cc:	d301      	bcc.n	22d2 <__udivsi3+0x9a>
    22ce:	020b      	lsls	r3, r1, #8
    22d0:	1ac0      	subs	r0, r0, r3
    22d2:	4152      	adcs	r2, r2
    22d4:	d2cd      	bcs.n	2272 <__udivsi3+0x3a>
    22d6:	09c3      	lsrs	r3, r0, #7
    22d8:	428b      	cmp	r3, r1
    22da:	d301      	bcc.n	22e0 <__udivsi3+0xa8>
    22dc:	01cb      	lsls	r3, r1, #7
    22de:	1ac0      	subs	r0, r0, r3
    22e0:	4152      	adcs	r2, r2
    22e2:	0983      	lsrs	r3, r0, #6
    22e4:	428b      	cmp	r3, r1
    22e6:	d301      	bcc.n	22ec <__udivsi3+0xb4>
    22e8:	018b      	lsls	r3, r1, #6
    22ea:	1ac0      	subs	r0, r0, r3
    22ec:	4152      	adcs	r2, r2
    22ee:	0943      	lsrs	r3, r0, #5
    22f0:	428b      	cmp	r3, r1
    22f2:	d301      	bcc.n	22f8 <__udivsi3+0xc0>
    22f4:	014b      	lsls	r3, r1, #5
    22f6:	1ac0      	subs	r0, r0, r3
    22f8:	4152      	adcs	r2, r2
    22fa:	0903      	lsrs	r3, r0, #4
    22fc:	428b      	cmp	r3, r1
    22fe:	d301      	bcc.n	2304 <__udivsi3+0xcc>
    2300:	010b      	lsls	r3, r1, #4
    2302:	1ac0      	subs	r0, r0, r3
    2304:	4152      	adcs	r2, r2
    2306:	08c3      	lsrs	r3, r0, #3
    2308:	428b      	cmp	r3, r1
    230a:	d301      	bcc.n	2310 <__udivsi3+0xd8>
    230c:	00cb      	lsls	r3, r1, #3
    230e:	1ac0      	subs	r0, r0, r3
    2310:	4152      	adcs	r2, r2
    2312:	0883      	lsrs	r3, r0, #2
    2314:	428b      	cmp	r3, r1
    2316:	d301      	bcc.n	231c <__udivsi3+0xe4>
    2318:	008b      	lsls	r3, r1, #2
    231a:	1ac0      	subs	r0, r0, r3
    231c:	4152      	adcs	r2, r2
    231e:	0843      	lsrs	r3, r0, #1
    2320:	428b      	cmp	r3, r1
    2322:	d301      	bcc.n	2328 <__udivsi3+0xf0>
    2324:	004b      	lsls	r3, r1, #1
    2326:	1ac0      	subs	r0, r0, r3
    2328:	4152      	adcs	r2, r2
    232a:	1a41      	subs	r1, r0, r1
    232c:	d200      	bcs.n	2330 <__udivsi3+0xf8>
    232e:	4601      	mov	r1, r0
    2330:	4152      	adcs	r2, r2
    2332:	4610      	mov	r0, r2
    2334:	4770      	bx	lr
    2336:	e7ff      	b.n	2338 <__udivsi3+0x100>
    2338:	b501      	push	{r0, lr}
    233a:	2000      	movs	r0, #0
    233c:	f000 f806 	bl	234c <__aeabi_idiv0>
    2340:	bd02      	pop	{r1, pc}
    2342:	46c0      	nop			; (mov r8, r8)

00002344 <__aeabi_uidivmod>:
    2344:	2900      	cmp	r1, #0
    2346:	d0f7      	beq.n	2338 <__udivsi3+0x100>
    2348:	e776      	b.n	2238 <__udivsi3>
    234a:	4770      	bx	lr

0000234c <__aeabi_idiv0>:
    234c:	4770      	bx	lr
    234e:	46c0      	nop			; (mov r8, r8)

00002350 <__libc_init_array>:
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	2600      	movs	r6, #0
    2354:	4d0c      	ldr	r5, [pc, #48]	; (2388 <__libc_init_array+0x38>)
    2356:	4c0d      	ldr	r4, [pc, #52]	; (238c <__libc_init_array+0x3c>)
    2358:	1b64      	subs	r4, r4, r5
    235a:	10a4      	asrs	r4, r4, #2
    235c:	42a6      	cmp	r6, r4
    235e:	d109      	bne.n	2374 <__libc_init_array+0x24>
    2360:	2600      	movs	r6, #0
    2362:	f000 f963 	bl	262c <_init>
    2366:	4d0a      	ldr	r5, [pc, #40]	; (2390 <__libc_init_array+0x40>)
    2368:	4c0a      	ldr	r4, [pc, #40]	; (2394 <__libc_init_array+0x44>)
    236a:	1b64      	subs	r4, r4, r5
    236c:	10a4      	asrs	r4, r4, #2
    236e:	42a6      	cmp	r6, r4
    2370:	d105      	bne.n	237e <__libc_init_array+0x2e>
    2372:	bd70      	pop	{r4, r5, r6, pc}
    2374:	00b3      	lsls	r3, r6, #2
    2376:	58eb      	ldr	r3, [r5, r3]
    2378:	4798      	blx	r3
    237a:	3601      	adds	r6, #1
    237c:	e7ee      	b.n	235c <__libc_init_array+0xc>
    237e:	00b3      	lsls	r3, r6, #2
    2380:	58eb      	ldr	r3, [r5, r3]
    2382:	4798      	blx	r3
    2384:	3601      	adds	r6, #1
    2386:	e7f2      	b.n	236e <__libc_init_array+0x1e>
    2388:	00002638 	.word	0x00002638
    238c:	00002638 	.word	0x00002638
    2390:	00002638 	.word	0x00002638
    2394:	0000263c 	.word	0x0000263c

00002398 <malloc>:
    2398:	b510      	push	{r4, lr}
    239a:	4b03      	ldr	r3, [pc, #12]	; (23a8 <malloc+0x10>)
    239c:	0001      	movs	r1, r0
    239e:	6818      	ldr	r0, [r3, #0]
    23a0:	f000 f816 	bl	23d0 <_malloc_r>
    23a4:	bd10      	pop	{r4, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	20000018 	.word	0x20000018

000023ac <memcpy>:
    23ac:	2300      	movs	r3, #0
    23ae:	b510      	push	{r4, lr}
    23b0:	429a      	cmp	r2, r3
    23b2:	d100      	bne.n	23b6 <memcpy+0xa>
    23b4:	bd10      	pop	{r4, pc}
    23b6:	5ccc      	ldrb	r4, [r1, r3]
    23b8:	54c4      	strb	r4, [r0, r3]
    23ba:	3301      	adds	r3, #1
    23bc:	e7f8      	b.n	23b0 <memcpy+0x4>

000023be <memset>:
    23be:	0003      	movs	r3, r0
    23c0:	1882      	adds	r2, r0, r2
    23c2:	4293      	cmp	r3, r2
    23c4:	d100      	bne.n	23c8 <memset+0xa>
    23c6:	4770      	bx	lr
    23c8:	7019      	strb	r1, [r3, #0]
    23ca:	3301      	adds	r3, #1
    23cc:	e7f9      	b.n	23c2 <memset+0x4>
	...

000023d0 <_malloc_r>:
    23d0:	2303      	movs	r3, #3
    23d2:	b570      	push	{r4, r5, r6, lr}
    23d4:	1ccd      	adds	r5, r1, #3
    23d6:	439d      	bics	r5, r3
    23d8:	3508      	adds	r5, #8
    23da:	0006      	movs	r6, r0
    23dc:	2d0c      	cmp	r5, #12
    23de:	d21e      	bcs.n	241e <_malloc_r+0x4e>
    23e0:	250c      	movs	r5, #12
    23e2:	42a9      	cmp	r1, r5
    23e4:	d81d      	bhi.n	2422 <_malloc_r+0x52>
    23e6:	0030      	movs	r0, r6
    23e8:	f000 f862 	bl	24b0 <__malloc_lock>
    23ec:	4a25      	ldr	r2, [pc, #148]	; (2484 <_malloc_r+0xb4>)
    23ee:	6814      	ldr	r4, [r2, #0]
    23f0:	0021      	movs	r1, r4
    23f2:	2900      	cmp	r1, #0
    23f4:	d119      	bne.n	242a <_malloc_r+0x5a>
    23f6:	4c24      	ldr	r4, [pc, #144]	; (2488 <_malloc_r+0xb8>)
    23f8:	6823      	ldr	r3, [r4, #0]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d103      	bne.n	2406 <_malloc_r+0x36>
    23fe:	0030      	movs	r0, r6
    2400:	f000 f844 	bl	248c <_sbrk_r>
    2404:	6020      	str	r0, [r4, #0]
    2406:	0029      	movs	r1, r5
    2408:	0030      	movs	r0, r6
    240a:	f000 f83f 	bl	248c <_sbrk_r>
    240e:	1c43      	adds	r3, r0, #1
    2410:	d12c      	bne.n	246c <_malloc_r+0x9c>
    2412:	230c      	movs	r3, #12
    2414:	0030      	movs	r0, r6
    2416:	6033      	str	r3, [r6, #0]
    2418:	f000 f84b 	bl	24b2 <__malloc_unlock>
    241c:	e003      	b.n	2426 <_malloc_r+0x56>
    241e:	2d00      	cmp	r5, #0
    2420:	dadf      	bge.n	23e2 <_malloc_r+0x12>
    2422:	230c      	movs	r3, #12
    2424:	6033      	str	r3, [r6, #0]
    2426:	2000      	movs	r0, #0
    2428:	bd70      	pop	{r4, r5, r6, pc}
    242a:	680b      	ldr	r3, [r1, #0]
    242c:	1b5b      	subs	r3, r3, r5
    242e:	d41a      	bmi.n	2466 <_malloc_r+0x96>
    2430:	2b0b      	cmp	r3, #11
    2432:	d903      	bls.n	243c <_malloc_r+0x6c>
    2434:	600b      	str	r3, [r1, #0]
    2436:	18cc      	adds	r4, r1, r3
    2438:	6025      	str	r5, [r4, #0]
    243a:	e003      	b.n	2444 <_malloc_r+0x74>
    243c:	428c      	cmp	r4, r1
    243e:	d10e      	bne.n	245e <_malloc_r+0x8e>
    2440:	6863      	ldr	r3, [r4, #4]
    2442:	6013      	str	r3, [r2, #0]
    2444:	0030      	movs	r0, r6
    2446:	f000 f834 	bl	24b2 <__malloc_unlock>
    244a:	0020      	movs	r0, r4
    244c:	2207      	movs	r2, #7
    244e:	300b      	adds	r0, #11
    2450:	1d23      	adds	r3, r4, #4
    2452:	4390      	bics	r0, r2
    2454:	1ac3      	subs	r3, r0, r3
    2456:	d0e7      	beq.n	2428 <_malloc_r+0x58>
    2458:	425a      	negs	r2, r3
    245a:	50e2      	str	r2, [r4, r3]
    245c:	e7e4      	b.n	2428 <_malloc_r+0x58>
    245e:	684b      	ldr	r3, [r1, #4]
    2460:	6063      	str	r3, [r4, #4]
    2462:	000c      	movs	r4, r1
    2464:	e7ee      	b.n	2444 <_malloc_r+0x74>
    2466:	000c      	movs	r4, r1
    2468:	6849      	ldr	r1, [r1, #4]
    246a:	e7c2      	b.n	23f2 <_malloc_r+0x22>
    246c:	2303      	movs	r3, #3
    246e:	1cc4      	adds	r4, r0, #3
    2470:	439c      	bics	r4, r3
    2472:	42a0      	cmp	r0, r4
    2474:	d0e0      	beq.n	2438 <_malloc_r+0x68>
    2476:	1a21      	subs	r1, r4, r0
    2478:	0030      	movs	r0, r6
    247a:	f000 f807 	bl	248c <_sbrk_r>
    247e:	1c43      	adds	r3, r0, #1
    2480:	d1da      	bne.n	2438 <_malloc_r+0x68>
    2482:	e7c6      	b.n	2412 <_malloc_r+0x42>
    2484:	2000014c 	.word	0x2000014c
    2488:	20000150 	.word	0x20000150

0000248c <_sbrk_r>:
    248c:	2300      	movs	r3, #0
    248e:	b570      	push	{r4, r5, r6, lr}
    2490:	4c06      	ldr	r4, [pc, #24]	; (24ac <_sbrk_r+0x20>)
    2492:	0005      	movs	r5, r0
    2494:	0008      	movs	r0, r1
    2496:	6023      	str	r3, [r4, #0]
    2498:	f7ff fe86 	bl	21a8 <_sbrk>
    249c:	1c43      	adds	r3, r0, #1
    249e:	d103      	bne.n	24a8 <_sbrk_r+0x1c>
    24a0:	6823      	ldr	r3, [r4, #0]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d000      	beq.n	24a8 <_sbrk_r+0x1c>
    24a6:	602b      	str	r3, [r5, #0]
    24a8:	bd70      	pop	{r4, r5, r6, pc}
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	200007f0 	.word	0x200007f0

000024b0 <__malloc_lock>:
    24b0:	4770      	bx	lr

000024b2 <__malloc_unlock>:
    24b2:	4770      	bx	lr
    24b4:	000003ee 	.word	0x000003ee
    24b8:	0000063a 	.word	0x0000063a
    24bc:	0000063a 	.word	0x0000063a
    24c0:	0000063a 	.word	0x0000063a
    24c4:	0000063a 	.word	0x0000063a
    24c8:	0000063a 	.word	0x0000063a
    24cc:	0000063a 	.word	0x0000063a
    24d0:	0000063a 	.word	0x0000063a
    24d4:	0000063a 	.word	0x0000063a
    24d8:	0000063a 	.word	0x0000063a
    24dc:	0000063a 	.word	0x0000063a
    24e0:	0000063a 	.word	0x0000063a
    24e4:	0000063a 	.word	0x0000063a
    24e8:	0000063a 	.word	0x0000063a
    24ec:	0000063a 	.word	0x0000063a
    24f0:	0000063a 	.word	0x0000063a
    24f4:	000003d6 	.word	0x000003d6
    24f8:	0000063a 	.word	0x0000063a
    24fc:	0000063a 	.word	0x0000063a
    2500:	0000063a 	.word	0x0000063a
    2504:	0000063a 	.word	0x0000063a
    2508:	0000063a 	.word	0x0000063a
    250c:	0000063a 	.word	0x0000063a
    2510:	0000063a 	.word	0x0000063a
    2514:	0000063a 	.word	0x0000063a
    2518:	0000063a 	.word	0x0000063a
    251c:	0000063a 	.word	0x0000063a
    2520:	0000063a 	.word	0x0000063a
    2524:	0000063a 	.word	0x0000063a
    2528:	0000063a 	.word	0x0000063a
    252c:	0000063a 	.word	0x0000063a
    2530:	0000063a 	.word	0x0000063a
    2534:	000003e6 	.word	0x000003e6
    2538:	0000063a 	.word	0x0000063a
    253c:	0000063a 	.word	0x0000063a
    2540:	0000063a 	.word	0x0000063a
    2544:	0000063a 	.word	0x0000063a
    2548:	0000063a 	.word	0x0000063a
    254c:	0000063a 	.word	0x0000063a
    2550:	0000063a 	.word	0x0000063a
    2554:	0000063a 	.word	0x0000063a
    2558:	0000063a 	.word	0x0000063a
    255c:	0000063a 	.word	0x0000063a
    2560:	0000063a 	.word	0x0000063a
    2564:	0000063a 	.word	0x0000063a
    2568:	0000063a 	.word	0x0000063a
    256c:	0000063a 	.word	0x0000063a
    2570:	0000063a 	.word	0x0000063a
    2574:	000003de 	.word	0x000003de
    2578:	000003f6 	.word	0x000003f6
    257c:	000003be 	.word	0x000003be
    2580:	000003ce 	.word	0x000003ce
    2584:	000003c6 	.word	0x000003c6
    2588:	00000002 	.word	0x00000002
    258c:	00000003 	.word	0x00000003
    2590:	00000004 	.word	0x00000004
    2594:	00000005 	.word	0x00000005
    2598:	00000006 	.word	0x00000006
    259c:	00000007 	.word	0x00000007
    25a0:	0000000e 	.word	0x0000000e
    25a4:	0000000f 	.word	0x0000000f
    25a8:	0000000a 	.word	0x0000000a
    25ac:	0000000b 	.word	0x0000000b
    25b0:	0000ffff 	.word	0x0000ffff
    25b4:	0000ffff 	.word	0x0000ffff
    25b8:	0000ffff 	.word	0x0000ffff
    25bc:	0000ffff 	.word	0x0000ffff
    25c0:	0000ffff 	.word	0x0000ffff
    25c4:	0000ffff 	.word	0x0000ffff
    25c8:	0000ffff 	.word	0x0000ffff
    25cc:	0000ffff 	.word	0x0000ffff
    25d0:	0000ffff 	.word	0x0000ffff
    25d4:	0000ffff 	.word	0x0000ffff
    25d8:	42000800 	.word	0x42000800
    25dc:	42000c00 	.word	0x42000c00
    25e0:	42001000 	.word	0x42001000
    25e4:	00001b46 	.word	0x00001b46
    25e8:	00001b42 	.word	0x00001b42
    25ec:	00001b42 	.word	0x00001b42
    25f0:	00001ba8 	.word	0x00001ba8
    25f4:	00001ba8 	.word	0x00001ba8
    25f8:	00001b5a 	.word	0x00001b5a
    25fc:	00001b4c 	.word	0x00001b4c
    2600:	00001b60 	.word	0x00001b60
    2604:	00001b96 	.word	0x00001b96
    2608:	00001c30 	.word	0x00001c30
    260c:	00001c10 	.word	0x00001c10
    2610:	00001c10 	.word	0x00001c10
    2614:	00001c9c 	.word	0x00001c9c
    2618:	00001c22 	.word	0x00001c22
    261c:	00001c3e 	.word	0x00001c3e
    2620:	00001c14 	.word	0x00001c14
    2624:	00001c4c 	.word	0x00001c4c
    2628:	00001c8c 	.word	0x00001c8c

0000262c <_init>:
    262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2632:	bc08      	pop	{r3}
    2634:	469e      	mov	lr, r3
    2636:	4770      	bx	lr

00002638 <__init_array_start>:
    2638:	000000b5 	.word	0x000000b5

0000263c <_fini>:
    263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2642:	bc08      	pop	{r3}
    2644:	469e      	mov	lr, r3
    2646:	4770      	bx	lr

00002648 <__fini_array_start>:
    2648:	0000008d 	.word	0x0000008d
